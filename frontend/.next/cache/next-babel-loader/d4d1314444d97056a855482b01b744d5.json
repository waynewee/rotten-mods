{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nimport { fetchBookmarksAction, fetchPlannedModsAction, fetchPersonalReviewsAction } from \"../redux/actions/personal-modules\";\nexport var updatePersonalBookmarks = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (userId) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return bookmarkApi.getBookmarks(userId);\n\n          case 4:\n            data = _context.sent;\n            store.dispatch(fetchBookmarksAction(data));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function updatePersonalBookmarks(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updatedPersonalPlannedModules = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userId) {\n    var data, mappedModCode;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (userId) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return plannedModApi.fetchPlannedMods(userId);\n\n          case 4:\n            data = _context2.sent;\n            mappedModCode = data.map();\n            store.dispatch(fetchPlannedModsAction(data));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function updatedPersonalPlannedModules(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var updatePersonalReviews = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (userId) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            _context3.next = 4;\n            return reviewApi.getReviewsOfUser(userId);\n\n          case 4:\n            data = _context3.sent;\n            store.dispatch(fetchPersonalReviewsAction(data));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function updatePersonalReviews(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var triggerRequireLoginMessage = function triggerRequireLoginMessage() {\n  message.warning(\"You need to login first!\");\n};\nexport var fetchRatings = function fetchRatings(ratingIds, setStar, setDifficulty) {\n  ratingIds.forEach( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n      var rating;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return reviewApi.getRatingById(id);\n\n            case 2:\n              rating = _context4.sent;\n\n              if (rating.type == \"star\") {\n                setStar(rating.value);\n              } else if (rating.type == \"difficulty\") {\n                setDifficulty(rating.value);\n              }\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/utils/helpers.ts"],"names":["bookmarkApi","plannedModApi","reviewApi","store","message","fetchBookmarksAction","fetchPlannedModsAction","fetchPersonalReviewsAction","updatePersonalBookmarks","userId","getBookmarks","data","dispatch","updatedPersonalPlannedModules","fetchPlannedMods","mappedModCode","map","updatePersonalReviews","getReviewsOfUser","triggerRequireLoginMessage","warning","fetchRatings","ratingIds","setStar","setDifficulty","forEach","id","getRatingById","rating","type","value"],"mappings":";;AACA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SACEC,oBADF,EAEEC,sBAFF,EAGEC,0BAHF,QAIQ,mCAJR;AAMA,OAAO,IAAMC,uBAAuB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAChCA,MADgC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGlBT,WAAW,CAACU,YAAZ,CAAyBD,MAAzB,CAHkB;;AAAA;AAG/BE,YAAAA,IAH+B;AAIrCR,YAAAA,KAAK,CAACS,QAAN,CAAeP,oBAAoB,CAACM,IAAD,CAAnC;;AAJqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBH,uBAAuB;AAAA;AAAA;AAAA,GAA7B;AAOP,OAAO,IAAMK,6BAA6B;AAAA,uEAAG,kBAAOJ,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACtCA,MADsC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGxBR,aAAa,CAACa,gBAAd,CAA+BL,MAA/B,CAHwB;;AAAA;AAGrCE,YAAAA,IAHqC;AAIrCI,YAAAA,aAJqC,GAIrBJ,IAAI,CAACK,GAAL,EAJqB;AAM3Cb,YAAAA,KAAK,CAACS,QAAN,CAAeN,sBAAsB,CAACK,IAAD,CAArC;;AAN2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA7BE,6BAA6B;AAAA;AAAA;AAAA,GAAnC;AASP,OAAO,IAAMI,qBAAqB;AAAA,uEAAG,kBAAOR,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC9BA,MAD8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGhBP,SAAS,CAACgB,gBAAV,CAA2BT,MAA3B,CAHgB;;AAAA;AAG7BE,YAAAA,IAH6B;AAKnCR,YAAAA,KAAK,CAACS,QAAN,CAAeL,0BAA0B,CAACI,IAAD,CAAzC;;AALmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBM,qBAAqB;AAAA;AAAA;AAAA,GAA3B;AAQP,OAAO,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AAC9Cf,EAAAA,OAAO,CAACgB,OAAR,CAAgB,0BAAhB;AACD,CAFM;AAIP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1BC,SAD0B,EAE1BC,OAF0B,EAG1BC,aAH0B,EAIjB;AACTF,EAAAA,SAAS,CAACG,OAAV;AAAA,yEAAkB,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKxB,SAAS,CAACyB,aAAV,CAAwBD,EAAxB,CADL;;AAAA;AACVE,cAAAA,MADU;;AAEhB,kBAAIA,MAAM,CAACC,IAAP,IAAe,MAAnB,EAA2B;AACzBN,gBAAAA,OAAO,CAACK,MAAM,CAACE,KAAR,CAAP;AACD,eAFD,MAEO,IAAIF,MAAM,CAACC,IAAP,IAAe,YAAnB,EAAiC;AACtCL,gBAAAA,aAAa,CAACI,MAAM,CAACE,KAAR,CAAb;AACD;;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA;AAQD,CAbM","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nimport { \n  fetchBookmarksAction,\n  fetchPlannedModsAction, \n  fetchPersonalReviewsAction \n} from  \"../redux/actions/personal-modules\"\n\nexport const updatePersonalBookmarks = async (userId) => {\n  if (!userId) return;\n\n  const data = await bookmarkApi.getBookmarks(userId);\n  store.dispatch(fetchBookmarksAction(data));\n};\n\nexport const updatedPersonalPlannedModules = async (userId) => {\n  if (!userId) return;\n\n  const data = await plannedModApi.fetchPlannedMods(userId);\n  const mappedModCode = data.map()\n\n  store.dispatch(fetchPlannedModsAction(data));\n};\n\nexport const updatePersonalReviews = async (userId) => {\n  if (!userId) return;\n\n  const data = await reviewApi.getReviewsOfUser(userId);\n  \n  store.dispatch(fetchPersonalReviewsAction(data));\n};\n\nexport const triggerRequireLoginMessage = () => {\n  message.warning(\"You need to login first!\");\n};\n\nexport const fetchRatings = (\n  ratingIds: string[],\n  setStar: Dispatch<SetStateAction<number>>,\n  setDifficulty: Dispatch<SetStateAction<number>>\n): void => {\n  ratingIds.forEach(async (id) => {\n    const rating = await reviewApi.getRatingById(id);\n    if (rating.type == \"star\") {\n      setStar(rating.value);\n    } else if (rating.type == \"difficulty\") {\n      setDifficulty(rating.value);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}