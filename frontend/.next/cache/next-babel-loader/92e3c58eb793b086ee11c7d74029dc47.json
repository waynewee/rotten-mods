{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { LOG_USER_IN, LOG_USER_OUT } from \"../redux/constants\";\nimport authApi from \"../api/auth\";\nimport courseApi from \"../api/course\";\nimport { message } from 'antd';\n\nfunction signUp(_x) {\n  return _signUp.apply(this, arguments);\n}\n\nfunction _signUp() {\n  _signUp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n    var fullname, emailaddress, userpassword, university, course, yearofstudy, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"Sign Up Service received\");\n            console.log(values);\n            fullname = values.fullname, emailaddress = values.emailaddress, userpassword = values.userpassword, university = values.university, course = values.course, yearofstudy = values.yearofstudy; // let createUserConfig = {\n            //     method: 'post',\n            //     url: 'http://localhost:8080/api/user',\n            //     headers: {\n            //         'Content-Type': 'application/json'\n            //     },\n            //     data: {\n            //         \"name\": values.fullname,\n            //         \"email\": values.emailaddress,\n            //         \"password\": values.userpassword,\n            //         \"schoolId\": values.university,\n            //         \"courseId\": values.course,\n            //         \"currentYear\": values.yearofstudy\n            //     }\n            // };\n            // let createSchoolConfig = {\n            //     method: 'post',\n            //     url: 'http://localhost:8080/api/school',\n            //     headers: {\n            //         'Content-Type': 'application/json'\n            //     },\n            //     data: {\n            //         \"name\": values.fullname,\n            //     }\n            // };\n            // let createCourseConfig = {\n            //     method: 'post',\n            //     url: 'http://localhost:8080/api/course',\n            //     headers: {\n            //         'Content-Type': 'application/json'\n            //     },\n            //     data: {\n            //         \"name\": values.fullname,\n            //     }\n            // };\n            // if schoolId is user created, then create a new school in the system\n\n            if (!(course !== \"userCreated\" && university !== \"userCreated\")) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 6;\n            return authApi.signUp(fullname, emailaddress, userpassword, university, course, yearofstudy)[\"catch\"](function (error) {\n              throw error;\n            });\n\n          case 6:\n            data = _context.sent;\n\n            if (data) {\n              console.log(\"sign up success\");\n              message.success(\"Successfully Signed Up\");\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _signUp.apply(this, arguments);\n}\n\nfunction logIn(_x2, _x3) {\n  return _logIn.apply(this, arguments);\n}\n\nfunction _logIn() {\n  _logIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, dispatch) {\n    var emailaddress, password, data, name, currentYear, courseId, _id, courseData, user;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            emailaddress = values.emailaddress, password = values.password;\n            _context2.next = 3;\n            return authApi.logIn(emailaddress, password)[\"catch\"](function (error) {\n              throw error;\n            });\n\n          case 3:\n            data = _context2.sent;\n\n            if (!data) {\n              _context2.next = 14;\n              break;\n            }\n\n            name = data.name, currentYear = data.currentYear, courseId = data.courseId, _id = data._id;\n            _context2.next = 8;\n            return courseApi.getCourse(courseId);\n\n          case 8:\n            courseData = _context2.sent;\n            console.log(courseData);\n            user = {\n              fullName: name,\n              yearOfStudy: currentYear,\n              studyCourse: courseData.name,\n              _id: _id\n            };\n            window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n            window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n            dispatch({\n              type: LOG_USER_IN,\n              payload: user\n            });\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _logIn.apply(this, arguments);\n}\n\nfunction logOut(dispatch) {\n  window.localStorage.removeItem(\"ROTTENMODS_EMAIL\");\n  window.localStorage.removeItem(\"ROTTENMODS_PASSWORD\");\n  message.success(\"Successfully Logged Out\");\n  dispatch({\n    type: LOG_USER_OUT\n  });\n}\n\nexport default {\n  signUp: signUp,\n  logIn: logIn,\n  logOut: logOut\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/services/authentication.tsx"],"names":["LOG_USER_IN","LOG_USER_OUT","authApi","courseApi","message","signUp","values","console","log","fullname","emailaddress","userpassword","university","course","yearofstudy","error","data","success","logIn","dispatch","password","name","currentYear","courseId","_id","getCourse","courseData","user","fullName","yearOfStudy","studyCourse","window","localStorage","setItem","type","payload","logOut","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { LOG_USER_IN, LOG_USER_OUT } from \"../redux/constants\";\nimport { User } from \"../types\";\nimport authApi from \"../api/auth\";\nimport courseApi from \"../api/course\";\n\nimport { message } from 'antd';\n\nasync function signUp(values) {\n    console.log(\"Sign Up Service received\");\n    console.log(values);\n\n\n    const {fullname, emailaddress, userpassword, university, course, yearofstudy} = values;\n\n    // let createUserConfig = {\n    //     method: 'post',\n    //     url: 'http://localhost:8080/api/user',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     },\n    //     data: {\n    //         \"name\": values.fullname,\n    //         \"email\": values.emailaddress,\n    //         \"password\": values.userpassword,\n    //         \"schoolId\": values.university,\n    //         \"courseId\": values.course,\n    //         \"currentYear\": values.yearofstudy\n    //     }\n    // };\n\n    // let createSchoolConfig = {\n    //     method: 'post',\n    //     url: 'http://localhost:8080/api/school',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     },\n    //     data: {\n    //         \"name\": values.fullname,\n    //     }\n    // };\n\n    // let createCourseConfig = {\n    //     method: 'post',\n    //     url: 'http://localhost:8080/api/course',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     },\n    //     data: {\n    //         \"name\": values.fullname,\n    //     }\n    // };\n\n\n    // if schoolId is user created, then create a new school in the system\n\n    if (course !== \"userCreated\" && university !== \"userCreated\") {\n        \n        const data = await authApi.signUp(fullname, emailaddress, userpassword, university, course, yearofstudy).catch((error) => {\n            throw error;\n        })\n        if (data) {\n            console.log(\"sign up success\");\n            message.success(\"Successfully Signed Up\");\n        }\n    }\n\n}\n\n\nasync function logIn(values, dispatch) {\n    const { emailaddress, password } = values;\n    const data = await authApi.logIn(emailaddress, password).catch((error)=> {\n        throw error;\n    })\n    if (data) {\n        const { name, currentYear, courseId, _id } = data;\n        const courseData = await courseApi.getCourse(courseId);\n        console.log(courseData);\n        const user: User = {\n            fullName: name,\n            yearOfStudy: currentYear,\n            studyCourse: courseData.name,\n            _id\n        }\n\n        window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n        window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n\n        dispatch({\n            type: LOG_USER_IN,\n            payload: user\n        });\n\n    }\n\n}\n\nfunction logOut(dispatch) {\n    window.localStorage.removeItem(\"ROTTENMODS_EMAIL\");\n    window.localStorage.removeItem(\"ROTTENMODS_PASSWORD\");\n    message.success(\"Successfully Logged Out\")\n\n    dispatch({\n        type: LOG_USER_OUT,\n    })\n\n}\n\nexport default {\n    signUp,\n    logIn,\n    logOut\n}"]},"metadata":{},"sourceType":"module"}