{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { LOG_USER_IN } from \"../redux/constants\";\nimport authApi from \"../api/auth\";\n\nfunction signUp(values) {\n  console.log(\"Sign Up Service received\");\n  console.log(values);\n  var createUserConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/user',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname,\n      \"email\": values.emailaddress,\n      \"password\": values.userpassword,\n      \"schoolId\": values.university,\n      \"courseId\": values.course,\n      \"currentYear\": values.yearofstudy\n    }\n  };\n  var createSchoolConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/school',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname\n    }\n  };\n  var createCourseConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/course',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname\n    }\n  }; // if schoolId is user created, then create a new school in the system\n\n  if (values.course !== \"userCreated\" && values.school !== \"userCreated\") {\n    axios(createUserConfig).then(function (response) {\n      console.log(\"post is successful\");\n      console.log(response);\n    })[\"catch\"](function (error) {\n      console.log(error);\n    });\n  }\n}\n\nfunction logIn(_x, _x2) {\n  return _logIn.apply(this, arguments);\n}\n\nfunction _logIn() {\n  _logIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, dispatch) {\n    var emailaddress, password, data, name, currentYear, courseId, _id, user;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            emailaddress = values.emailaddress, password = values.password;\n            _context.next = 3;\n            return authApi.logIn(emailaddress, password);\n\n          case 3:\n            data = _context.sent;\n            name = data.name, currentYear = data.currentYear, courseId = data.courseId, _id = data._id;\n            user = {\n              fullName: name,\n              yearOfStudy: currentYear,\n              studyCourse: courseId,\n              _id: _id\n            };\n            window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n            window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n            dispatch({\n              type: LOG_USER_IN,\n              payload: user\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _logIn.apply(this, arguments);\n}\n\nexport default {\n  signUp: signUp,\n  logIn: logIn\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/services/authentication.tsx"],"names":["axios","LOG_USER_IN","authApi","signUp","values","console","log","createUserConfig","method","url","headers","data","fullname","emailaddress","userpassword","university","course","yearofstudy","createSchoolConfig","createCourseConfig","school","then","response","error","logIn","dispatch","password","name","currentYear","courseId","_id","user","fullName","yearOfStudy","studyCourse","window","localStorage","setItem","type","payload"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,MAAIG,gBAAgB,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,GAAG,EAAE,gCAFc;AAGnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAHU;AAMnBC,IAAAA,IAAI,EAAE;AACF,cAAQP,MAAM,CAACQ,QADb;AAEF,eAASR,MAAM,CAACS,YAFd;AAGF,kBAAYT,MAAM,CAACU,YAHjB;AAIF,kBAAYV,MAAM,CAACW,UAJjB;AAKF,kBAAYX,MAAM,CAACY,MALjB;AAMF,qBAAeZ,MAAM,CAACa;AANpB;AANa,GAAvB;AAgBA,MAAIC,kBAAkB,GAAG;AACrBV,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,GAAG,EAAE,kCAFgB;AAGrBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAHY;AAMrBC,IAAAA,IAAI,EAAE;AACF,cAAQP,MAAM,CAACQ;AADb;AANe,GAAzB;AAWA,MAAIO,kBAAkB,GAAG;AACrBX,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,GAAG,EAAE,kCAFgB;AAGrBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAHY;AAMrBC,IAAAA,IAAI,EAAE;AACF,cAAQP,MAAM,CAACQ;AADb;AANe,GAAzB,CA9BoB,CA0CpB;;AAEA,MAAIR,MAAM,CAACY,MAAP,KAAkB,aAAlB,IAAmCZ,MAAM,CAACgB,MAAP,KAAkB,aAAzD,EAAwE;AACpEpB,IAAAA,KAAK,CAACO,gBAAD,CAAL,CACKc,IADL,CACU,UAAUC,QAAV,EAAoB;AACtBjB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACH,KAJL,WAKW,UAAUC,KAAV,EAAiB;AACpBlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AACH,KAPL;AAQH;AAEJ;;SAGcC,K;;;;;oEAAf,iBAAqBpB,MAArB,EAA6BqB,QAA7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACYZ,YAAAA,YADZ,GACuCT,MADvC,CACYS,YADZ,EAC0Ba,QAD1B,GACuCtB,MADvC,CAC0BsB,QAD1B;AAAA;AAAA,mBAEuBxB,OAAO,CAACsB,KAAR,CAAcX,YAAd,EAA4Ba,QAA5B,CAFvB;;AAAA;AAEUf,YAAAA,IAFV;AAGYgB,YAAAA,IAHZ,GAGiDhB,IAHjD,CAGYgB,IAHZ,EAGkBC,WAHlB,GAGiDjB,IAHjD,CAGkBiB,WAHlB,EAG+BC,QAH/B,GAGiDlB,IAHjD,CAG+BkB,QAH/B,EAGyCC,GAHzC,GAGiDnB,IAHjD,CAGyCmB,GAHzC;AAIUC,YAAAA,IAJV,GAIuB;AACfC,cAAAA,QAAQ,EAAEL,IADK;AAEfM,cAAAA,WAAW,EAAEL,WAFE;AAGfM,cAAAA,WAAW,EAAEL,QAHE;AAIfC,cAAAA,GAAG,EAAHA;AAJe,aAJvB;AAWIK,YAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,kBAA5B,EAAgDxB,YAAhD;AACAsB,YAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,qBAA5B,EAAmDX,QAAnD;AAEAD,YAAAA,QAAQ,CAAC;AACLa,cAAAA,IAAI,EAAErC,WADD;AAELsC,cAAAA,OAAO,EAAER;AAFJ,aAAD,CAAR;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoBA,eAAe;AACX5B,EAAAA,MAAM,EAANA,MADW;AAEXqB,EAAAA,KAAK,EAALA;AAFW,CAAf","sourcesContent":["import axios from 'axios';\nimport { LOG_USER_IN } from \"../redux/constants\";\nimport { User } from \"../types\";\nimport authApi from \"../api/auth\";\n\nfunction signUp(values) {\n    console.log(\"Sign Up Service received\");\n    console.log(values);\n    let createUserConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/user',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data: {\n            \"name\": values.fullname,\n            \"email\": values.emailaddress,\n            \"password\": values.userpassword,\n            \"schoolId\": values.university,\n            \"courseId\": values.course,\n            \"currentYear\": values.yearofstudy\n        }\n    };\n\n    let createSchoolConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/school',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data: {\n            \"name\": values.fullname,\n        }\n    };\n\n    let createCourseConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/course',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data: {\n            \"name\": values.fullname,\n        }\n    };\n\n\n    // if schoolId is user created, then create a new school in the system\n\n    if (values.course !== \"userCreated\" && values.school !== \"userCreated\") {\n        axios(createUserConfig)\n            .then(function (response) {\n                console.log(\"post is successful\");\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n}\n\n\nasync function logIn(values, dispatch) {\n    const { emailaddress, password } = values;\n    const data = await authApi.logIn(emailaddress, password);\n    const { name, currentYear, courseId, _id } = data;\n    const user: User = {\n        fullName: name,\n        yearOfStudy: currentYear,\n        studyCourse: courseId,\n        _id\n    }\n\n    window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n    window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n\n    dispatch({\n        type: LOG_USER_IN,\n        payload: user\n    });\n}\n\nexport default {\n    signUp,\n    logIn\n}"]},"metadata":{},"sourceType":"module"}