{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\nconst reviewBaseUrl = \"http://localhost:8080/api/review\";\nconst ratingBaseUrl = \"http://localhost:8080/api/rating\";\n\nconst getReviewsOfModule = async modId => {\n  const response = await axios.get(`${reviewBaseUrl}/mod/${modId}`);\n  return response.data;\n};\n\nconst getReviewsOfUser = async userId => {\n  const response = await axios.get(`${reviewBaseUrl}/user/${userId}`, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\nconst addReviewOfModule = async (review, modId, userId) => {\n  const {\n    text,\n    semesterTaken,\n    acadYearTaken\n  } = review;\n  const response = await axios.post(reviewBaseUrl, {\n    text,\n    modId,\n    userId,\n    semesterTaken,\n    acadYearTaken // workload,\n\n  }, {\n    withCredentials: true\n  });\n  return response.status;\n};\n\nconst updateReviewOfModule = async (review, modId, userId, reviewId) => {\n  const {\n    text,\n    semesterTaken,\n    acadYearTaken\n  } = review;\n  const response = await axios.put(`${reviewBaseUrl}/${reviewId}`, {\n    text,\n    modId,\n    userId,\n    semesterTaken,\n    acadYearTaken // workload,\n\n  }, {\n    withCredentials: true\n  });\n  return response.status;\n};\n\nconst addRating = async (value, type, userId, subId, sub) => {\n  const response = await axios.post(ratingBaseUrl, {\n    type,\n    userId,\n    subId,\n    value,\n    sub\n  }, {\n    withCredentials: true\n  });\n  return response.status;\n};\n\nconst getRating = async (subscriberType, userId, ratingType) => {\n  const query = queryString.stringify({\n    sub: subscriberType,\n    userId,\n    type: ratingType\n  });\n  const response = await axios.get(`${ratingBaseUrl}/?${query}`);\n  return response.data;\n};\n\nconst updateRating = async (value, type, userId, subId, sub, ratingId) => {\n  const response = await axios.put(`${ratingBaseUrl}/${ratingId}`, {\n    sub,\n    subId,\n    userId,\n    type,\n    value\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\nexport default {\n  getReviewsOfModule,\n  getReviewsOfUser,\n  addReviewOfModule,\n  addRating,\n  getRating,\n  updateRating,\n  updateReviewOfModule\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/api/review.ts"],"names":["axios","queryString","reviewBaseUrl","ratingBaseUrl","getReviewsOfModule","modId","response","get","data","getReviewsOfUser","userId","withCredentials","addReviewOfModule","review","text","semesterTaken","acadYearTaken","post","status","updateReviewOfModule","reviewId","put","addRating","value","type","subId","sub","getRating","subscriberType","ratingType","query","stringify","updateRating","ratingId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport queryString from \"query-string\";\n\nconst reviewBaseUrl = \"http://localhost:8080/api/review\";\nconst ratingBaseUrl = \"http://localhost:8080/api/rating\";\n\ninterface ReviewToSubmit {\n  text: string;\n  semesterTaken: number;\n  acadYearTaken: string;\n  // workload: number;\n}\n\nconst getReviewsOfModule = async (modId) => {\n  const response = await axios.get(`${reviewBaseUrl}/mod/${modId}`);\n  return response.data;\n};\n\nconst getReviewsOfUser = async (userId) => {\n  const response = await axios.get(`${reviewBaseUrl}/user/${userId}`, {\n    withCredentials: true,\n  });\n  return response.data;\n};\n\nconst addReviewOfModule = async (\n  review: ReviewToSubmit,\n  modId: string,\n  userId: string\n) => {\n  const { text, semesterTaken, acadYearTaken } = review;\n  const response = await axios.post(\n    reviewBaseUrl,\n    {\n      text,\n      modId,\n      userId,\n      semesterTaken,\n      acadYearTaken,\n      // workload,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n\n  return response.status;\n};\n\nconst updateReviewOfModule = async (\n  review: ReviewToSubmit,\n  modId: string,\n  userId: string,\n  reviewId: string\n) => {\n  const { text, semesterTaken, acadYearTaken } = review;\n  const response = await axios.put(\n    `${reviewBaseUrl}/${reviewId}`,\n    {\n      text,\n      modId,\n      userId,\n      semesterTaken,\n      acadYearTaken,\n      // workload,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n\n  return response.status;\n};\n\nconst addRating = async (\n  value: number,\n  type: \"difficulty\" | \"star\",\n  userId: string,\n  subId: string,\n  sub: \"mod\" | \"school\" | \"course\"\n) => {\n  const response = await axios.post(\n    ratingBaseUrl,\n    {\n      type,\n      userId,\n      subId,\n      value,\n      sub,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n\n  return response.status;\n};\n\nconst getRating = async (subscriberType, userId, ratingType) => {\n  const query = queryString.stringify({\n    sub: subscriberType,\n    userId,\n    type: ratingType,\n  });\n  const response = await axios.get(`${ratingBaseUrl}/?${query}`);\n  return response.data;\n};\n\nconst updateRating = async (\n  value: number,\n  type: \"difficulty\" | \"star\",\n  userId: string,\n  subId: string,\n  sub: \"mod\" | \"school\" | \"course\",\n  ratingId: string\n) => {\n  const response = await axios.put(\n    `${ratingBaseUrl}/${ratingId}`,\n    {\n      sub,\n      subId,\n      userId,\n      type,\n      value,\n    },\n    { withCredentials: true }\n  );\n  return response.data;\n};\n\nexport default {\n  getReviewsOfModule,\n  getReviewsOfUser,\n  addReviewOfModule,\n  addRating,\n  getRating,\n  updateRating,\n  updateReviewOfModule,\n};\n"]},"metadata":{},"sourceType":"module"}