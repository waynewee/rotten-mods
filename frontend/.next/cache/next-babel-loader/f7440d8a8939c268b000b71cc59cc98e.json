{"ast":null,"code":"var _jsxFileName = \"/Users/zhangxian/Desktop/RottenMods/frontend/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { wrapper } from \"../redux/store\";\nimport authService from \"../utils/authentication\";\nimport { updatePersonalBookmarks, updatePersonalReviews, updatedPersonalPlannedModules } from \"../utils/helpers\";\nimport schoolApi from \"../api/school\";\nimport { FETCH_SCHOOLS } from \"../redux/constants\";\nimport Head from \"next/head\";\nimport Modal from \"react-modal\";\nimport NavBar from \"../components/Navbar\";\n\nconst ReduxApp = ({\n  Component,\n  pageProps\n}) => {\n  Modal.setAppElement(\"#body\");\n  const dispatch = useDispatch();\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  useEffect(() => {\n    attemptLogin();\n    fetchAllSchools();\n    console.log(\"printing out the user\");\n    console.log(userId);\n  }, []); // Fetch all personal modules if user is logged in\n\n  useEffect(() => {\n    if (userId) {\n      updatePersonalBookmarks(userId);\n      updatePersonalReviews(userId);\n      updatedPersonalPlannedModules(userId);\n      console.log(\"information still stored in redux and logged in.\");\n    }\n  }, [userId]);\n  /**\n   *  Attempt login if login details are stored\n   */\n\n  const attemptLogin = () => {\n    const email = window.localStorage.getItem(\"ROTTENMODS_EMAIL\");\n    const password = window.localStorage.getItem(\"ROTTENMODS_PASSWORD\");\n\n    if (email && password) {\n      authService.logIn({\n        emailaddress: email,\n        password\n      });\n    }\n  };\n  /**\n   * Fetch all available schools\n   */\n\n\n  const fetchAllSchools = async () => {\n    const schools = await schoolApi.searchSchools(\"\");\n    dispatch({\n      type: FETCH_SCHOOLS,\n      payload: schools\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"RottenMods\")), __jsx(\"div\", {\n    id: \"body\",\n    style: styles.layout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })))));\n};\n\nconst styles = {\n  layout: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  container: {\n    padding: \"0px 80px 80px 80px\",\n    width: \"100vw\",\n    maxWidth: 1280,\n    overflowX: \"hidden\"\n  }\n};\nexport default wrapper.withRedux(ReduxApp);","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/pages/_app.tsx"],"names":["useEffect","useDispatch","useSelector","wrapper","authService","updatePersonalBookmarks","updatePersonalReviews","updatedPersonalPlannedModules","schoolApi","FETCH_SCHOOLS","Head","Modal","NavBar","ReduxApp","Component","pageProps","setAppElement","dispatch","userId","state","auth","user","_id","attemptLogin","fetchAllSchools","console","log","email","window","localStorage","getItem","password","logIn","emailaddress","schools","searchSchools","type","payload","styles","layout","container","display","flexDirection","alignContent","alignItems","justifyContent","padding","width","maxWidth","overflowX","withRedux"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SACEC,uBADF,EAEEC,qBAFF,EAGEC,6BAHF,QAIO,kBAJP;AAKA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,QAA4B,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA8B;AACjEJ,EAAAA,KAAK,CAACK,aAAN,CAAoB,OAApB;AAEA,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AACA,QAAMiB,MAAM,GAAGhB,WAAW,CAAEiB,KAAD;AAAA;;AAAA,+BAAWA,KAAK,CAACC,IAAN,CAAWC,IAAtB,qDAAW,iBAAiBC,GAA5B;AAAA,GAAD,CAA1B;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,YAAY;AACZC,IAAAA,eAAe;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACD,GALQ,EAKN,EALM,CAAT,CANiE,CAajE;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,MAAJ,EAAY;AACVb,MAAAA,uBAAuB,CAACa,MAAD,CAAvB;AACAZ,MAAAA,qBAAqB,CAACY,MAAD,CAArB;AACAX,MAAAA,6BAA6B,CAACW,MAAD,CAA7B;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AAED;AACF,GARQ,EAQN,CAACR,MAAD,CARM,CAAT;AAUA;;;;AAGA,QAAMK,YAAY,GAAG,MAAM;AACzB,UAAMI,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,kBAA5B,CAAd;AACA,UAAMC,QAAQ,GAAGH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,qBAA5B,CAAjB;;AAEA,QAAIH,KAAK,IAAII,QAAb,EAAuB;AACrB3B,MAAAA,WAAW,CAAC4B,KAAZ,CAAkB;AAChBC,QAAAA,YAAY,EAAEN,KADE;AAEhBI,QAAAA;AAFgB,OAAlB;AAID;AACF,GAVD;AAYA;;;;;AAGA,QAAMP,eAAe,GAAG,YAAY;AAClC,UAAMU,OAAO,GAAG,MAAM1B,SAAS,CAAC2B,aAAV,CAAwB,EAAxB,CAAtB;AACAlB,IAAAA,QAAQ,CAAC;AACPmB,MAAAA,IAAI,EAAE3B,aADC;AAEP4B,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAND;;AAQA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,EAIE;AAAK,IAAA,EAAE,EAAC,MAAR;AAAe,IAAA,KAAK,EAAEI,MAAM,CAACC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,KAAK,EAAED,MAAM,CAACE,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAezB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF,CAJF,CADF;AAaD,CA/DD;;AAiEA,MAAMuB,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE;AACNE,IAAAA,OAAO,EAAE,MADH;AAENC,IAAAA,aAAa,EAAE,QAFT;AAGNC,IAAAA,YAAY,EAAE,QAHR;AAINC,IAAAA,UAAU,EAAE,QAJN;AAKNC,IAAAA,cAAc,EAAE;AALV,GADK;AAQbL,EAAAA,SAAS,EAAE;AACTM,IAAAA,OAAO,EAAE,oBADA;AAETC,IAAAA,KAAK,EAAE,OAFE;AAGTC,IAAAA,QAAQ,EAAE,IAHD;AAITC,IAAAA,SAAS,EAAE;AAJF;AARE,CAAf;AAgBA,eAAe9C,OAAO,CAAC+C,SAAR,CAAkBrC,QAAlB,CAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport type { AppProps } from \"next/app\";\nimport { wrapper } from \"../redux/store\";\nimport authService from \"../utils/authentication\";\nimport {\n  updatePersonalBookmarks,\n  updatePersonalReviews,\n  updatedPersonalPlannedModules,\n} from \"../utils/helpers\";\nimport schoolApi from \"../api/school\";\nimport { FETCH_SCHOOLS } from \"../redux/constants\";\n\nimport Head from \"next/head\";\nimport Modal from \"react-modal\";\nimport NavBar from \"../components/Navbar\";\n\nconst ReduxApp: React.FC<AppProps> = ({ Component, pageProps }) => {\n  Modal.setAppElement(\"#body\");\n\n  const dispatch = useDispatch();\n  const userId = useSelector((state) => state.auth.user?._id);\n\n  useEffect(() => {\n    attemptLogin();\n    fetchAllSchools();\n    console.log(\"printing out the user\")\n    console.log(userId);\n  }, []);\n\n  // Fetch all personal modules if user is logged in\n  useEffect(() => {\n    if (userId) {\n      updatePersonalBookmarks(userId);\n      updatePersonalReviews(userId);\n      updatedPersonalPlannedModules(userId);\n      console.log(\"information still stored in redux and logged in.\")\n\n    }\n  }, [userId]);\n\n  /**\n   *  Attempt login if login details are stored\n   */\n  const attemptLogin = () => {\n    const email = window.localStorage.getItem(\"ROTTENMODS_EMAIL\");\n    const password = window.localStorage.getItem(\"ROTTENMODS_PASSWORD\");\n\n    if (email && password) {\n      authService.logIn({\n        emailaddress: email,\n        password,\n      });\n    }\n  };\n\n  /**\n   * Fetch all available schools\n   */\n  const fetchAllSchools = async () => {\n    const schools = await schoolApi.searchSchools(\"\");\n    dispatch({\n      type: FETCH_SCHOOLS,\n      payload: schools,\n    });\n  };\n\n  return (\n    <>\n      <Head>\n        <title>RottenMods</title>\n      </Head>\n      <div id=\"body\" style={styles.layout}>\n        <div style={styles.container}>\n          <NavBar />\n          <Component {...pageProps} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst styles = {\n  layout: {\n    display: \"flex\",\n    flexDirection: \"column\" as \"column\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  container: {\n    padding: \"0px 80px 80px 80px\",\n    width: \"100vw\",\n    maxWidth: 1280,\n    overflowX: \"hidden\" as \"hidden\",\n  },\n};\n\nexport default wrapper.withRedux(ReduxApp);\n"]},"metadata":{},"sourceType":"module"}