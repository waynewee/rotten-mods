{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_MODULE_FOR_COMPARISON, DELETE_MODULE_FOR_COMPARISON, FIRST, SECOND } from \"../constants\";\nconst initialState = {\n  firstModuleId: \"\",\n  firstModuleCode: \"\",\n  secondModuleId: \"\",\n  secondModuleCode: \"\"\n};\n\nconst compareReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MODULE_FOR_COMPARISON:\n      const {\n        id,\n        code\n      } = action.payload; // if modules to compare are the same, return state\n\n      if (state.firstModuleId == id) {\n        return state;\n      }\n\n      if (!state.firstModuleId) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          firstModuleId: id,\n          firstModuleCode: code\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        secondModuleId: id,\n        secondModuleCode: code\n      });\n\n    case DELETE_MODULE_FOR_COMPARISON:\n      if (action.payload == FIRST) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          firstModuleId: \"\",\n          firstModuleCode: \"\"\n        });\n      } else if (action.payload == SECOND) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          secondModuleId: \"\",\n          secondModuleCode: \"\"\n        });\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default compareReducer;","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/redux/reducers/compareReducer.ts"],"names":["ADD_MODULE_FOR_COMPARISON","DELETE_MODULE_FOR_COMPARISON","FIRST","SECOND","initialState","firstModuleId","firstModuleCode","secondModuleId","secondModuleCode","compareReducer","state","action","type","id","code","payload"],"mappings":";;;;;;AACA,SACEA,yBADF,EAEEC,4BAFF,EAGEC,KAHF,EAIEC,MAJF,QAKO,cALP;AAQA,MAAMC,YAAgC,GAAG;AACvCC,EAAAA,aAAa,EAAE,EADwB;AAEvCC,EAAAA,eAAe,EAAE,EAFsB;AAGvCC,EAAAA,cAAc,EAAE,EAHuB;AAIvCC,EAAAA,gBAAgB,EAAE;AAJqB,CAAzC;;AAOA,MAAMC,cAAc,GAAG,CACrBC,KAAyB,GAAGN,YADP,EAErBO,MAFqB,KAGlB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,yBAAL;AACE,YAAM;AAAEa,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAeH,MAAM,CAACI,OAA5B,CADF,CAGE;;AACA,UAAIL,KAAK,CAACL,aAAN,IAAuBQ,EAA3B,EAA+B;AAC7B,eAAOH,KAAP;AACD;;AAED,UAAI,CAACA,KAAK,CAACL,aAAX,EAA0B;AACxB,+CAAYK,KAAZ;AAAmBL,UAAAA,aAAa,EAAEQ,EAAlC;AAAsCP,UAAAA,eAAe,EAAEQ;AAAvD;AACD;;AAED,6CAAYJ,KAAZ;AAAmBH,QAAAA,cAAc,EAAEM,EAAnC;AAAuCL,QAAAA,gBAAgB,EAAEM;AAAzD;;AACF,SAAKb,4BAAL;AACE,UAAIU,MAAM,CAACI,OAAP,IAAkBb,KAAtB,EAA6B;AAC3B,+CAAYQ,KAAZ;AAAmBL,UAAAA,aAAa,EAAE,EAAlC;AAAsCC,UAAAA,eAAe,EAAE;AAAvD;AACD,OAFD,MAEO,IAAIK,MAAM,CAACI,OAAP,IAAkBZ,MAAtB,EAA8B;AACnC,+CAAYO,KAAZ;AAAmBH,UAAAA,cAAc,EAAE,EAAnC;AAAuCC,UAAAA,gBAAgB,EAAE;AAAzD;AACD,OAFM,MAEA;AACL,eAAOE,KAAP;AACD;;AACH;AACE,aAAOA,KAAP;AAvBJ;AAyBD,CA7BD;;AA+BA,eAAeD,cAAf","sourcesContent":["import { AnyAction } from \"redux\";\nimport {\n  ADD_MODULE_FOR_COMPARISON,\n  DELETE_MODULE_FOR_COMPARISON,\n  FIRST,\n  SECOND,\n} from \"../constants\";\nimport { ModuleCompareState } from \"../types\";\n\nconst initialState: ModuleCompareState = {\n  firstModuleId: \"\",\n  firstModuleCode: \"\",\n  secondModuleId: \"\",\n  secondModuleCode: \"\",\n};\n\nconst compareReducer = (\n  state: ModuleCompareState = initialState,\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case ADD_MODULE_FOR_COMPARISON:\n      const { id, code } = action.payload;\n\n      // if modules to compare are the same, return state\n      if (state.firstModuleId == id) {\n        return state;\n      }\n\n      if (!state.firstModuleId) {\n        return { ...state, firstModuleId: id, firstModuleCode: code };\n      }\n\n      return { ...state, secondModuleId: id, secondModuleCode: code };\n    case DELETE_MODULE_FOR_COMPARISON:\n      if (action.payload == FIRST) {\n        return { ...state, firstModuleId: \"\", firstModuleCode: \"\" };\n      } else if (action.payload == SECOND) {\n        return { ...state, secondModuleId: \"\", secondModuleCode: \"\" };\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n};\n\nexport default compareReducer;\n"]},"metadata":{},"sourceType":"module"}