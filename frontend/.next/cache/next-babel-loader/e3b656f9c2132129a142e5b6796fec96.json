{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { wrapper } from \"../redux/store\";\nimport authService from \"../utils/authentication\";\nimport { updatePersonalBookmarks, updatePersonalReviews, updatedPersonalPlannedModules } from \"../utils/helpers\";\nimport schoolApi from \"../api/school\";\nimport { FETCH_SCHOOLS } from \"../redux/constants\";\nimport Head from \"next/head\";\nimport Modal from \"react-modal\";\nimport NavBar from \"../components/Navbar\";\n\nconst ReduxApp = ({\n  Component,\n  pageProps\n}) => {\n  Modal.setAppElement(\"#body\");\n  const dispatch = useDispatch();\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  useEffect(() => {\n    attemptLogin();\n    fetchAllSchools();\n  }, []); // Fetch all personal modules if user is logged in\n\n  useEffect(() => {\n    if (userId) {\n      updatePersonalBookmarks(userId);\n      updatePersonalReviews(userId);\n      updatedPersonalPlannedModules(userId);\n    }\n  }, [userId]);\n  /**\n   *  Attempt login if login details are stored\n   */\n\n  const attemptLogin = () => {\n    const email = window.localStorage.getItem(\"ROTTENMODS_EMAIL\");\n    const password = window.localStorage.getItem(\"ROTTENMODS_PASSWORD\");\n\n    if (email && password) {\n      authService.logIn({\n        emailaddress: email,\n        password\n      });\n    }\n  };\n  /**\n   * Fetch all available schools\n   */\n\n\n  const fetchAllSchools = async () => {\n    const schools = await schoolApi.searchSchools(\"\");\n    dispatch({\n      type: FETCH_SCHOOLS,\n      payload: schools\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"RottenMods\")), __jsx(\"div\", {\n    id: \"body\",\n    style: styles.layout\n  }, __jsx(\"div\", {\n    style: styles.container\n  }, __jsx(NavBar, null), __jsx(Component, pageProps))));\n};\n\nconst styles = {\n  layout: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  container: {\n    padding: \"0px 80px 80px 80px\",\n    width: \"100vw\",\n    maxWidth: 1280,\n    overflowX: \"hidden\"\n  }\n};\nexport default wrapper.withRedux(ReduxApp);","map":null,"metadata":{},"sourceType":"module"}