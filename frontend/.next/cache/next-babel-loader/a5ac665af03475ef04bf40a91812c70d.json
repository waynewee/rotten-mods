{"ast":null,"code":"var _jsxFileName = \"/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/SignupModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { Modal, Button, Form, Input, Divider } from \"antd\";\nimport { UserOutlined, LockOutlined, MailOutlined } from \"@ant-design/icons\";\nimport { codeBlue } from \"../styles/colors\";\nimport axios from \"axios\";\nimport authService from \"../utils/authentication\";\nimport { message } from \"antd\";\n\nconst SignupModal = toggles => {\n  const {\n    0: inputUniversityValues,\n    1: setUniversityInputValues\n  } = useState([{\n    schoolId: \"\",\n    schoolName: \"\"\n  }]);\n  const {\n    0: inputCourses,\n    1: setInputCourses\n  } = useState([{\n    courseId: \"\",\n    courseName: \"\"\n  }]);\n  const {\n    0: newSchoolName,\n    1: setSchoolName\n  } = useState(\"\");\n  const {\n    0: newCourseName,\n    1: setCourseName\n  } = useState(\"\");\n  useEffect(() => {\n    populateSchools();\n    populateCourses();\n  }, []);\n\n  const populateSchools = () => {\n    axios({\n      method: \"get\",\n      url: \"/school\",\n      baseURL: \"http://localhost:8080/api\"\n    }).then(function (response) {\n      const schoolsInDatabase = response.data.map(obj => {\n        const universityValue = {\n          schoolId: \"\",\n          schoolName: \"\"\n        };\n        universityValue.schoolId = obj._id;\n        universityValue.schoolName = obj.name;\n        return universityValue;\n      });\n      setUniversityInputValues(schoolsInDatabase);\n      console.log(\"Now uni has these values\");\n    }).then(function (error) {\n      console.log(error);\n    });\n  };\n\n  const populateCourses = () => {\n    axios({\n      method: \"get\",\n      url: \"/course\",\n      baseURL: \"http://localhost:8080/api\"\n    }).then(function (response) {\n      const coursesInDatabase = response.data.map(obj => {\n        const course = {\n          courseId: \"\",\n          courseName: \"\"\n        };\n        course.courseId = obj._id;\n        course.courseName = obj.name;\n        return course;\n      });\n      setInputCourses(coursesInDatabase);\n    }).then(function (error) {\n      console.log(error);\n    });\n  };\n\n  const onFormFinish = signUpValues => {\n    authService.signUp(signUpValues).then(function (response) {\n      message.success(\"Successfully Signed Up\");\n      toggles.toggles.switchModals();\n    }).catch(error => {\n      message.error(\"This user has already been created. Do you mean to sign in?\");\n    });\n  };\n\n  const onUniversityChange = event => {\n    setSchoolName(event.target.value);\n  };\n\n  const onCourseChange = event => {\n    setCourseName(event.target.value);\n  }; // const addUniversityItem = () => {\n  //   setSchoolName(\"\");\n  //   if (\n  //     newSchoolName.trim() !== \"\" &&\n  //     !inputUniversityValues.some((e) => e.schoolName === newSchoolName)\n  //   ) {\n  //     console.log(\"adduniItem\");\n  //     setUniversityInputValues([\n  //       ...inputUniversityValues,\n  //       { schoolId: \"userCreated\", schoolName: newSchoolName },\n  //     ]);\n  //   }\n  // };\n  // const addCourseItem = () => {\n  //   console.log(\"adduniItem\");\n  //   setCourseName(\"\");\n  //   if (\n  //     newCourseName.trim() !== \"\" &&\n  //     !inputCourses.some((e) => e.courseName === newCourseName)\n  //   ) {\n  //     setInputCourses([\n  //       ...inputCourses,\n  //       { courseId: \"userCreated\", courseName: newCourseName },\n  //     ]);\n  //   }\n  // };\n\n\n  const validateEmail = email => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.+-]+\\.edu$/;\n    return regex.test(email);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    visible: true,\n    title: __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 16\n      }\n    }, \" SIGNUP \"),\n    centered: true,\n    onCancel: toggles.toggles.toggleSignupModal,\n    footer: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    name: \"normal_signup\",\n    className: \"signup-form\",\n    initialValues: {},\n    onFinish: onFormFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"fullname\",\n    rules: [{\n      required: true,\n      message: \"Please enter your full name!\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    prefix: __jsx(UserOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 28\n      }\n    }),\n    placeholder: \"Full Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"emailaddress\",\n    rules: [{\n      required: true,\n      message: \"Please enter an email address!\"\n    }, {\n      validator: (_, value) => {\n        if (!validateEmail(value)) {\n          return Promise.reject(\"Only .edu email address are allowed to sign up\");\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    prefix: __jsx(MailOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 28\n      }\n    }),\n    placeholder: \"Email Address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"userpassword\",\n    rules: [{\n      required: true,\n      message: \"Please enter a password!\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    prefix: __jsx(LockOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 23\n      }\n    }),\n    type: \"password\",\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: styles.loginFormButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"SIGN UP\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, \"Already have an account? Log in\", \" \", __jsx(\"a\", {\n    onClick: () => toggles.toggles.switchModals(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, \" here\"))));\n};\n\nconst styles = {\n  loginFormButton: {\n    width: \"100%\",\n    backgroundColor: codeBlue\n  }\n};\nexport default SignupModal;","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/SignupModal.tsx"],"names":["useState","useEffect","Modal","Button","Form","Input","Divider","UserOutlined","LockOutlined","MailOutlined","codeBlue","axios","authService","message","SignupModal","toggles","inputUniversityValues","setUniversityInputValues","schoolId","schoolName","inputCourses","setInputCourses","courseId","courseName","newSchoolName","setSchoolName","newCourseName","setCourseName","populateSchools","populateCourses","method","url","baseURL","then","response","schoolsInDatabase","data","map","obj","universityValue","_id","name","console","log","error","coursesInDatabase","course","onFormFinish","signUpValues","signUp","success","switchModals","catch","onUniversityChange","event","target","value","onCourseChange","validateEmail","email","regex","test","textAlign","toggleSignupModal","required","validator","_","Promise","reject","resolve","styles","loginFormButton","width","backgroundColor"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { Modal, Button, Form, Input, Divider, Select, DatePicker } from \"antd\";\nimport {\n  UserOutlined,\n  LockOutlined,\n  MailOutlined,\n  LaptopOutlined,\n  CalendarOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport { codeBlue } from \"../styles/colors\";\n\nimport axios from \"axios\";\nimport authService from \"../utils/authentication\";\n\nimport { message } from \"antd\";\n\ninterface SignupModalProps {\n  toggles: {\n    toggleSignupModal: () => void;\n    switchModals: () => void;\n  };\n}\n\nconst SignupModal: React.FC<SignupModalProps> = (toggles) => {\n  const [inputUniversityValues, setUniversityInputValues] = useState([\n    { schoolId: \"\", schoolName: \"\" },\n  ]);\n  const [inputCourses, setInputCourses] = useState([\n    { courseId: \"\", courseName: \"\" },\n  ]);\n  const [newSchoolName, setSchoolName] = useState(\"\");\n  const [newCourseName, setCourseName] = useState(\"\");\n\n  useEffect(() => {\n    populateSchools();\n    populateCourses();\n  }, []);\n\n  const populateSchools = () => {\n    axios({\n      method: \"get\",\n      url: \"/school\",\n      baseURL: \"http://localhost:8080/api\",\n    })\n      .then(function (response) {\n        const schoolsInDatabase = response.data.map((obj) => {\n          const universityValue = { schoolId: \"\", schoolName: \"\" };\n          universityValue.schoolId = obj._id;\n          universityValue.schoolName = obj.name;\n          return universityValue;\n        });\n        setUniversityInputValues(schoolsInDatabase);\n        console.log(\"Now uni has these values\");\n      })\n      .then(function (error) {\n        console.log(error);\n      });\n  };\n\n  const populateCourses = () => {\n    axios({\n      method: \"get\",\n      url: \"/course\",\n      baseURL: \"http://localhost:8080/api\",\n    })\n      .then(function (response) {\n        const coursesInDatabase = response.data.map((obj) => {\n          const course = { courseId: \"\", courseName: \"\" };\n          course.courseId = obj._id;\n          course.courseName = obj.name;\n          return course;\n        });\n        setInputCourses(coursesInDatabase);\n      })\n      .then(function (error) {\n        console.log(error);\n      });\n  };\n\n  const onFormFinish = (signUpValues) => {\n    authService\n      .signUp(signUpValues)\n      .then(function (response) {\n        message.success(\"Successfully Signed Up\");\n        toggles.toggles.switchModals();\n      })\n      .catch((error) => {\n        message.error(\n          \"This user has already been created. Do you mean to sign in?\"\n        );\n      });\n  };\n\n  const onUniversityChange = (event) => {\n    setSchoolName(event.target.value);\n  };\n\n  const onCourseChange = (event) => {\n    setCourseName(event.target.value);\n  };\n\n  // const addUniversityItem = () => {\n  //   setSchoolName(\"\");\n  //   if (\n  //     newSchoolName.trim() !== \"\" &&\n  //     !inputUniversityValues.some((e) => e.schoolName === newSchoolName)\n  //   ) {\n  //     console.log(\"adduniItem\");\n  //     setUniversityInputValues([\n  //       ...inputUniversityValues,\n  //       { schoolId: \"userCreated\", schoolName: newSchoolName },\n  //     ]);\n  //   }\n  // };\n\n  // const addCourseItem = () => {\n  //   console.log(\"adduniItem\");\n  //   setCourseName(\"\");\n  //   if (\n  //     newCourseName.trim() !== \"\" &&\n  //     !inputCourses.some((e) => e.courseName === newCourseName)\n  //   ) {\n  //     setInputCourses([\n  //       ...inputCourses,\n  //       { courseId: \"userCreated\", courseName: newCourseName },\n  //     ]);\n  //   }\n  // };\n\n  const validateEmail = (email: string): boolean => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.+-]+\\.edu$/;\n\n    return regex.test(email);\n  };\n\n  return (\n    <>\n      <Modal\n        visible={true}\n        title={<div style={{ textAlign: \"center\" }}> SIGNUP </div>}\n        centered\n        onCancel={toggles.toggles.toggleSignupModal}\n        footer={null}\n      >\n        <Form\n          name=\"normal_signup\"\n          className=\"signup-form\"\n          initialValues={{}}\n          onFinish={onFormFinish}\n        >\n          <Form.Item\n            name=\"fullname\"\n            rules={[\n              { required: true, message: \"Please enter your full name!\" },\n            ]}\n          >\n            <Input prefix={<UserOutlined />} placeholder=\"Full Name\" />\n          </Form.Item>\n          <Form.Item\n            name=\"emailaddress\"\n            rules={[\n              { required: true, message: \"Please enter an email address!\" },\n              {\n                validator: (_, value) => {\n                  if (!validateEmail(value)) {\n                    return Promise.reject(\n                      \"Only .edu email address are allowed to sign up\"\n                    );\n                  } else {\n                    return Promise.resolve();\n                  }\n                },\n              },\n            ]}\n          >\n            <Input prefix={<MailOutlined />} placeholder=\"Email Address\" />\n          </Form.Item>\n          <Form.Item\n            name=\"userpassword\"\n            rules={[{ required: true, message: \"Please enter a password!\" }]}\n          >\n            <Input\n              prefix={<LockOutlined />}\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={styles.loginFormButton}\n            >\n              SIGN UP\n            </Button>\n          </Form.Item>\n        </Form>\n        <Divider />\n        <div style={{ textAlign: \"center\" }}>\n          Already have an account? Log in{\" \"}\n          <a onClick={() => toggles.toggles.switchModals()}> here</a>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nconst styles = {\n  loginFormButton: {\n    width: \"100%\",\n    backgroundColor: codeBlue,\n  },\n};\n\nexport default SignupModal;\n"]},"metadata":{},"sourceType":"module"}