{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Modal, Button, Form, Input, Select } from \"antd\";\nimport { useState, useEffect } from \"react\";\nimport authService from \"../utils/authentication\";\nimport { message } from \"antd\";\nimport userApi from \"../api/user\";\nimport schoolApi from \"../api/school\";\nimport courseApi from \"../api/course\";\nimport { useRouter } from \"next/router\";\n\nconst EditProfileModal = ({\n  user,\n  toggleEditProfileModal\n}) => {\n  const {\n    0: inputSchoolValues,\n    1: setSchoolInputValues\n  } = useState([{\n    schoolId: \"\",\n    schoolName: \"\"\n  }]);\n  const {\n    0: inputCourseValues,\n    1: setInputCourseValues\n  } = useState([{\n    courseId: \"\",\n    courseName: \"\"\n  }]);\n  useEffect(() => {\n    populateSchools();\n    populateCourses();\n  }, []);\n\n  const populateSchools = () => {\n    schoolApi.getAllSchools().then(response => {\n      const schoolsInDatabase = response.map(obj => {\n        const universityValue = {\n          schoolId: \"\",\n          schoolName: \"\"\n        };\n        universityValue.schoolId = obj._id;\n        universityValue.schoolName = obj.name;\n        return universityValue;\n      });\n      setSchoolInputValues(schoolsInDatabase);\n    }).catch(error => console.log(error));\n  };\n\n  const populateCourses = () => {\n    courseApi.getAllCourses().then(response => {\n      const coursesInDatabase = response.map(obj => {\n        const course = {\n          courseId: \"\",\n          courseName: \"\"\n        };\n        course.courseId = obj._id;\n        course.courseName = obj.name;\n        return course;\n      });\n      setInputCourseValues(coursesInDatabase);\n    }).catch(error => console.log(error));\n  };\n\n  const router = useRouter();\n\n  const onFormFinish = profileValues => {\n    console.log(\"profile valus are\");\n    console.log(profileValues);\n    const newUserDetails = {\n      \"name\": profileValues.fullname,\n      \"email\": user.email,\n      \"password\": user.password,\n      \"currentYear\": profileValues.newYearOfStudy\n    };\n\n    if (profileValues.newSchoolName) {\n      const newSchoolId = inputSchoolValues.find(element => element.schoolName == profileValues.newSchoolName).schoolId;\n      newUserDetails[\"schoolId\"] = newSchoolId;\n    }\n\n    if (profileValues.newCourseName) {\n      const newCourseId = inputCourseValues.find(element => element.courseName == profileValues.newCourseName).courseId;\n      newUserDetails[\"courseId\"] = newCourseId;\n    }\n\n    userApi.updateUser(newUserDetails, user._id).then(response => {\n      toggleEditProfileModal();\n      authService.logIn({\n        \"emailaddress\": newUserDetails.email,\n        \"password\": newUserDetails.password\n      });\n      router.push({\n        pathname: \"/profile\"\n      });\n      message.success(`Your profile has been updated successfully`);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return __jsx(Modal, {\n    visible: true,\n    title: __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, \" EDIT PROFILE \"),\n    centered: true,\n    onCancel: toggleEditProfileModal,\n    footer: null\n  }, __jsx(Form, {\n    name: \"normal_login\",\n    className: \"login-form\",\n    initialValues: {},\n    onFinish: onFormFinish\n  }, __jsx(Form.Item, {\n    name: \"fullname\",\n    label: \"Full Name\",\n    initialValue: user.fullName,\n    rules: [{\n      required: true,\n      message: \"Please enter your full name!\"\n    }, {\n      validator: (_, value) => {\n        console.log(\"the value is\");\n        console.log(value);\n\n        if (value.length > 50) {\n          return Promise.reject(\"Your name has to be less than 50 characters. Time for a name change?\");\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }]\n  }, __jsx(Input, null)), __jsx(Form.Item, {\n    name: \"newYearOfStudy\",\n    label: \"Year of Study\",\n    initialValue: user.yearOfStudy,\n    rules: [{\n      validator: (_, value) => {\n        console.log(\"the value is\");\n        console.log(value);\n\n        if ((value < 1 || value > 8) && value) {\n          return Promise.reject(\"Your Year of Study should only be between 1 to 8\");\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }]\n  }, __jsx(Input, {\n    type: \"number\"\n  })), __jsx(Form.Item, {\n    name: \"newCourseName\",\n    label: \"Your Course\",\n    initialValue: user.courseName\n  }, __jsx(Select, null, inputCourseValues.map(item => __jsx(Select.Option, {\n    key: item.courseId,\n    value: item.courseName\n  }, item.courseName)))), __jsx(Form.Item, {\n    name: \"newSchoolName\",\n    label: \"Your University\",\n    initialValue: user.schoolName\n  }, __jsx(Select, null, inputSchoolValues.map(item => __jsx(Select.Option, {\n    key: item.schoolId,\n    value: item.schoolName\n  }, item.schoolName)))), __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: styles.loginFormButton\n  }, \"SAVE PROFILE\"))));\n};\n\nconst styles = {\n  loginFormButton: {\n    width: \"100%\",\n    backgroundColor: \"#2D538C\"\n  }\n};\nexport default EditProfileModal;","map":null,"metadata":{},"sourceType":"module"}