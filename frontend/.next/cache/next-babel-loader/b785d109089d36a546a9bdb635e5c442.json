{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport reviewApi from \"../api/review\";\nimport { fetchRatings } from \"../utils/helpers\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\nconst today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst yearShortform = currentYear % 2000; // eg. 2021 => 21\n\nconst currentSemester = currentMonth < 6 ? 2 : 1;\nconst currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nconst yearMinusOne = currentAYSecondYear - 1;\nconst initialReviewState = {\n  text: \"\",\n  ratingIds: [],\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: `${yearMinusOne}/${currentAYSecondYear}`\n};\n\nconst AddReviewModal = ({\n  code,\n  modId,\n  updateReviews,\n  updateModule,\n  isModalVisible,\n  setModalVisibility,\n  reviewByUser,\n  ratingsByUser\n}) => {\n  const initialReview = reviewByUser !== null && reviewByUser !== void 0 ? reviewByUser : initialReviewState;\n  const {\n    0: text,\n    1: setText\n  } = useState(initialReview.text);\n  const {\n    0: difficulty,\n    1: setDifficulty\n  } = useState(3);\n  const {\n    0: ratings,\n    1: setRatings\n  } = useState(3);\n  const {\n    0: semester,\n    1: setSemester\n  } = useState(initialReview.semesterTaken);\n  const {\n    0: year,\n    1: setYear\n  } = useState(initialReview.acadYearTaken);\n  const {\n    0: submitText,\n    1: setSubmitText\n  } = useState(\"Submit\");\n  const {\n    0: submitColor,\n    1: setSubmitColor\n  } = useState(submitBlue);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  useEffect(() => {\n    const ratingIds = reviewByUser === null || reviewByUser === void 0 ? void 0 : reviewByUser.ratingIds;\n\n    if ((ratingIds === null || ratingIds === void 0 ? void 0 : ratingIds.length) > 0) {\n      fetchRatings(ratingIds, setRatings, setDifficulty);\n    }\n  }, []);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    const requestBody = {\n      text,\n      semesterTaken: semester,\n      acadYearTaken: year,\n      modId,\n      userId,\n      ratings: [{\n        type: \"difficulty\",\n        value: difficulty\n      }, {\n        type: \"star\",\n        value: ratings\n      }]\n    };\n\n    if (reviewByUser) {\n      await reviewApi.updateReviewOfModule(requestBody, reviewByUser._id); // update ratings\n    } else {\n      await reviewApi.addReviewOfModule(requestBody); // add ratings\n      // await reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\", );\n      // await reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\", );\n    }\n\n    setModalVisibility(false);\n    updateReviews();\n    updateModule();\n  };\n\n  const validateForm = () => ratings !== 0 && difficulty !== 0 && text !== \"\";\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    backgroundColor: reviewBlue,\n    submitColor: submitColor,\n    title: `${reviewByUser ? \"Edit\" : \"Add\"} Review`,\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    onSubmit: onSubmit,\n    submitText: submitText\n  }, __jsx(FormModalItem, {\n    label: \"Module Code\",\n    type: \"text\",\n    value: code\n  }), __jsx(FormModalItem, {\n    label: \"Review\",\n    type: \"textarea\",\n    value: text,\n    setValue: setText\n  }), __jsx(FormModalItem, {\n    label: \"Year Taken\",\n    type: \"annualYear\",\n    value: year,\n    setValue: setYear\n  }), __jsx(FormModalItem, {\n    label: \"Semester Taken\",\n    type: \"semester\",\n    value: semester,\n    setValue: setSemester\n  }), __jsx(FormModalItem, {\n    label: \"Difficulty\",\n    type: \"difficulty\",\n    value: difficulty,\n    setValue: setDifficulty\n  }), __jsx(FormModalItem, {\n    label: \"Ratings\",\n    type: \"rate\",\n    value: ratings,\n    setValue: setRatings\n  }));\n};\n\nexport default AddReviewModal;","map":null,"metadata":{},"sourceType":"module"}