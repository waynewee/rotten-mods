{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport moduleApi from \"../api/module\";\nimport ModuleCompareModal from \"../components/ModuleCompareModal\";\nimport SectionTitle from \"../components/SectionTitle\";\nimport SearchModuleList from \"../components/SearchModuleList\";\nimport SeeMoreButton from \"../components/SeeMoreButton\";\nimport { descriptionGreen } from \"../styles/colors\";\nimport { AutoComplete, Checkbox, InputNumber } from \"antd\";\nconst SEARCH_INTERVAL = 5;\n\nconst Search = ({\n  initialSearchResults = []\n}) => {\n  const allSchools = useSelector(state => state.schools);\n  const schoolOfUser = useSelector(state => state.auth.user.schoolName);\n  const schoolsAutocompleteOptions = allSchools.map(school => ({\n    value: school.name\n  }));\n  const searchTerm = useSelector(state => state.search.searchTerm);\n  const {\n    0: searchResults,\n    1: setSearchResults\n  } = useState(initialSearchResults);\n  const {\n    0: numberOfResults,\n    1: setNumberOfResults\n  } = useState(SEARCH_INTERVAL + 1); // the presence of that n + 1th result is an indicator that there are more than 10 results\n\n  const {\n    0: schoolFilter,\n    1: setSchoolFilter\n  } = useState(schoolOfUser);\n  const {\n    0: schoolOptions,\n    1: setSchoolOptions\n  } = useState(schoolsAutocompleteOptions);\n  const {\n    0: semestersFilter,\n    1: setSemestersFilter\n  } = useState([]);\n  const {\n    0: creditsFilter,\n    1: setCreditsFilter\n  } = useState(\"\");\n  useEffect(() => {\n    setNumberOfResults(SEARCH_INTERVAL + 1);\n  }, [searchTerm, schoolFilter, semestersFilter, creditsFilter]);\n  useEffect(() => {\n    fetchSearchResults();\n  }, [schoolFilter, semestersFilter, creditsFilter]);\n  useEffect(() => {\n    setSchoolFilter(schoolOfUser);\n  }, [schoolOfUser]);\n  useEffect(() => {\n    setSearchResults(initialSearchResults);\n  }, [initialSearchResults]);\n\n  const fetchSearchResults = async () => {\n    var _allSchools$find;\n\n    const schoolNameFilter = (_allSchools$find = allSchools.find(school => school.name === schoolFilter)) === null || _allSchools$find === void 0 ? void 0 : _allSchools$find._id;\n    const results = await moduleApi.searchModule(searchTerm, numberOfResults, 1, schoolNameFilter, semestersFilter.join(\"_\"), creditsFilter);\n    setSearchResults(results);\n  };\n\n  const fetchMoreSearchResults = async () => {\n    const results = await moduleApi.searchModule(searchTerm, numberOfResults + SEARCH_INTERVAL);\n    console.log(results);\n    setSearchResults(results);\n    setNumberOfResults(numberOfResults + SEARCH_INTERVAL);\n  };\n\n  const semesterOptions = [{\n    label: 1,\n    value: 1\n  }, {\n    label: 2,\n    value: 2\n  }, {\n    label: 3,\n    value: 3\n  }];\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: styles.header\n  }, __jsx(\"span\", null, `Search results for \"${searchTerm}\"`), __jsx(\"div\", {\n    style: styles.filterBar\n  }, __jsx(\"div\", null, __jsx(\"span\", null, \"School:\"), __jsx(AutoComplete, {\n    style: styles.autocomplete,\n    onSelect: setSchoolFilter,\n    options: schoolOptions,\n    value: schoolFilter,\n    onSearch: searchText => setSchoolOptions(schoolsAutocompleteOptions.filter(school => school.value.toLowerCase().includes(searchText.toLowerCase()))),\n    onChange: value => setSchoolFilter(value),\n    notFoundContent: \"The school you are looking for isn't here. Perhaps you can add them to the app!\"\n  })), __jsx(\"div\", {\n    style: {\n      display: \"flex\"\n    }\n  }, __jsx(\"span\", null, \"Semester:\"), __jsx(\"div\", {\n    style: styles.checkboxes\n  }, __jsx(Checkbox.Group, {\n    options: semesterOptions,\n    onChange: setSemestersFilter\n  }))), __jsx(\"div\", null, __jsx(\"span\", null, \"Credits:\"), __jsx(InputNumber, {\n    max: 12,\n    onChange: value => setCreditsFilter(value),\n    style: styles.creditsInput\n  })))), __jsx(SearchModuleList, {\n    modules: searchResults.slice(0, numberOfResults - 1)\n  }), searchResults.length == numberOfResults && __jsx(SeeMoreButton, {\n    fetchMoreData: fetchMoreSearchResults,\n    style: {\n      backgroundColor: descriptionGreen\n    }\n  }), __jsx(SectionTitle, {\n    title: `Similar results to \"${searchTerm}\"`\n  }), __jsx(SearchModuleList, {\n    modules: []\n  }), __jsx(ModuleCompareModal, null));\n};\n\nconst styles = {\n  header: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    height: \"8vh\",\n    fontSize: \"1.5em\",\n    color: \"#838383\",\n    fontFamily: \"Mukta\",\n    paddingLeft: 20,\n    margin: \"20px 0px\"\n  },\n  filterBar: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    fontSize: 15,\n    alignItems: \"center\"\n  },\n  autocomplete: {\n    width: 300,\n    margin: \"0px 10px\",\n    position: \"relative\" // bottom: 2,\n\n  },\n  checkboxes: {\n    margin: \"0px 10px\",\n    position: \"relative\" // bottom: 2,\n\n  },\n  creditsInput: {\n    marginLeft: 10,\n    position: \"relative\" // bottom: 2,\n\n  }\n};\n\nSearch.getInitialProps = async ({\n  query\n}) => {\n  const searchTerm = query.s;\n\n  try {\n    const initialSearchResults = await moduleApi.searchModule(searchTerm, SEARCH_INTERVAL + 1);\n    return {\n      initialSearchResults\n    };\n  } catch (err) {\n    return {\n      initialSearchResults: []\n    };\n  }\n};\n\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}