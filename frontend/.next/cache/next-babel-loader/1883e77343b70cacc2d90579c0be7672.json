{"ast":null,"code":"import { logInAction, logOutAction } from './../redux/actions/auth';\nimport authApi from \"../api/auth\";\nimport courseApi from \"../api/course\";\nimport schoolApi from \"../api/school\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\n\nasync function signUp(values) {\n  const {\n    fullname,\n    emailaddress,\n    userpassword,\n    university,\n    course,\n    yearofstudy\n  } = values; // let createUserConfig = {\n  //     method: 'post',\n  //     url: 'http://localhost:8080/api/user',\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     },\n  //     data: {\n  //         \"name\": values.fullname,\n  //         \"email\": values.emailaddress,\n  //         \"password\": values.userpassword,\n  //         \"schoolId\": values.university,\n  //         \"courseId\": values.course,\n  //         \"currentYear\": values.yearofstudy\n  //     }\n  // };\n  // let createSchoolConfig = {\n  //     method: 'post',\n  //     url: 'http://localhost:8080/api/school',\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     },\n  //     data: {\n  //         \"name\": values.fullname,\n  //     }\n  // };\n  // let createCourseConfig = {\n  //     method: 'post',\n  //     url: 'http://localhost:8080/api/course',\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     },\n  //     data: {\n  //         \"name\": values.fullname,\n  //     }\n  // };\n  // if schoolId is user created, then create a new school in the system\n\n  if (course !== \"userCreated\" && university !== \"userCreated\") {\n    const data = await authApi.signUp(fullname, emailaddress, userpassword).catch(error => {\n      throw error;\n    });\n\n    if (data) {\n      console.log(\"sign up success\");\n    }\n  }\n}\n\nasync function logIn(values) {\n  const {\n    emailaddress,\n    password\n  } = values;\n  const data = await authApi.logIn(emailaddress, password).catch(error => {\n    throw error;\n  });\n\n  if (data) {\n    const {\n      name,\n      currentYear,\n      courseId,\n      _id,\n      schoolId,\n      password\n    } = data;\n    let courseData = null;\n    let schoolData = null;\n\n    if (courseId) {\n      courseData = await courseApi.getCourse(courseId);\n    }\n\n    if (schoolId) {\n      schoolData = await schoolApi.getSchool(schoolId);\n    }\n\n    const user = {\n      fullName: name,\n      email: emailaddress,\n      password: password,\n      yearOfStudy: currentYear ? currentYear : null,\n      courseName: courseData ? courseData.name : null,\n      schoolName: schoolData ? schoolData.name : null,\n      _id\n    };\n    window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n    window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n    store.dispatch(logInAction(user));\n  }\n}\n\nasync function logOut() {\n  const response = await authApi.logOut().catch(error => {\n    throw error;\n  });\n  window.localStorage.removeItem(\"ROTTENMODS_EMAIL\");\n  window.localStorage.removeItem(\"ROTTENMODS_PASSWORD\");\n  message.success(\"Successfully Logged Out!\");\n  store.dispatch(logOutAction());\n}\n\n;\nexport default {\n  signUp,\n  logIn,\n  logOut\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/utils/authentication.ts"],"names":["logInAction","logOutAction","authApi","courseApi","schoolApi","store","message","signUp","values","fullname","emailaddress","userpassword","university","course","yearofstudy","data","catch","error","console","log","logIn","password","name","currentYear","courseId","_id","schoolId","courseData","schoolData","getCourse","getSchool","user","fullName","email","yearOfStudy","courseName","schoolName","window","localStorage","setItem","dispatch","logOut","response","removeItem","success"],"mappings":"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","sourcesContent":["import { logInAction, logOutAction } from './../redux/actions/auth';\nimport axios from \"axios\";\nimport { LOG_USER_IN, LOG_USER_OUT } from \"../redux/constants\";\nimport { User } from \"../types\";\nimport authApi from \"../api/auth\";\nimport courseApi from \"../api/course\";\nimport schoolApi from \"../api/school\";\n\nimport { store } from \"../redux/store\";\n\nimport { message } from \"antd\";\n\nasync function signUp(values) {\n  const {\n    fullname,\n    emailaddress,\n    userpassword,\n    university,\n    course,\n    yearofstudy,\n  } = values;\n\n  // let createUserConfig = {\n  //     method: 'post',\n  //     url: 'http://localhost:8080/api/user',\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     },\n  //     data: {\n  //         \"name\": values.fullname,\n  //         \"email\": values.emailaddress,\n  //         \"password\": values.userpassword,\n  //         \"schoolId\": values.university,\n  //         \"courseId\": values.course,\n  //         \"currentYear\": values.yearofstudy\n  //     }\n  // };\n\n  // let createSchoolConfig = {\n  //     method: 'post',\n  //     url: 'http://localhost:8080/api/school',\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     },\n  //     data: {\n  //         \"name\": values.fullname,\n  //     }\n  // };\n\n  // let createCourseConfig = {\n  //     method: 'post',\n  //     url: 'http://localhost:8080/api/course',\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     },\n  //     data: {\n  //         \"name\": values.fullname,\n  //     }\n  // };\n\n  // if schoolId is user created, then create a new school in the system\n\n  if (course !== \"userCreated\" && university !== \"userCreated\") {\n    const data = await authApi\n      .signUp(\n        fullname,\n        emailaddress,\n        userpassword,\n      )\n      .catch((error) => {\n        throw error;\n      });\n    if (data) {\n      console.log(\"sign up success\");\n    }\n  }\n}\n\nasync function logIn(values) {\n  const { emailaddress, password } = values;\n  const data = await authApi.logIn(emailaddress, password).catch((error) => {\n    throw error;\n  });\n  if (data) {\n    const { name, currentYear, courseId, _id, schoolId, password} = data;\n    let courseData = null;\n    let schoolData = null;\n    if (courseId) {\n      courseData = await courseApi.getCourse(courseId);\n    }\n    if (schoolId) {\n      schoolData = await schoolApi.getSchool(schoolId);\n    }     \n    const user: User = {\n      fullName: name,\n      email: emailaddress,\n      password: password,\n      yearOfStudy: currentYear ? currentYear : null,\n      courseName: courseData ? courseData.name : null,\n      schoolName: schoolData ? schoolData.name : null,\n      _id,\n    };\n\n    window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n    window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n\n    store.dispatch(logInAction(user));\n  }\n}\n\nasync function logOut() {\n  const response = await authApi.logOut().catch((error) => {\n    throw error;\n  });\n\n    window.localStorage.removeItem(\"ROTTENMODS_EMAIL\");\n    window.localStorage.removeItem(\"ROTTENMODS_PASSWORD\");\n\n    message.success(\"Successfully Logged Out!\");\n\n    store.dispatch(logOutAction());\n\n  \n\n};\n\nexport default {\n  signUp,\n  logIn,\n  logOut,\n};\n"]},"metadata":{},"sourceType":"module"}