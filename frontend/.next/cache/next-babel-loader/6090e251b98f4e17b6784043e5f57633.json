{"ast":null,"code":"import bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nimport { fetchBookmarksAction, fetchPlannedModsAction, fetchPersonalReviewsAction } from \"../redux/actions/personal-modules\";\nexport const updatePersonalBookmarks = async userId => {\n  if (!userId) return;\n  const data = await bookmarkApi.getBookmarks(userId);\n  store.dispatch(fetchBookmarksAction(data));\n};\nexport const updatedPersonalPlannedModules = async userId => {\n  if (!userId) return;\n  const data = await plannedModApi.fetchPlannedMods(userId);\n  store.dispatch(fetchPlannedModsAction(data));\n};\nexport const updatePersonalReviews = async userId => {\n  if (!userId) return;\n  const data = await reviewApi.getReviewsOfUser(userId);\n  store.dispatch(fetchPersonalReviewsAction(data));\n};\nexport const triggerRequireLoginMessage = () => {\n  message.warning(\"You need to login first!\");\n};\nexport const fetchRatings = (ratingIds, setStar, setDifficulty) => {\n  ratingIds.forEach(async id => {\n    const rating = await reviewApi.getRatingById(id);\n\n    if (rating.type == \"star\") {\n      setStar(rating.value);\n    } else if (rating.type == \"difficulty\") {\n      setDifficulty(rating.value);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/utils/helpers.ts"],"names":["bookmarkApi","plannedModApi","reviewApi","store","message","fetchBookmarksAction","fetchPlannedModsAction","fetchPersonalReviewsAction","updatePersonalBookmarks","userId","data","getBookmarks","dispatch","updatedPersonalPlannedModules","fetchPlannedMods","updatePersonalReviews","getReviewsOfUser","triggerRequireLoginMessage","warning","fetchRatings","ratingIds","setStar","setDifficulty","forEach","id","rating","getRatingById","type","value"],"mappings":"AACA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SACEC,oBADF,EAEEC,sBAFF,EAGEC,0BAHF,QAIQ,mCAJR;AAMA,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,MAAP,IAAkB;AACvD,MAAI,CAACA,MAAL,EAAa;AAEb,QAAMC,IAAI,GAAG,MAAMV,WAAW,CAACW,YAAZ,CAAyBF,MAAzB,CAAnB;AACAN,EAAAA,KAAK,CAACS,QAAN,CAAeP,oBAAoB,CAACK,IAAD,CAAnC;AACD,CALM;AAOP,OAAO,MAAMG,6BAA6B,GAAG,MAAOJ,MAAP,IAAkB;AAC7D,MAAI,CAACA,MAAL,EAAa;AAEb,QAAMC,IAAI,GAAG,MAAMT,aAAa,CAACa,gBAAd,CAA+BL,MAA/B,CAAnB;AACAN,EAAAA,KAAK,CAACS,QAAN,CAAeN,sBAAsB,CAACI,IAAD,CAArC;AACD,CALM;AAOP,OAAO,MAAMK,qBAAqB,GAAG,MAAON,MAAP,IAAkB;AACrD,MAAI,CAACA,MAAL,EAAa;AAEb,QAAMC,IAAI,GAAG,MAAMR,SAAS,CAACc,gBAAV,CAA2BP,MAA3B,CAAnB;AACAN,EAAAA,KAAK,CAACS,QAAN,CAAeL,0BAA0B,CAACG,IAAD,CAAzC;AACD,CALM;AAOP,OAAO,MAAMO,0BAA0B,GAAG,MAAM;AAC9Cb,EAAAA,OAAO,CAACc,OAAR,CAAgB,0BAAhB;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,CAC1BC,SAD0B,EAE1BC,OAF0B,EAG1BC,aAH0B,KAIjB;AACTF,EAAAA,SAAS,CAACG,OAAV,CAAkB,MAAOC,EAAP,IAAc;AAC9B,UAAMC,MAAM,GAAG,MAAMvB,SAAS,CAACwB,aAAV,CAAwBF,EAAxB,CAArB;;AACA,QAAIC,MAAM,CAACE,IAAP,IAAe,MAAnB,EAA2B;AACzBN,MAAAA,OAAO,CAACI,MAAM,CAACG,KAAR,CAAP;AACD,KAFD,MAEO,IAAIH,MAAM,CAACE,IAAP,IAAe,YAAnB,EAAiC;AACtCL,MAAAA,aAAa,CAACG,MAAM,CAACG,KAAR,CAAb;AACD;AACF,GAPD;AAQD,CAbM","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nimport { \n  fetchBookmarksAction,\n  fetchPlannedModsAction, \n  fetchPersonalReviewsAction \n} from  \"../redux/actions/personal-modules\"\n\nexport const updatePersonalBookmarks = async (userId) => {\n  if (!userId) return;\n\n  const data = await bookmarkApi.getBookmarks(userId);\n  store.dispatch(fetchBookmarksAction(data));\n};\n\nexport const updatedPersonalPlannedModules = async (userId) => {\n  if (!userId) return;\n\n  const data = await plannedModApi.fetchPlannedMods(userId);\n  store.dispatch(fetchPlannedModsAction(data));\n};\n\nexport const updatePersonalReviews = async (userId) => {\n  if (!userId) return;\n\n  const data = await reviewApi.getReviewsOfUser(userId);\n  store.dispatch(fetchPersonalReviewsAction(data));\n};\n\nexport const triggerRequireLoginMessage = () => {\n  message.warning(\"You need to login first!\");\n};\n\nexport const fetchRatings = (\n  ratingIds: string[],\n  setStar: Dispatch<SetStateAction<number>>,\n  setDifficulty: Dispatch<SetStateAction<number>>\n): void => {\n  ratingIds.forEach(async (id) => {\n    const rating = await reviewApi.getRatingById(id);\n    if (rating.type == \"star\") {\n      setStar(rating.value);\n    } else if (rating.type == \"difficulty\") {\n      setDifficulty(rating.value);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}