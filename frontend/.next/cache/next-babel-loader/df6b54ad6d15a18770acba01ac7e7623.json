{"ast":null,"code":"var _jsxFileName = \"/Users/zhangxian/Desktop/RottenMods/frontend/pages/search.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector } from \"react-redux\";\nimport modApi from \"../api/module\";\nimport ModuleCompareModal from \"../components/ModuleCompareModal\";\nimport SectionTitle from \"../components/SectionTitle\";\nimport SearchModuleList from \"../components/SearchModuleList\";\n\nconst Search = ({\n  searchResults\n}) => {\n  const searchTerm = useSelector(state => state.search.searchTerm);\n  console.log(\"Search Results:\", searchResults);\n  return __jsx(React.Fragment, null, __jsx(SectionTitle, {\n    title: `Search results for \"${searchTerm}\"`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }), __jsx(SearchModuleList, {\n    modules: searchResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), __jsx(SectionTitle, {\n    title: `Similar results to \"${searchTerm}\"`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), __jsx(SearchModuleList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), __jsx(ModuleCompareModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n};\n\nSearch.getInitialProps = async ({\n  query\n}) => {\n  const searchTerm = query.s;\n\n  try {\n    const searchResults = await modApi.searchModule(searchTerm);\n    return {\n      searchResults\n    };\n  } catch (err) {\n    return {\n      searchResults: []\n    };\n  }\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/pages/search.tsx"],"names":["useSelector","modApi","ModuleCompareModal","SectionTitle","SearchModuleList","Search","searchResults","searchTerm","state","search","console","log","getInitialProps","query","s","searchModule","err"],"mappings":";;;AACA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAGA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;;AAMA,MAAMC,MAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAC3D,QAAMC,UAAU,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaF,UAAzB,CAA9B;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,aAA/B;AAEA,SACE,4BACE,MAAC,YAAD;AAAc,IAAA,KAAK,EAAG,uBAAsBC,UAAW,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,gBAAD;AAAkB,IAAA,OAAO,EAAED,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,YAAD;AAAc,IAAA,KAAK,EAAG,uBAAsBC,UAAW,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CAdD;;AAgBAF,MAAM,CAACO,eAAP,GAAyB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC5C,QAAMN,UAAU,GAAGM,KAAK,CAACC,CAAzB;;AACA,MAAI;AACF,UAAMR,aAAa,GAAG,MAAML,MAAM,CAACc,YAAP,CAAoBR,UAApB,CAA5B;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD,GAHD,CAGE,OAAOU,GAAP,EAAY;AACZ,WAAO;AAAEV,MAAAA,aAAa,EAAE;AAAjB,KAAP;AACD;AAEF,CATD;;AAWA,eAAeD,MAAf","sourcesContent":["import { NextPage } from \"next\";\nimport { useSelector } from \"react-redux\";\nimport modApi from \"../api/module\";\nimport { Module } from \"../types\";\n\nimport ModuleCompareModal from \"../components/ModuleCompareModal\";\nimport SectionTitle from \"../components/SectionTitle\";\nimport SearchModuleList from \"../components/SearchModuleList\";\n\ninterface SearchProps {\n  searchResults: Module[];\n}\n\nconst Search: NextPage<SearchProps> = ({ searchResults }) => {\n  const searchTerm = useSelector((state) => state.search.searchTerm);\n\n  console.log(\"Search Results:\", searchResults);\n\n  return (\n    <>\n      <SectionTitle title={`Search results for \"${searchTerm}\"`} />\n      <SearchModuleList modules={searchResults} />\n      <SectionTitle title={`Similar results to \"${searchTerm}\"`} />\n      <SearchModuleList />\n      <ModuleCompareModal />\n    </>\n  );\n};\n\nSearch.getInitialProps = async ({ query }) => {\n  const searchTerm = query.s;\n  try {\n    const searchResults = await modApi.searchModule(searchTerm);\n    return { searchResults };\n  } catch (err) {\n    return { searchResults: [] }\n  }\n\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}