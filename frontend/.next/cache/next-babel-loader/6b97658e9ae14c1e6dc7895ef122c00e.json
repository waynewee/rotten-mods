{"ast":null,"code":"var _jsxFileName = \"/Users/zhangxian/Desktop/RottenMods/frontend/components/AddReviewModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport reviewApi from \"../api/review\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\nconst today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst yearShortform = currentYear % 2000; // eg. 2021 => 21\n\nconst currentSemester = currentMonth < 6 ? 2 : 1;\nconst currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nconst yearMinusOne = currentAYSecondYear - 1;\nconst initialReviewState = {\n  text: \"\",\n  rating: {\n    difficulty: 0,\n    star: 0\n  },\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: `${yearMinusOne}/${currentAYSecondYear}`\n};\n\nconst AddReviewModal = ({\n  code,\n  modId,\n  updateReviews,\n  isModalVisible,\n  setModalVisibility,\n  reviewByUser\n}) => {\n  var _initialReview$rating, _initialReview$rating2;\n\n  const initialReview = reviewByUser !== null && reviewByUser !== void 0 ? reviewByUser : initialReviewState;\n  const {\n    0: text,\n    1: setText\n  } = useState(initialReview.text);\n  const {\n    0: difficulty,\n    1: setDifficulty\n  } = useState((_initialReview$rating = initialReview.rating) === null || _initialReview$rating === void 0 ? void 0 : _initialReview$rating.difficulty);\n  const {\n    0: ratings,\n    1: setRatings\n  } = useState((_initialReview$rating2 = initialReview.rating) === null || _initialReview$rating2 === void 0 ? void 0 : _initialReview$rating2.star);\n  const {\n    0: workload,\n    1: setWorkload\n  } = useState(initialReview.workload);\n  const {\n    0: semester,\n    1: setSemester\n  } = useState(initialReview.semesterTaken);\n  const {\n    0: year,\n    1: setYear\n  } = useState(initialReview.acadYearTaken);\n  const {\n    0: submitText,\n    1: setSubmitText\n  } = useState(\"Submit\");\n  const {\n    0: submitColor,\n    1: setSubmitColor\n  } = useState(submitBlue);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    const reviewToSubmit = {\n      text,\n      semesterTaken: semester,\n      acadYearTaken: year,\n      workload\n    };\n\n    if (reviewByUser) {\n      const reviewPromise = await reviewApi.updateReviewOfModule(reviewToSubmit, modId, userId, reviewByUser._id); // TODO: Wait for implementation of PUT Rating API\n      // const difficultyPromise = reviewApi.updateRatingOfModule(difficulty, \"difficulty\", userId, modId, \"mod\");\n      // const starPromise = reviewApi.updateRatingOfModule(ratings, \"star\", userId, modId, \"mod\");\n      // await Promise.all([reviewPromise, difficultyPromise, starPromise]);\n    } else {\n      const reviewPromise = reviewApi.addReviewOfModule(reviewToSubmit, modId, userId);\n      const difficultyPromise = reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\");\n      const starPromise = reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\");\n      await Promise.all([reviewPromise, difficultyPromise, starPromise]);\n    }\n\n    setModalVisibility(false);\n    updateReviews();\n    resetState();\n  };\n\n  const validateForm = () => ratings !== 0 && difficulty !== 0 && text !== \"\";\n\n  const resetState = () => {\n    setText(\"\");\n    setDifficulty(1);\n    setRatings(1);\n    setWorkload(10);\n    setSemester(1);\n    setYear(`${yearMinusOne}/${currentAYSecondYear}`);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    backgroundColor: reviewBlue,\n    submitColor: submitColor,\n    title: `${reviewByUser ? \"Edit\" : \"Add\"} Review`,\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    onSubmit: onSubmit,\n    submitText: submitText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, __jsx(FormModalItem, {\n    label: \"Module Code\",\n    type: \"text\",\n    value: code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Review\",\n    type: \"textarea\",\n    value: text,\n    setValue: setText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Year Taken\",\n    type: \"annualYear\",\n    value: year,\n    setValue: setYear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Semester Taken\",\n    type: \"semester\",\n    value: semester,\n    setValue: setSemester,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Difficulty\",\n    type: \"difficulty\",\n    value: difficulty,\n    setValue: setDifficulty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Ratings\",\n    type: \"rate\",\n    value: ratings,\n    setValue: setRatings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AddReviewModal;","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/components/AddReviewModal.tsx"],"names":["useState","useSelector","reviewApi","FormModal","FormModalItem","reviewBlue","submitBlue","crossRed","today","Date","currentYear","getFullYear","currentMonth","getMonth","yearShortform","currentSemester","currentAYSecondYear","yearMinusOne","initialReviewState","text","rating","difficulty","star","workload","semesterTaken","acadYearTaken","AddReviewModal","code","modId","updateReviews","isModalVisible","setModalVisibility","reviewByUser","initialReview","setText","setDifficulty","ratings","setRatings","setWorkload","semester","setSemester","year","setYear","submitText","setSubmitText","submitColor","setSubmitColor","userId","state","auth","user","_id","onSubmit","validateForm","reviewToSubmit","reviewPromise","updateReviewOfModule","addReviewOfModule","difficultyPromise","addRating","starPromise","Promise","all","resetState","closeModal","isToClose"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalState, Review } from \"../types\";\nimport reviewApi from \"../api/review\";\n\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\n\ninterface AddReviewModalProps extends ModalState {\n  code: string;\n  modId: string;\n  updateReviews: () => void;\n  reviewByUser: Review;\n}\n\nconst today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst yearShortform = currentYear % 2000; // eg. 2021 => 21\nconst currentSemester = currentMonth < 6 ? 2 : 1;\nconst currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nconst yearMinusOne = currentAYSecondYear - 1;\n\nconst initialReviewState = {\n  text: \"\",\n  rating: {\n    difficulty: 0,\n    star: 0\n  },\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: `${yearMinusOne}/${currentAYSecondYear}`\n}\n\nconst AddReviewModal: React.FC<AddReviewModalProps> = ({\n  code,\n  modId,\n  updateReviews,\n  isModalVisible,\n  setModalVisibility,\n  reviewByUser\n}) => {\n  const initialReview = reviewByUser ?? initialReviewState;\n\n  const [text, setText] = useState(initialReview.text);\n  const [difficulty, setDifficulty] = useState(initialReview.rating?.difficulty);\n  const [ratings, setRatings] = useState(initialReview.rating?.star);\n  const [workload, setWorkload] = useState(initialReview.workload);\n  const [semester, setSemester] = useState(initialReview.semesterTaken);\n  const [year, setYear] = useState(initialReview.acadYearTaken);\n  const [submitText, setSubmitText] = useState(\"Submit\");\n  const [submitColor, setSubmitColor] = useState(submitBlue);\n  const userId = useSelector(state => state.auth.user?._id);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    const reviewToSubmit = {\n      text,\n      semesterTaken: semester,\n      acadYearTaken: year as string,\n      workload\n    }\n\n    if (reviewByUser) {\n      const reviewPromise = await reviewApi.updateReviewOfModule(reviewToSubmit, modId, userId, reviewByUser._id);\n      // TODO: Wait for implementation of PUT Rating API\n      // const difficultyPromise = reviewApi.updateRatingOfModule(difficulty, \"difficulty\", userId, modId, \"mod\");\n      // const starPromise = reviewApi.updateRatingOfModule(ratings, \"star\", userId, modId, \"mod\");\n\n      // await Promise.all([reviewPromise, difficultyPromise, starPromise]);\n    } else {\n      const reviewPromise = reviewApi.addReviewOfModule(reviewToSubmit, modId, userId);\n      const difficultyPromise = reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\");\n      const starPromise = reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\");\n\n      await Promise.all([reviewPromise, difficultyPromise, starPromise]);\n    }\n\n    setModalVisibility(false);\n    updateReviews();\n    resetState();\n  }\n\n  const validateForm = () => ratings !== 0 && difficulty !== 0 && text !== \"\";\n\n  const resetState = () => {\n    setText(\"\");\n    setDifficulty(1);\n    setRatings(1);\n    setWorkload(10);\n    setSemester(1);\n    setYear(`${yearMinusOne}/${currentAYSecondYear}`);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  }\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  }\n\n  return (\n    <FormModal\n      backgroundColor={reviewBlue}\n      submitColor={submitColor}\n      title={`${reviewByUser ? \"Edit\" : \"Add\"} Review`}\n      isModalVisible={isModalVisible}\n      setModalVisibility={closeModal}\n      onSubmit={onSubmit}\n      submitText={submitText}\n    >\n      <FormModalItem label=\"Module Code\" type=\"text\" value={code} />\n      <FormModalItem label=\"Review\" type=\"textarea\" value={text} setValue={setText} />\n      <FormModalItem label=\"Year Taken\" type=\"annualYear\" value={year} setValue={setYear} />\n      <FormModalItem label=\"Semester Taken\" type=\"semester\" value={semester} setValue={setSemester} />\n      <FormModalItem label=\"Difficulty\" type=\"difficulty\" value={difficulty} setValue={setDifficulty} />\n      <FormModalItem label=\"Ratings\" type=\"rate\" value={ratings} setValue={setRatings} />\n      {/* <FormModalItem label=\"Expected Hours\" type=\"number\" value={workload} setValue={setWorkload} /> */}\n    </FormModal>\n  )\n}\n\nexport default AddReviewModal;"]},"metadata":{},"sourceType":"module"}