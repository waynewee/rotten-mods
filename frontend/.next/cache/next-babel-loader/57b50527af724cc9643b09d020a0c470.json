{"ast":null,"code":"var _jsxFileName = \"/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddCommentModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport commentApi from \"../api/comment\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { submitBlue, commentBlue } from \"../styles/colors\";\nimport { message } from \"antd\";\n\nconst AddCommentModal = ({\n  isModalVisible,\n  setModalVisibility,\n  reviewId,\n  fetchComments\n}) => {\n  const {\n    0: comment,\n    1: setComment\n  } = useState(\"\");\n  const {\n    0: submitText,\n    1: setSubmitText\n  } = useState(\"Submit\");\n  const {\n    0: submitColor,\n    1: setSubmitColor\n  } = useState(submitBlue);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      message.error(\"The comment field cannot be empty!\");\n      return;\n    }\n\n    await commentApi.addComment(userId, comment, reviewId);\n    setComment(\"\");\n    setSubmitText(\"Submit\");\n    setSubmitColor(submitBlue);\n    setModalVisibility(false);\n    fetchComments();\n  };\n\n  const validateForm = () => comment.trim() !== \"\";\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    title: \"Add Comment\",\n    backgroundColor: commentBlue,\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    submitColor: submitColor,\n    onSubmit: onSubmit,\n    submitText: submitText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(FormModalItem, {\n    label: \"Comment\",\n    type: \"textarea\",\n    value: comment,\n    setValue: setComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AddCommentModal;","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddCommentModal.tsx"],"names":["useState","useSelector","commentApi","FormModal","FormModalItem","submitBlue","commentBlue","message","AddCommentModal","isModalVisible","setModalVisibility","reviewId","fetchComments","comment","setComment","submitText","setSubmitText","submitColor","setSubmitColor","userId","state","auth","user","_id","onSubmit","validateForm","error","addComment","trim","closeModal","isToClose"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,EAA+BC,WAA/B,QAAkD,kBAAlD;AACA,SAASC,OAAT,QAAwB,MAAxB;;AAOA,MAAMC,eAA+C,GAAG,CAAC;AACvDC,EAAAA,cADuD;AAEvDC,EAAAA,kBAFuD;AAGvDC,EAAAA,QAHuD;AAIvDC,EAAAA;AAJuD,CAAD,KAKlD;AACJ,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACe,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,CAAC,QAAD,CAA5C;AACA,QAAM;AAAA,OAACiB,WAAD;AAAA,OAAcC;AAAd,MAAgClB,QAAQ,CAACK,UAAD,CAA9C;AACA,QAAMc,MAAM,GAAGlB,WAAW,CAAEmB,KAAD;AAAA;;AAAA,+BAAWA,KAAK,CAACC,IAAN,CAAWC,IAAtB,qDAAW,iBAAiBC,GAA5B;AAAA,GAAD,CAA1B;;AAEA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI,CAACC,YAAY,EAAjB,EAAqB;AACnBlB,MAAAA,OAAO,CAACmB,KAAR,CAAc,oCAAd;AACA;AACD;;AAED,UAAMxB,UAAU,CAACyB,UAAX,CAAsBR,MAAtB,EAA8BN,OAA9B,EAAuCF,QAAvC,CAAN;AACAG,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,aAAa,CAAC,QAAD,CAAb;AACAE,IAAAA,cAAc,CAACb,UAAD,CAAd;AACAK,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,IAAAA,aAAa;AACd,GAZD;;AAcA,QAAMa,YAAY,GAAG,MAAMZ,OAAO,CAACe,IAAR,OAAmB,EAA9C;;AAEA,QAAMC,UAAU,GAAIC,SAAD,IAAe;AAChCpB,IAAAA,kBAAkB,CAACoB,SAAD,CAAlB;AACAZ,IAAAA,cAAc,CAACb,UAAD,CAAd;AACAW,IAAAA,aAAa,CAAC,QAAD,CAAb;AACD,GAJD;;AAMA,SACE,MAAC,SAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,eAAe,EAAEV,WAFnB;AAGE,IAAA,cAAc,EAAEG,cAHlB;AAIE,IAAA,kBAAkB,EAAEoB,UAJtB;AAKE,IAAA,WAAW,EAAEZ,WALf;AAME,IAAA,QAAQ,EAAEO,QANZ;AAOE,IAAA,UAAU,EAAET,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,MAAC,aAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAEF,OAHT;AAIE,IAAA,QAAQ,EAAEC,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAkBD,CAnDD;;AAqDA,eAAeN,eAAf","sourcesContent":["import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalState } from \"../types\";\nimport commentApi from \"../api/comment\";\n\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { submitBlue, crossRed, commentBlue } from \"../styles/colors\";\nimport { message } from \"antd\";\n\ninterface AddCommentModalProps extends ModalState {\n  reviewId: string;\n  fetchComments: () => void;\n}\n\nconst AddCommentModal: React.FC<AddCommentModalProps> = ({\n  isModalVisible,\n  setModalVisibility,\n  reviewId,\n  fetchComments,\n}) => {\n  const [comment, setComment] = useState(\"\");\n  const [submitText, setSubmitText] = useState(\"Submit\");\n  const [submitColor, setSubmitColor] = useState(submitBlue);\n  const userId = useSelector((state) => state.auth.user?._id);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      message.error(\"The comment field cannot be empty!\");\n      return;\n    }\n\n    await commentApi.addComment(userId, comment, reviewId);\n    setComment(\"\");\n    setSubmitText(\"Submit\");\n    setSubmitColor(submitBlue);\n    setModalVisibility(false);\n    fetchComments();\n  };\n\n  const validateForm = () => comment.trim() !== \"\";\n\n  const closeModal = (isToClose) => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return (\n    <FormModal\n      title=\"Add Comment\"\n      backgroundColor={commentBlue}\n      isModalVisible={isModalVisible}\n      setModalVisibility={closeModal}\n      submitColor={submitColor}\n      onSubmit={onSubmit}\n      submitText={submitText}\n    >\n      <FormModalItem\n        label=\"Comment\"\n        type=\"textarea\"\n        value={comment}\n        setValue={setComment}\n      />\n    </FormModal>\n  );\n};\n\nexport default AddCommentModal;\n"]},"metadata":{},"sourceType":"module"}