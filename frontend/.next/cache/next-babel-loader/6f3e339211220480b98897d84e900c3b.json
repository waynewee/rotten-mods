{"ast":null,"code":"import axios from 'axios';\nimport { LOG_USER_IN, LOG_USER_OUT } from \"../redux/constants\";\nimport authApi from \"../api/auth\";\nimport courseApi from \"../api/course\";\n\nfunction signUp(values) {\n  console.log(\"Sign Up Service received\");\n  console.log(values);\n  let createUserConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/user',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname,\n      \"email\": values.emailaddress,\n      \"password\": values.userpassword,\n      \"schoolId\": values.university,\n      \"courseId\": values.course,\n      \"currentYear\": values.yearofstudy\n    }\n  };\n  let createSchoolConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/school',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname\n    }\n  };\n  let createCourseConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/course',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname\n    }\n  }; // if schoolId is user created, then create a new school in the system\n\n  if (values.course !== \"userCreated\" && values.school !== \"userCreated\") {\n    axios(createUserConfig).then(function (response) {\n      console.log(\"post is successful\");\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n\nasync function logIn(values, dispatch) {\n  const {\n    emailaddress,\n    password\n  } = values;\n  const data = await authApi.logIn(emailaddress, password);\n  const {\n    name,\n    currentYear,\n    courseId,\n    _id\n  } = data;\n  const courseData = await courseApi.getCourse(courseId);\n  console.log(courseData);\n  const user = {\n    fullName: name,\n    yearOfStudy: currentYear,\n    studyCourse: courseId,\n    _id\n  };\n  window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n  window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n  dispatch({\n    type: LOG_USER_IN,\n    payload: user\n  });\n}\n\nfunction logOut(dispatch) {\n  window.localStorage.removeItem(\"ROTTENMODS_EMAIL\");\n  window.localStorage.removeItem(\"ROTTENMODS_PASSWORD\");\n  dispatch({\n    type: LOG_USER_OUT\n  });\n}\n\nexport default {\n  signUp,\n  logIn,\n  logOut\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/services/authentication.tsx"],"names":["axios","LOG_USER_IN","LOG_USER_OUT","authApi","courseApi","signUp","values","console","log","createUserConfig","method","url","headers","data","fullname","emailaddress","userpassword","university","course","yearofstudy","createSchoolConfig","createCourseConfig","school","then","response","catch","error","logIn","dispatch","password","name","currentYear","courseId","_id","courseData","getCourse","user","fullName","yearOfStudy","studyCourse","window","localStorage","setItem","type","payload","logOut","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,SAAP,MAAsB,eAAtB;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,MAAIG,gBAAgB,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,GAAG,EAAE,gCAFc;AAGnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAHU;AAMnBC,IAAAA,IAAI,EAAE;AACF,cAAQP,MAAM,CAACQ,QADb;AAEF,eAASR,MAAM,CAACS,YAFd;AAGF,kBAAYT,MAAM,CAACU,YAHjB;AAIF,kBAAYV,MAAM,CAACW,UAJjB;AAKF,kBAAYX,MAAM,CAACY,MALjB;AAMF,qBAAeZ,MAAM,CAACa;AANpB;AANa,GAAvB;AAgBA,MAAIC,kBAAkB,GAAG;AACrBV,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,GAAG,EAAE,kCAFgB;AAGrBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAHY;AAMrBC,IAAAA,IAAI,EAAE;AACF,cAAQP,MAAM,CAACQ;AADb;AANe,GAAzB;AAWA,MAAIO,kBAAkB,GAAG;AACrBX,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,GAAG,EAAE,kCAFgB;AAGrBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAHY;AAMrBC,IAAAA,IAAI,EAAE;AACF,cAAQP,MAAM,CAACQ;AADb;AANe,GAAzB,CA9BoB,CA0CpB;;AAEA,MAAIR,MAAM,CAACY,MAAP,KAAkB,aAAlB,IAAmCZ,MAAM,CAACgB,MAAP,KAAkB,aAAzD,EAAwE;AACpEtB,IAAAA,KAAK,CAACS,gBAAD,CAAL,CACKc,IADL,CACU,UAAUC,QAAV,EAAoB;AACtBjB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACH,KAJL,EAKKC,KALL,CAKW,UAAUC,KAAV,EAAiB;AACpBnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ;AACH,KAPL;AAQH;AAEJ;;AAGD,eAAeC,KAAf,CAAqBrB,MAArB,EAA6BsB,QAA7B,EAAuC;AACnC,QAAM;AAAEb,IAAAA,YAAF;AAAgBc,IAAAA;AAAhB,MAA6BvB,MAAnC;AACA,QAAMO,IAAI,GAAG,MAAMV,OAAO,CAACwB,KAAR,CAAcZ,YAAd,EAA4Bc,QAA5B,CAAnB;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA;AAA/B,MAAuCpB,IAA7C;AACA,QAAMqB,UAAU,GAAG,MAAM9B,SAAS,CAAC+B,SAAV,CAAoBH,QAApB,CAAzB;AACAzB,EAAAA,OAAO,CAACC,GAAR,CAAY0B,UAAZ;AACA,QAAME,IAAU,GAAG;AACfC,IAAAA,QAAQ,EAAEP,IADK;AAEfQ,IAAAA,WAAW,EAAEP,WAFE;AAGfQ,IAAAA,WAAW,EAAEP,QAHE;AAIfC,IAAAA;AAJe,GAAnB;AAOAO,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,kBAA5B,EAAgD3B,YAAhD;AACAyB,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,qBAA5B,EAAmDb,QAAnD;AAEAD,EAAAA,QAAQ,CAAC;AACLe,IAAAA,IAAI,EAAE1C,WADD;AAEL2C,IAAAA,OAAO,EAAER;AAFJ,GAAD,CAAR;AAIH;;AAED,SAASS,MAAT,CAAgBjB,QAAhB,EAA0B;AACtBY,EAAAA,MAAM,CAACC,YAAP,CAAoBK,UAApB,CAA+B,kBAA/B;AACAN,EAAAA,MAAM,CAACC,YAAP,CAAoBK,UAApB,CAA+B,qBAA/B;AAEAlB,EAAAA,QAAQ,CAAC;AACLe,IAAAA,IAAI,EAAEzC;AADD,GAAD,CAAR;AAGH;;AAED,eAAe;AACXG,EAAAA,MADW;AAEXsB,EAAAA,KAFW;AAGXkB,EAAAA;AAHW,CAAf","sourcesContent":["import axios from 'axios';\nimport { LOG_USER_IN, LOG_USER_OUT } from \"../redux/constants\";\nimport { User } from \"../types\";\nimport authApi from \"../api/auth\";\nimport courseApi from \"../api/course\";\n\nfunction signUp(values) {\n    console.log(\"Sign Up Service received\");\n    console.log(values);\n    let createUserConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/user',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data: {\n            \"name\": values.fullname,\n            \"email\": values.emailaddress,\n            \"password\": values.userpassword,\n            \"schoolId\": values.university,\n            \"courseId\": values.course,\n            \"currentYear\": values.yearofstudy\n        }\n    };\n\n    let createSchoolConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/school',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data: {\n            \"name\": values.fullname,\n        }\n    };\n\n    let createCourseConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/course',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        data: {\n            \"name\": values.fullname,\n        }\n    };\n\n\n    // if schoolId is user created, then create a new school in the system\n\n    if (values.course !== \"userCreated\" && values.school !== \"userCreated\") {\n        axios(createUserConfig)\n            .then(function (response) {\n                console.log(\"post is successful\");\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n}\n\n\nasync function logIn(values, dispatch) {\n    const { emailaddress, password } = values;\n    const data = await authApi.logIn(emailaddress, password);\n    const { name, currentYear, courseId, _id } = data;\n    const courseData = await courseApi.getCourse(courseId);\n    console.log(courseData);\n    const user: User = {\n        fullName: name,\n        yearOfStudy: currentYear,\n        studyCourse: courseId,\n        _id\n    }\n\n    window.localStorage.setItem(\"ROTTENMODS_EMAIL\", emailaddress);\n    window.localStorage.setItem(\"ROTTENMODS_PASSWORD\", password);\n\n    dispatch({\n        type: LOG_USER_IN,\n        payload: user\n    });\n}\n\nfunction logOut(dispatch) {\n    window.localStorage.removeItem(\"ROTTENMODS_EMAIL\");\n    window.localStorage.removeItem(\"ROTTENMODS_PASSWORD\");\n\n    dispatch({\n        type: LOG_USER_OUT,\n    })\n}\n\nexport default {\n    signUp,\n    logIn,\n    logOut\n}"]},"metadata":{},"sourceType":"module"}