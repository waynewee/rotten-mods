{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddReviewModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport reviewApi from \"../api/review\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\nvar today = new Date();\nvar currentYear = today.getFullYear();\nvar currentMonth = today.getMonth();\nvar yearShortform = currentYear % 2000; // eg. 2021 => 21\n\nvar currentSemester = currentMonth < 6 ? 2 : 1;\nvar currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nvar yearMinusOne = currentAYSecondYear - 1;\nvar initialReviewState = {\n  text: \"\",\n  rating: {\n    difficulty: {\n      count: 1,\n      value: 3.0\n    },\n    star: {\n      count: 1,\n      value: 3.0\n    }\n  },\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: \"\".concat(yearMinusOne, \"/\").concat(currentAYSecondYear)\n};\n\nvar AddReviewModal = function AddReviewModal(_ref) {\n  _s();\n\n  var _initialReview$rating, _initialReview$rating2;\n\n  var code = _ref.code,\n      modId = _ref.modId,\n      updateReviews = _ref.updateReviews,\n      updateModule = _ref.updateModule,\n      isModalVisible = _ref.isModalVisible,\n      setModalVisibility = _ref.setModalVisibility,\n      reviewByUser = _ref.reviewByUser,\n      ratingsByUser = _ref.ratingsByUser;\n  var initialReview = reviewByUser !== null && reviewByUser !== void 0 ? reviewByUser : initialReviewState;\n\n  var _useState = useState(initialReview.text),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useState2 = useState(3),\n      difficulty = _useState2[0],\n      setDifficulty = _useState2[1];\n\n  var _useState3 = useState((_initialReview$rating = initialReview.rating) === null || _initialReview$rating === void 0 ? void 0 : (_initialReview$rating2 = _initialReview$rating.star) === null || _initialReview$rating2 === void 0 ? void 0 : _initialReview$rating2.value),\n      ratings = _useState3[0],\n      setRatings = _useState3[1];\n\n  var _useState4 = useState(initialReview.semesterTaken),\n      semester = _useState4[0],\n      setSemester = _useState4[1];\n\n  var _useState5 = useState(initialReview.acadYearTaken),\n      year = _useState5[0],\n      setYear = _useState5[1];\n\n  var _useState6 = useState(\"Submit\"),\n      submitText = _useState6[0],\n      setSubmitText = _useState6[1];\n\n  var _useState7 = useState(submitBlue),\n      submitColor = _useState7[0],\n      setSubmitColor = _useState7[1];\n\n  var userId = useSelector(function (state) {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var requestBody;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (validateForm()) {\n                _context.next = 4;\n                break;\n              }\n\n              setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n              setSubmitColor(crossRed);\n              return _context.abrupt(\"return\");\n\n            case 4:\n              requestBody = {\n                text: text,\n                semesterTaken: semester,\n                acadYearTaken: year,\n                modId: modId,\n                userId: userId,\n                ratings: [{\n                  type: \"difficulty\",\n                  value: difficulty\n                }, {\n                  type: \"star\",\n                  value: ratings\n                }]\n              };\n\n              if (!reviewByUser) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 8;\n              return reviewApi.updateReviewOfModule(requestBody, reviewByUser._id);\n\n            case 8:\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return reviewApi.addReviewOfModule(requestBody);\n\n            case 12:\n              setModalVisibility(false);\n              updateReviews();\n              updateModule();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var validateForm = function validateForm() {\n    return ratings !== 0 && difficulty !== 0 && text !== \"\";\n  };\n\n  var closeModal = function closeModal(isToClose) {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    backgroundColor: reviewBlue,\n    submitColor: submitColor,\n    title: \"\".concat(reviewByUser ? \"Edit\" : \"Add\", \" Review\"),\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    onSubmit: onSubmit,\n    submitText: submitText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, __jsx(FormModalItem, {\n    label: \"Module Code\",\n    type: \"text\",\n    value: code,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Review\",\n    type: \"textarea\",\n    value: text,\n    setValue: setText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Year Taken\",\n    type: \"annualYear\",\n    value: year,\n    setValue: setYear,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Semester Taken\",\n    type: \"semester\",\n    value: semester,\n    setValue: setSemester,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Difficulty\",\n    type: \"difficulty\",\n    value: difficulty,\n    setValue: setDifficulty,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Ratings\",\n    type: \"rate\",\n    value: ratings,\n    setValue: setRatings,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(AddReviewModal, \"Acc3ZIZzx+R7bEGH94UtA0W33iY=\", false, function () {\n  return [useSelector];\n});\n\n_c = AddReviewModal;\nexport default AddReviewModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReviewModal\");","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddReviewModal.tsx"],"names":["useState","useSelector","reviewApi","FormModal","FormModalItem","reviewBlue","submitBlue","crossRed","today","Date","currentYear","getFullYear","currentMonth","getMonth","yearShortform","currentSemester","currentAYSecondYear","yearMinusOne","initialReviewState","text","rating","difficulty","count","value","star","workload","semesterTaken","acadYearTaken","AddReviewModal","code","modId","updateReviews","updateModule","isModalVisible","setModalVisibility","reviewByUser","ratingsByUser","initialReview","setText","setDifficulty","ratings","setRatings","semester","setSemester","year","setYear","submitText","setSubmitText","submitColor","setSubmitColor","userId","state","auth","user","_id","onSubmit","validateForm","requestBody","type","updateReviewOfModule","addReviewOfModule","closeModal","isToClose"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalState, Review } from \"../types\";\nimport reviewApi from \"../api/review\";\n\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\n\ninterface AddReviewModalProps extends ModalState {\n  code: string;\n  modId: string;\n  updateReviews: () => void;\n  updateModule: () => void;\n  reviewByUser: Review;\n  ratingsByUser: { _id: string };\n}\n\nconst today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst yearShortform = currentYear % 2000; // eg. 2021 => 21\nconst currentSemester = currentMonth < 6 ? 2 : 1;\nconst currentAYSecondYear =\n  currentSemester === 1 ? yearShortform + 1 : yearShortform;\nconst yearMinusOne = currentAYSecondYear - 1;\n\nconst initialReviewState = {\n  text: \"\",\n  rating: {\n    difficulty: {\n      count: 1,\n      value: 3.0,\n    },\n    star: {\n      count: 1,\n      value: 3.0,\n    },\n  },\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: `${yearMinusOne}/${currentAYSecondYear}`,\n};\n\nconst AddReviewModal: React.FC<AddReviewModalProps> = ({\n  code,\n  modId,\n  updateReviews,\n  updateModule,\n  isModalVisible,\n  setModalVisibility,\n  reviewByUser,\n  ratingsByUser,\n}) => {\n  const initialReview = reviewByUser ?? initialReviewState;\n\n  const [text, setText] = useState(initialReview.text);\n  const [difficulty, setDifficulty] = useState(\n    3\n  );\n  const [ratings, setRatings] = useState(initialReview.rating?.star?.value);\n  const [semester, setSemester] = useState(initialReview.semesterTaken);\n  const [year, setYear] = useState(initialReview.acadYearTaken);\n  const [submitText, setSubmitText] = useState(\"Submit\");\n  const [submitColor, setSubmitColor] = useState(submitBlue);\n  const userId = useSelector((state) => state.auth.user?._id);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\n        \"You have forgotten to fill in at least one of the fields. Once done click this button!\"\n      );\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    const requestBody = {\n      text,\n      semesterTaken: semester,\n      acadYearTaken: year as string,\n      modId,\n      userId,\n      ratings: [\n        {\n          type: \"difficulty\",\n          value: difficulty,\n        },\n        {\n          type: \"star\",\n          value: ratings,\n        },\n      ],\n    };\n\n    if (reviewByUser) {\n      await reviewApi.updateReviewOfModule(requestBody, reviewByUser._id);\n      // update ratings\n    } else {\n      await reviewApi.addReviewOfModule(requestBody);\n      // add ratings\n      // await reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\", );\n      // await reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\", );\n    }\n\n    setModalVisibility(false);\n    updateReviews();\n    updateModule();\n  };\n\n  const validateForm = () => ratings !== 0 && difficulty !== 0 && text !== \"\";\n\n  const closeModal = (isToClose) => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return (\n    <FormModal\n      backgroundColor={reviewBlue}\n      submitColor={submitColor}\n      title={`${reviewByUser ? \"Edit\" : \"Add\"} Review`}\n      isModalVisible={isModalVisible}\n      setModalVisibility={closeModal}\n      onSubmit={onSubmit}\n      submitText={submitText}\n    >\n      <FormModalItem label=\"Module Code\" type=\"text\" value={code} />\n      <FormModalItem\n        label=\"Review\"\n        type=\"textarea\"\n        value={text}\n        setValue={setText}\n      />\n      <FormModalItem\n        label=\"Year Taken\"\n        type=\"annualYear\"\n        value={year}\n        setValue={setYear}\n      />\n      <FormModalItem\n        label=\"Semester Taken\"\n        type=\"semester\"\n        value={semester}\n        setValue={setSemester}\n      />\n      <FormModalItem\n        label=\"Difficulty\"\n        type=\"difficulty\"\n        value={difficulty}\n        setValue={setDifficulty}\n      />\n      <FormModalItem\n        label=\"Ratings\"\n        type=\"rate\"\n        value={ratings}\n        setValue={setRatings}\n      />\n    </FormModal>\n  );\n};\n\nexport default AddReviewModal;\n"]},"metadata":{},"sourceType":"module"}