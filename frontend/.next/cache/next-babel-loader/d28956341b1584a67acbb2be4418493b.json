{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { wrapper } from \"../redux/store\";\nimport authService from \"../utils/authentication\";\nimport { updatePersonalBookmarks, updatePersonalReviews, updatedPersonalPlannedModules } from \"../utils/helpers\";\nimport schoolApi from \"../api/school\";\nimport { FETCH_SCHOOLS } from \"../redux/constants\";\nimport Head from \"next/head\";\nimport Modal from \"react-modal\";\nimport NavBar from \"../components/Navbar\";\nimport AddModuleModal from \"../components/AddModuleModal\";\n\nvar ReduxApp = function ReduxApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  Modal.setAppElement(\"#body\");\n\n  var _useState = useState(false),\n      isAddModuleModalVisible = _useState[0],\n      setAddModuleModalVisibility = _useState[1];\n\n  var dispatch = useDispatch();\n  var userId = useSelector(function (state) {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  useEffect(function () {\n    attemptLogin();\n    fetchAllSchools();\n  }, []); // Fetch all personal modules if user is logged in\n\n  useEffect(function () {\n    if (userId) {\n      updatePersonalBookmarks(userId);\n      updatePersonalReviews(userId);\n      updatedPersonalPlannedModules(userId);\n    }\n  }, [userId]);\n  /**\n   *  Attempt login if login details are stored\n   */\n\n  var attemptLogin = function attemptLogin() {\n    var email = window.localStorage.getItem(\"ROTTENMODS_EMAIL\");\n    var password = window.localStorage.getItem(\"ROTTENMODS_PASSWORD\");\n\n    if (email && password) {\n      authService.logIn({\n        emailaddress: email,\n        password: password\n      });\n    }\n  };\n  /**\n   * Fetch all available schools\n   */\n\n\n  var fetchAllSchools = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var schools;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return schoolApi.searchSchools(\"\");\n\n            case 2:\n              schools = _context.sent;\n              dispatch({\n                type: FETCH_SCHOOLS,\n                payload: schools\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchAllSchools() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"RottenMods\")), __jsx(\"div\", {\n    id: \"body\",\n    style: styles.layout\n  }, __jsx(\"div\", {\n    style: styles.container\n  }, __jsx(NavBar, {\n    setAddModuleModalVisibility: setAddModuleModalVisibility\n  }), __jsx(Component, pageProps), __jsx(AddModuleModal, {\n    isModalVisible: isAddModuleModalVisible,\n    setModalVisibility: setAddModuleModalVisibility\n  }))));\n};\n\nvar styles = {\n  layout: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  container: {\n    padding: \"0px 80px 80px 80px\",\n    width: \"100vw\",\n    maxWidth: 1280,\n    overflowX: \"hidden\"\n  }\n};\nexport default wrapper.withRedux(ReduxApp);","map":null,"metadata":{},"sourceType":"module"}