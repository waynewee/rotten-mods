{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport reviewApi from \"../api/review\";\nimport { fetchRatings } from \"../utils/helpers\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\nvar today = new Date();\nvar currentYear = today.getFullYear();\nvar currentMonth = today.getMonth();\nvar yearShortform = currentYear % 2000; // eg. 2021 => 21\n\nvar currentSemester = currentMonth < 6 ? 2 : 1;\nvar currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nvar yearMinusOne = currentAYSecondYear - 1;\nvar initialReviewState = {\n  text: \"\",\n  ratingIds: [],\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: \"\".concat(yearMinusOne, \"/\").concat(currentAYSecondYear)\n};\n\nvar AddReviewModal = function AddReviewModal(_ref) {\n  var code = _ref.code,\n      modId = _ref.modId,\n      updateReviews = _ref.updateReviews,\n      updateModule = _ref.updateModule,\n      isModalVisible = _ref.isModalVisible,\n      setModalVisibility = _ref.setModalVisibility,\n      reviewByUser = _ref.reviewByUser,\n      ratingsByUser = _ref.ratingsByUser;\n  var initialReview = reviewByUser !== null && reviewByUser !== void 0 ? reviewByUser : initialReviewState;\n\n  var _useState = useState(initialReview.text),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useState2 = useState(3),\n      difficulty = _useState2[0],\n      setDifficulty = _useState2[1];\n\n  var _useState3 = useState(3),\n      ratings = _useState3[0],\n      setRatings = _useState3[1];\n\n  var _useState4 = useState(initialReview.semesterTaken),\n      semester = _useState4[0],\n      setSemester = _useState4[1];\n\n  var _useState5 = useState(initialReview.acadYearTaken),\n      year = _useState5[0],\n      setYear = _useState5[1];\n\n  var _useState6 = useState(\"Submit\"),\n      submitText = _useState6[0],\n      setSubmitText = _useState6[1];\n\n  var _useState7 = useState(submitBlue),\n      submitColor = _useState7[0],\n      setSubmitColor = _useState7[1];\n\n  var userId = useSelector(function (state) {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  useEffect(function () {\n    var ratingIds = reviewByUser === null || reviewByUser === void 0 ? void 0 : reviewByUser.ratingIds;\n\n    if ((ratingIds === null || ratingIds === void 0 ? void 0 : ratingIds.length) > 0) {\n      fetchRatings(ratingIds, setRatings, setDifficulty);\n    }\n  }, []);\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var requestBody;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (validateForm()) {\n                _context.next = 4;\n                break;\n              }\n\n              setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n              setSubmitColor(crossRed);\n              return _context.abrupt(\"return\");\n\n            case 4:\n              requestBody = {\n                text: text,\n                semesterTaken: semester,\n                acadYearTaken: year,\n                modId: modId,\n                userId: userId,\n                ratings: [{\n                  type: \"difficulty\",\n                  value: difficulty\n                }, {\n                  type: \"star\",\n                  value: ratings\n                }]\n              };\n\n              if (!reviewByUser) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return reviewApi.updateReviewOfModule(requestBody, reviewByUser._id);\n\n            case 8:\n              updateReviews(); // update ratings\n\n              _context.next = 16;\n              break;\n\n            case 11:\n              if (!ratingsByUser) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 14;\n              return reviewApi.deleteRating(ratingsByUser._id);\n\n            case 14:\n              _context.next = 16;\n              return reviewApi.addReviewOfModule(requestBody);\n\n            case 16:\n              setModalVisibility(false);\n              updateReviews();\n              updateModule();\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var validateForm = function validateForm() {\n    return ratings !== 0 && difficulty !== 0 && text !== \"\";\n  };\n\n  var closeModal = function closeModal(isToClose) {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    backgroundColor: reviewBlue,\n    submitColor: submitColor,\n    title: \"\".concat(reviewByUser ? \"Edit\" : \"Add\", \" Review\"),\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    onSubmit: onSubmit,\n    submitText: submitText\n  }, __jsx(FormModalItem, {\n    label: \"Module Code\",\n    type: \"text\",\n    value: code\n  }), __jsx(FormModalItem, {\n    label: \"Review\",\n    type: \"textarea\",\n    value: text,\n    setValue: setText\n  }), __jsx(FormModalItem, {\n    label: \"Year Taken\",\n    type: \"annualYear\",\n    value: year,\n    setValue: setYear\n  }), __jsx(FormModalItem, {\n    label: \"Semester Taken\",\n    type: \"semester\",\n    value: semester,\n    setValue: setSemester\n  }), __jsx(FormModalItem, {\n    label: \"Difficulty\",\n    type: \"difficulty\",\n    value: difficulty,\n    setValue: setDifficulty\n  }), __jsx(FormModalItem, {\n    label: \"Ratings\",\n    type: \"rate\",\n    value: ratings,\n    setValue: setRatings\n  }));\n};\n\nexport default AddReviewModal;","map":null,"metadata":{},"sourceType":"module"}