{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/zhangxian/Desktop/RottenMods/frontend/components/AddReviewModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport reviewApi from \"../api/review\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\nvar today = new Date();\nvar currentYear = today.getFullYear();\nvar currentMonth = today.getMonth();\nvar yearShortform = currentYear % 2000; // eg. 2021 => 21\n\nvar currentSemester = currentMonth < 6 ? 2 : 1;\nvar currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nvar yearMinusOne = currentAYSecondYear - 1;\nvar initialReviewState = {\n  text: \"\",\n  rating: {\n    difficulty: 0,\n    star: 0\n  },\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: \"\".concat(yearMinusOne, \"/\").concat(currentAYSecondYear)\n};\n\nvar AddReviewModal = function AddReviewModal(_ref) {\n  _s();\n\n  var _initialReview$rating, _initialReview$rating2;\n\n  var code = _ref.code,\n      modId = _ref.modId,\n      updateReviews = _ref.updateReviews,\n      isModalVisible = _ref.isModalVisible,\n      setModalVisibility = _ref.setModalVisibility,\n      reviewByUser = _ref.reviewByUser;\n  var initialReview = reviewByUser !== null && reviewByUser !== void 0 ? reviewByUser : initialReviewState;\n\n  var _useState = useState(initialReview.text),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useState2 = useState((_initialReview$rating = initialReview.rating) === null || _initialReview$rating === void 0 ? void 0 : _initialReview$rating.difficulty),\n      difficulty = _useState2[0],\n      setDifficulty = _useState2[1];\n\n  var _useState3 = useState((_initialReview$rating2 = initialReview.rating) === null || _initialReview$rating2 === void 0 ? void 0 : _initialReview$rating2.star),\n      ratings = _useState3[0],\n      setRatings = _useState3[1];\n\n  var _useState4 = useState(initialReview.workload),\n      workload = _useState4[0],\n      setWorkload = _useState4[1];\n\n  var _useState5 = useState(initialReview.semesterTaken),\n      semester = _useState5[0],\n      setSemester = _useState5[1];\n\n  var _useState6 = useState(initialReview.acadYearTaken),\n      year = _useState6[0],\n      setYear = _useState6[1];\n\n  var _useState7 = useState(\"Submit\"),\n      submitText = _useState7[0],\n      setSubmitText = _useState7[1];\n\n  var _useState8 = useState(submitBlue),\n      submitColor = _useState8[0],\n      setSubmitColor = _useState8[1];\n\n  var userId = useSelector(function (state) {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var reviewToSubmit, reviewPromise, _reviewPromise, difficultyPromise, starPromise;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (validateForm()) {\n                _context.next = 4;\n                break;\n              }\n\n              setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n              setSubmitColor(crossRed);\n              return _context.abrupt(\"return\");\n\n            case 4:\n              reviewToSubmit = {\n                text: text,\n                semesterTaken: semester,\n                acadYearTaken: year,\n                workload: workload\n              };\n\n              if (!reviewByUser) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return reviewApi.updateReviewOfModule(reviewToSubmit, modId, userId, reviewByUser._id);\n\n            case 8:\n              reviewPromise = _context.sent;\n              _context.next = 16;\n              break;\n\n            case 11:\n              _reviewPromise = reviewApi.addReviewOfModule(reviewToSubmit, modId, userId);\n              difficultyPromise = reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\");\n              starPromise = reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\");\n              _context.next = 16;\n              return Promise.all([_reviewPromise, difficultyPromise, starPromise]);\n\n            case 16:\n              setModalVisibility(false);\n              updateReviews();\n              resetState();\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var validateForm = function validateForm() {\n    return ratings !== 0 && difficulty !== 0 && text !== \"\";\n  };\n\n  var resetState = function resetState() {\n    setText(\"\");\n    setDifficulty(1);\n    setRatings(1);\n    setWorkload(10);\n    setSemester(1);\n    setYear(\"\".concat(yearMinusOne, \"/\").concat(currentAYSecondYear));\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  var closeModal = function closeModal(isToClose) {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    backgroundColor: reviewBlue,\n    submitColor: submitColor,\n    title: \"\".concat(reviewByUser ? \"Edit\" : \"Add\", \" Review\"),\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    onSubmit: onSubmit,\n    submitText: submitText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, __jsx(FormModalItem, {\n    label: \"Module Code\",\n    type: \"text\",\n    value: code,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Review\",\n    type: \"textarea\",\n    value: text,\n    setValue: setText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Year Taken\",\n    type: \"annualYear\",\n    value: year,\n    setValue: setYear,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Semester Taken\",\n    type: \"semester\",\n    value: semester,\n    setValue: setSemester,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Difficulty\",\n    type: \"difficulty\",\n    value: difficulty,\n    setValue: setDifficulty,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Ratings\",\n    type: \"rate\",\n    value: ratings,\n    setValue: setRatings,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(AddReviewModal, \"b/JMnxVasljaRLmwxoi5EyMcSkk=\", false, function () {\n  return [useSelector];\n});\n\n_c = AddReviewModal;\nexport default AddReviewModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddReviewModal\");","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/components/AddReviewModal.tsx"],"names":["useState","useSelector","reviewApi","FormModal","FormModalItem","reviewBlue","submitBlue","crossRed","today","Date","currentYear","getFullYear","currentMonth","getMonth","yearShortform","currentSemester","currentAYSecondYear","yearMinusOne","initialReviewState","text","rating","difficulty","star","workload","semesterTaken","acadYearTaken","AddReviewModal","code","modId","updateReviews","isModalVisible","setModalVisibility","reviewByUser","initialReview","setText","setDifficulty","ratings","setRatings","setWorkload","semester","setSemester","year","setYear","submitText","setSubmitText","submitColor","setSubmitColor","userId","state","auth","user","_id","onSubmit","validateForm","reviewToSubmit","updateReviewOfModule","reviewPromise","addReviewOfModule","difficultyPromise","addRating","starPromise","Promise","all","resetState","closeModal","isToClose"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalState, Review } from \"../types\";\nimport reviewApi from \"../api/review\";\n\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\n\ninterface AddReviewModalProps extends ModalState {\n  code: string;\n  modId: string;\n  updateReviews: () => void;\n  reviewByUser: Review;\n}\n\nconst today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst yearShortform = currentYear % 2000; // eg. 2021 => 21\nconst currentSemester = currentMonth < 6 ? 2 : 1;\nconst currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nconst yearMinusOne = currentAYSecondYear - 1;\n\nconst initialReviewState = {\n  text: \"\",\n  rating: {\n    difficulty: 0,\n    star: 0\n  },\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: `${yearMinusOne}/${currentAYSecondYear}`\n}\n\nconst AddReviewModal: React.FC<AddReviewModalProps> = ({\n  code,\n  modId,\n  updateReviews,\n  isModalVisible,\n  setModalVisibility,\n  reviewByUser\n}) => {\n  const initialReview = reviewByUser ?? initialReviewState;\n\n  const [text, setText] = useState(initialReview.text);\n  const [difficulty, setDifficulty] = useState(initialReview.rating?.difficulty);\n  const [ratings, setRatings] = useState(initialReview.rating?.star);\n  const [workload, setWorkload] = useState(initialReview.workload);\n  const [semester, setSemester] = useState(initialReview.semesterTaken);\n  const [year, setYear] = useState(initialReview.acadYearTaken);\n  const [submitText, setSubmitText] = useState(\"Submit\");\n  const [submitColor, setSubmitColor] = useState(submitBlue);\n  const userId = useSelector(state => state.auth.user?._id);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    const reviewToSubmit = {\n      text,\n      semesterTaken: semester,\n      acadYearTaken: year as string,\n      workload\n    }\n\n    if (reviewByUser) {\n      const reviewPromise = await reviewApi.updateReviewOfModule(reviewToSubmit, modId, userId, reviewByUser._id);\n      // TODO: Wait for implementation of PUT Rating API\n      // const difficultyPromise = reviewApi.updateRatingOfModule(difficulty, \"difficulty\", userId, modId, \"mod\");\n      // const starPromise = reviewApi.updateRatingOfModule(ratings, \"star\", userId, modId, \"mod\");\n\n      // await Promise.all([reviewPromise, difficultyPromise, starPromise]);\n    } else {\n      const reviewPromise = reviewApi.addReviewOfModule(reviewToSubmit, modId, userId);\n      const difficultyPromise = reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\");\n      const starPromise = reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\");\n\n      await Promise.all([reviewPromise, difficultyPromise, starPromise]);\n    }\n\n    setModalVisibility(false);\n    updateReviews();\n    resetState();\n  }\n\n  const validateForm = () => ratings !== 0 && difficulty !== 0 && text !== \"\";\n\n  const resetState = () => {\n    setText(\"\");\n    setDifficulty(1);\n    setRatings(1);\n    setWorkload(10);\n    setSemester(1);\n    setYear(`${yearMinusOne}/${currentAYSecondYear}`);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  }\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  }\n\n  return (\n    <FormModal\n      backgroundColor={reviewBlue}\n      submitColor={submitColor}\n      title={`${reviewByUser ? \"Edit\" : \"Add\"} Review`}\n      isModalVisible={isModalVisible}\n      setModalVisibility={closeModal}\n      onSubmit={onSubmit}\n      submitText={submitText}\n    >\n      <FormModalItem label=\"Module Code\" type=\"text\" value={code} />\n      <FormModalItem label=\"Review\" type=\"textarea\" value={text} setValue={setText} />\n      <FormModalItem label=\"Year Taken\" type=\"annualYear\" value={year} setValue={setYear} />\n      <FormModalItem label=\"Semester Taken\" type=\"semester\" value={semester} setValue={setSemester} />\n      <FormModalItem label=\"Difficulty\" type=\"difficulty\" value={difficulty} setValue={setDifficulty} />\n      <FormModalItem label=\"Ratings\" type=\"rate\" value={ratings} setValue={setRatings} />\n      {/* <FormModalItem label=\"Expected Hours\" type=\"number\" value={workload} setValue={setWorkload} /> */}\n    </FormModal>\n  )\n}\n\nexport default AddReviewModal;"]},"metadata":{},"sourceType":"module"}