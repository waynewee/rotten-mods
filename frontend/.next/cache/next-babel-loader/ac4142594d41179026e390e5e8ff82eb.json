{"ast":null,"code":"var _jsxFileName = \"/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddRatingsModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport reviewApi from \"../api/review\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\n\nconst AddRatingsModal = ({\n  code,\n  modId,\n  ratingsByUser,\n  isModalVisible,\n  setModalVisibility,\n  updateModule,\n  checkIsRatedByUser\n}) => {\n  var _ratingsByUser$value;\n\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  const {\n    0: ratings,\n    1: setRatings\n  } = useState((_ratingsByUser$value = ratingsByUser === null || ratingsByUser === void 0 ? void 0 : ratingsByUser.value) !== null && _ratingsByUser$value !== void 0 ? _ratingsByUser$value : 3);\n  const {\n    0: submitText,\n    1: setSubmitText\n  } = useState(\"Submit\");\n  const {\n    0: submitColor,\n    1: setSubmitColor\n  } = useState(submitBlue);\n  useEffect(() => {\n    var _ratingsByUser$value2;\n\n    setRatings((_ratingsByUser$value2 = ratingsByUser === null || ratingsByUser === void 0 ? void 0 : ratingsByUser.value) !== null && _ratingsByUser$value2 !== void 0 ? _ratingsByUser$value2 : 0);\n  }, [ratingsByUser]);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You did not rate the module. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    if (ratingsByUser) {\n      await reviewApi.updateRating(ratings, \"star\", userId, modId, \"mod\", ratingsByUser._id);\n    } else {\n      await reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\");\n    }\n\n    updateModule();\n    setModalVisibility(false);\n  };\n\n  const validateForm = () => ratings !== 0;\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    backgroundColor: reviewBlue,\n    submitColor: submitColor,\n    title: \"Rate the Module\",\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    onSubmit: onSubmit,\n    submitText: submitText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(FormModalItem, {\n    label: \"Module Code\",\n    type: \"text\",\n    value: code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Ratings\",\n    type: \"rate\",\n    value: ratings,\n    setValue: setRatings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AddRatingsModal;","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddRatingsModal.tsx"],"names":["useState","useEffect","useSelector","reviewApi","FormModal","FormModalItem","reviewBlue","submitBlue","crossRed","AddRatingsModal","code","modId","ratingsByUser","isModalVisible","setModalVisibility","updateModule","checkIsRatedByUser","userId","state","auth","user","_id","ratings","setRatings","value","submitText","setSubmitText","submitColor","setSubmitColor","onSubmit","validateForm","updateRating","addRating","closeModal","isToClose"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalState } from \"../types\";\nimport reviewApi from \"../api/review\";\n\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\n\ninterface AddRatingsModalProps extends ModalState {\n  code: string;\n  modId: string;\n  ratingsByUser?: { value: number; _id: string };\n  updateModule: () => void;\n  checkIsRatedByUser: () => void;\n}\n\nconst AddRatingsModal: React.FC<AddRatingsModalProps> = ({\n  code,\n  modId,\n  ratingsByUser,\n  isModalVisible,\n  setModalVisibility,\n  updateModule,\n  checkIsRatedByUser\n}) => {\n  const userId = useSelector((state) => state.auth.user?._id);\n  const [ratings, setRatings] = useState(ratingsByUser?.value ?? 3);\n  const [submitText, setSubmitText] = useState(\"Submit\");\n  const [submitColor, setSubmitColor] = useState(submitBlue);\n\n  useEffect(() => {\n    setRatings(ratingsByUser?.value ?? 0);\n  }, [ratingsByUser]);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\n        \"You did not rate the module. Once done click this button!\"\n      );\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    if (ratingsByUser) {\n      await reviewApi.updateRating(\n        ratings,\n        \"star\",\n        userId,\n        modId,\n        \"mod\",\n        ratingsByUser._id\n      );\n    } else {\n      await reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\");\n    }\n\n    updateModule();\n    setModalVisibility(false);\n  };\n\n  const validateForm = (): boolean => ratings !== 0;\n\n  const closeModal = (isToClose) => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return (\n    <FormModal\n      backgroundColor={reviewBlue}\n      submitColor={submitColor}\n      title=\"Rate the Module\"\n      isModalVisible={isModalVisible}\n      setModalVisibility={closeModal}\n      onSubmit={onSubmit}\n      submitText={submitText}\n    >\n      <FormModalItem label=\"Module Code\" type=\"text\" value={code} />\n      <FormModalItem\n        label=\"Ratings\"\n        type=\"rate\"\n        value={ratings}\n        setValue={setRatings}\n      />\n    </FormModal>\n  );\n};\n\nexport default AddRatingsModal;\n"]},"metadata":{},"sourceType":"module"}