{"ast":null,"code":"var _jsxFileName = \"/Users/zhangxian/Desktop/RottenMods/frontend/components/EditProfileModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Modal, Button, Form, Input, Select } from \"antd\";\nimport { useState, useEffect } from \"react\";\nimport { message } from \"antd\";\nimport userApi from \"../api/user\";\nimport schoolApi from \"../api/school\";\nimport courseApi from \"../api/school\";\n\nconst EditProfileModal = ({\n  user,\n  toggleEditProfileModal\n}) => {\n  const {\n    0: inputSchoolValues,\n    1: setSchoolInputValues\n  } = useState([{\n    schoolId: \"\",\n    schoolName: \"\"\n  }]);\n  const {\n    0: inputCourseValues,\n    1: setInputCourseValues\n  } = useState([{\n    courseId: \"\",\n    courseName: \"\"\n  }]);\n  useEffect(() => {\n    populateSchools();\n    populateCourses();\n  }, []);\n\n  const populateSchools = () => {\n    schoolApi.getAllSchools().then(response => {\n      const schoolsInDatabase = response.data.map(obj => {\n        const universityValue = {\n          schoolId: \"\",\n          schoolName: \"\"\n        };\n        universityValue.schoolId = obj._id;\n        universityValue.schoolName = obj.name;\n        return universityValue;\n      });\n      setSchoolInputValues(schoolsInDatabase);\n      console.log(\"Now uni has these values\");\n    }).catch(error => console.log(error));\n  };\n\n  const populateCourses = () => {\n    courseApi.getAllSchools().then(response => {\n      const coursesInDatabase = response.data.map(obj => {\n        const course = {\n          courseId: \"\",\n          courseName: \"\"\n        };\n        course.courseId = obj._id;\n        course.courseName = obj.name;\n        return course;\n      });\n      setInputCourseValues(coursesInDatabase);\n    }).catch(error => console.log(error));\n  };\n\n  const onFormFinish = profileValues => {\n    const newUserDetails = {// \"name\" : profileValues.name,\n      // \"email\": user.email,\n      // \"password\": user.\n      // \"schoolId\": profileValues.s\n      // \"courseId\": \n      // \"currentYear\": 4\n    };\n    userApi.updateUser(newUserDetails).then(response => {\n      message.success(`Your profile has been updated successfully`);\n    }).catch(error => {\n      message.error(error);\n    });\n  };\n\n  return __jsx(Modal, {\n    visible: true,\n    title: __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }\n    }, \" SIGNUP \"),\n    centered: true,\n    onCancel: toggleEditProfileModal,\n    footer: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, __jsx(Form, {\n    name: \"normal_login\",\n    className: \"login-form\",\n    initialValues: {},\n    onFinish: onFormFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"fullname\",\n    label: \"Full Name\",\n    initialValue: user.fullName,\n    rules: [{\n      required: true,\n      message: \"Please enter your full name!\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"newYearOfStudy\",\n    label: \"Year of Study\",\n    initialValue: user.yearOfStudy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"newCourseName\",\n    label: \"Your Course\",\n    initialValue: user.courseName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"newSchoolName\",\n    label: \"Your University\",\n    initialValue: user.schoolName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, __jsx(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, inputSchoolValues.map(item => __jsx(Select.Option, {\n    key: item.schoolName,\n    value: item.schoolId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, item.schoolName)))), __jsx(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: styles.loginFormButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"SAVE PROFILE\"))));\n};\n\nconst styles = {\n  loginFormButton: {\n    width: \"100%\",\n    backgroundColor: \"#2D538C\"\n  }\n};\nexport default EditProfileModal;","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/components/EditProfileModal.tsx"],"names":["Modal","Button","Form","Input","Select","useState","useEffect","message","userApi","schoolApi","courseApi","EditProfileModal","user","toggleEditProfileModal","inputSchoolValues","setSchoolInputValues","schoolId","schoolName","inputCourseValues","setInputCourseValues","courseId","courseName","populateSchools","populateCourses","getAllSchools","then","response","schoolsInDatabase","data","map","obj","universityValue","_id","name","console","log","catch","error","coursesInDatabase","course","onFormFinish","profileValues","newUserDetails","updateUser","success","textAlign","fullName","required","yearOfStudy","item","styles","loginFormButton","width","backgroundColor"],"mappings":"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","sourcesContent":["import { Modal, Button, Form, Input, Select } from \"antd\";\nimport { MailOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { User } from \"../types\";\nimport { useState, useEffect, Dispatch, SetStateAction } from \"react\";\n\n\nimport { message } from \"antd\";\nimport userApi from \"../api/user\";\nimport schoolApi from \"../api/school\";\nimport courseApi from \"../api/school\";\n\n\n\n\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { codeBlue } from \"../styles/colors\";\nimport { ModalState } from \"../types\";\nimport school from \"../api/school\";\n\n\n\ninterface EditProfileModalProps{\n  user : User,\n  toggleEditProfileModal : () => void\n}\n\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({\n  user,\n  toggleEditProfileModal,\n}) => {\n  \n  const [inputSchoolValues, setSchoolInputValues] = useState([\n    { schoolId: \"\", schoolName: \"\" },\n  ]);\n  const [inputCourseValues, setInputCourseValues] = useState([\n    { courseId: \"\", courseName: \"\" },\n  ]);\n\n  useEffect(() => {\n    populateSchools();\n    populateCourses();\n  }, []);\n\n  const populateSchools = () => {\n    schoolApi.getAllSchools()\n      .then((response) => {\n        const schoolsInDatabase = response.data.map((obj) => {\n          const universityValue = { schoolId: \"\", schoolName: \"\" };\n          universityValue.schoolId = obj._id;\n          universityValue.schoolName = obj.name;\n          return universityValue;\n        });\n        setSchoolInputValues(schoolsInDatabase);\n        console.log(\"Now uni has these values\");\n      })\n      .catch(error => console.log(error));\n  }\n  const populateCourses = () => {\n    courseApi.getAllSchools()\n      .then((response) => {\n        const coursesInDatabase = response.data.map((obj) => {\n          const course = { courseId: \"\", courseName: \"\" };\n          course.courseId = obj._id;\n          course.courseName = obj.name;\n          return course;\n        });\n        setInputCourseValues(coursesInDatabase);\n      })\n      .catch(error => console.log(error));\n  }\n  \n\n  const onFormFinish = (profileValues) => {\n\n    const newUserDetails = {\n      // \"name\" : profileValues.name,\n      // \"email\": user.email,\n      // \"password\": user.\n      // \"schoolId\": profileValues.s\n      // \"courseId\": \n      // \"currentYear\": 4\n    }\n\n\n    userApi.updateUser(newUserDetails)\n      .then((response) => {\n        message.success(`Your profile has been updated successfully`);\n      })\n      .catch((error)=> {\n        message.error(error);\n      })\n  };\n\n  return (\n    <Modal\n        visible={true}\n        title={<div style={{ textAlign: \"center\" }}> SIGNUP </div>}\n        centered\n        onCancel={toggleEditProfileModal}\n        footer={null}\n      >\n        <Form\n          name=\"normal_login\"\n          className=\"login-form\"\n          initialValues={{}}\n          onFinish={onFormFinish}\n        >\n          <Form.Item\n            name=\"fullname\"\n            label=\"Full Name\"\n            initialValue={user.fullName}\n            rules={[\n              { required: true, message: \"Please enter your full name!\" },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            name=\"newYearOfStudy\"\n            label=\"Year of Study\"\n            initialValue={user.yearOfStudy}\n          >\n            <Input/>\n          </Form.Item>\n          <Form.Item\n            name=\"newCourseName\"\n            label=\"Your Course\"\n            initialValue={user.courseName}\n          >\n            <Input/>\n          </Form.Item>\n          <Form.Item\n            name=\"newSchoolName\"\n            label=\"Your University\"\n            initialValue={user.schoolName}\n          >\n            <Select>\n              {inputSchoolValues.map((item) => (\n                <Select.Option key={item.schoolName} value={item.schoolId}>\n                  {item.schoolName}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={styles.loginFormButton}\n            >\n              SAVE PROFILE\n           </Button>\n           </Form.Item>\n        </Form>\n\n    </Modal>\n  );\n};\n\nconst styles = {\n  loginFormButton: {\n    width: \"100%\",\n    backgroundColor: \"#2D538C\",\n  },\n};\n\nexport default EditProfileModal;\n"]},"metadata":{},"sourceType":"module"}