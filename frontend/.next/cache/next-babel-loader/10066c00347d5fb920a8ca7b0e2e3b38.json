{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport { serverDomain } from \"../config\";\nvar reviewBaseUrl = \"\".concat(serverDomain, \"/api/review\");\nvar ratingBaseUrl = \"\".concat(serverDomain, \"/api/rating\");\n\nvar getReviewsOfModule = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(modId) {\n    var limit,\n        page,\n        query,\n        response,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            limit = _args.length > 1 && _args[1] !== undefined ? _args[1] : 10;\n            page = _args.length > 2 && _args[2] !== undefined ? _args[2] : 1;\n            query = queryString.stringify({\n              modId: modId\n            });\n            _context.next = 5;\n            return axios.get(\"\".concat(reviewBaseUrl, \"/?\").concat(query));\n\n          case 5:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getReviewsOfModule(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getReviewsOfUser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userId) {\n    var query, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            query = queryString.stringify({\n              userId: userId\n            });\n            _context2.next = 3;\n            return axios.get(\"\".concat(reviewBaseUrl, \"/?\").concat(query), {\n              withCredentials: true\n            });\n\n          case 3:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getReviewsOfUser(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar addReviewOfModule = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(body) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios.post(reviewBaseUrl, body, {\n              withCredentials: true\n            });\n\n          case 2:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.status);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function addReviewOfModule(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar updateReviewOfModule = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(body, reviewId) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return axios.put(\"\".concat(reviewBaseUrl, \"/\").concat(reviewId), body, {\n              withCredentials: true\n            });\n\n          case 2:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response.status);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function updateReviewOfModule(_x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar addRating = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(value, type, userId, subId, sub) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return axios.post(ratingBaseUrl, {\n              type: type,\n              userId: userId,\n              subId: subId,\n              value: value,\n              sub: sub\n            }, {\n              withCredentials: true\n            });\n\n          case 2:\n            response = _context5.sent;\n            return _context5.abrupt(\"return\", response.status);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function addRating(_x6, _x7, _x8, _x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar getRatingById = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return axios.get(\"\".concat(ratingBaseUrl, \"/\").concat(id));\n\n          case 2:\n            response = _context6.sent;\n            return _context6.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function getRatingById(_x11) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar getRating = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(subscriberType, subscriberId, userId, ratingType) {\n    var query, response;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            query = queryString.stringify({\n              sub: subscriberType,\n              subId: subscriberId,\n              userId: userId,\n              type: ratingType\n            });\n            _context7.next = 3;\n            return axios.get(\"\".concat(ratingBaseUrl, \"/?\").concat(query));\n\n          case 3:\n            response = _context7.sent;\n            return _context7.abrupt(\"return\", response.data);\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function getRating(_x12, _x13, _x14, _x15) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar updateRating = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(value, type, userId, subId, sub, ratingId) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return axios.put(\"\".concat(ratingBaseUrl, \"/\").concat(ratingId), {\n              sub: sub,\n              subId: subId,\n              userId: userId,\n              type: type,\n              value: value\n            }, {\n              withCredentials: true\n            });\n\n          case 2:\n            response = _context8.sent;\n            return _context8.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function updateRating(_x16, _x17, _x18, _x19, _x20, _x21) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar deleteRating = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(id) {\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return axios[\"delete\"](\"\");\n\n          case 2:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function deleteRating(_x22) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\nexport default {\n  getReviewsOfModule: getReviewsOfModule,\n  getReviewsOfUser: getReviewsOfUser,\n  addReviewOfModule: addReviewOfModule,\n  addRating: addRating,\n  getRatingById: getRatingById,\n  getRating: getRating,\n  updateRating: updateRating,\n  updateReviewOfModule: updateReviewOfModule,\n  deleteRating: deleteRating\n};","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/api/review.ts"],"names":["axios","queryString","serverDomain","reviewBaseUrl","ratingBaseUrl","getReviewsOfModule","modId","limit","page","query","stringify","get","response","data","getReviewsOfUser","userId","withCredentials","addReviewOfModule","body","post","status","updateReviewOfModule","reviewId","put","addRating","value","type","subId","sub","getRatingById","id","getRating","subscriberType","subscriberId","ratingType","updateRating","ratingId","deleteRating"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport queryString from \"query-string\";\nimport { serverDomain } from \"../config\";\nimport { Rating } from \"../types\";\n\nconst reviewBaseUrl = `${serverDomain}/api/review`;\nconst ratingBaseUrl = `${serverDomain}/api/rating`;\n\ninterface RatingInReview {\n  type: string;\n  value: number;\n}\n\ninterface ReviewToSubmit {\n  text: string;\n  semesterTaken: number;\n  acadYearTaken: string;\n  modId: string;\n  userId: string;\n  ratings: RatingInReview[];\n}\n\nconst getReviewsOfModule = async (\n  modId: string,\n  limit: number = 10,\n  page: number = 1\n) => {\n  const query = queryString.stringify({ modId });\n  const response = await axios.get(`${reviewBaseUrl}/?${query}`);\n  return response.data;\n};\n\nconst getReviewsOfUser = async (userId: string) => {\n  const query = queryString.stringify({ userId });\n  const response = await axios.get(`${reviewBaseUrl}/?${query}`, {\n    withCredentials: true,\n  });\n  return response.data;\n};\n\nconst addReviewOfModule = async (body: ReviewToSubmit) => {\n  const response = await axios.post(reviewBaseUrl, body, {\n    withCredentials: true,\n  });\n\n  return response.status;\n};\n\nconst updateReviewOfModule = async (body: ReviewToSubmit, reviewId: string) => {\n  const response = await axios.put(`${reviewBaseUrl}/${reviewId}`, body, {\n    withCredentials: true,\n  });\n\n  return response.status;\n};\n\nconst addRating = async (\n  value: number,\n  type: \"difficulty\" | \"star\",\n  userId: string,\n  subId: string,\n  sub: \"mod\" | \"school\" | \"course\"\n) => {\n  const response = await axios.post(\n    ratingBaseUrl,\n    {\n      type,\n      userId,\n      subId,\n      value,\n      sub,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n\n  return response.status;\n};\n\nconst getRatingById = async (id: string) => {\n  const response = await axios.get(`${ratingBaseUrl}/${id}`);\n  return response.data;\n};\n\nconst getRating = async (subscriberType, subscriberId, userId, ratingType) => {\n  const query = queryString.stringify({\n    sub: subscriberType,\n    subId: subscriberId,\n    userId,\n    type: ratingType,\n  });\n  const response = await axios.get(`${ratingBaseUrl}/?${query}`);\n  return response.data;\n};\n\nconst updateRating = async (\n  value: number,\n  type: \"difficulty\" | \"star\",\n  userId: string,\n  subId: string,\n  sub: \"mod\" | \"school\" | \"course\",\n  ratingId: string\n) => {\n  const response = await axios.put(\n    `${ratingBaseUrl}/${ratingId}`,\n    {\n      sub,\n      subId,\n      userId,\n      type,\n      value,\n    },\n    { withCredentials: true }\n  );\n  return response.data;\n};\n\nconst deleteRating = async (id) => {\n  await axios.delete(``)\n}\n\nexport default {\n  getReviewsOfModule,\n  getReviewsOfUser,\n  addReviewOfModule,\n  addRating,\n  getRatingById,\n  getRating,\n  updateRating,\n  updateReviewOfModule,\n  deleteRating\n};\n"]},"metadata":{},"sourceType":"module"}