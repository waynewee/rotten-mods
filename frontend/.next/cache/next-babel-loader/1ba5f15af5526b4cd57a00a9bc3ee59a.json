{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar baseUrl = \"http://localhost:8080/api/planned-mod\";\n\nvar addPlannedMod = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userId, modId, semester) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.post(baseUrl, {\n              userId: userId,\n              modId: modId,\n              semester: semester\n            }, {\n              withCredentials: true\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addPlannedMod(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar updatePlannedMod = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(plannedModId, userId, modId, semester) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.put(\"\".concat(baseUrl, \"/\").concat(plannedModId), {\n              userId: userId,\n              modId: modId,\n              semester: semester\n            }, {\n              withCredentials: true\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function updatePlannedMod(_x4, _x5, _x6, _x7) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar removePlannedMod = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(plannedModId) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios[\"delete\"](\"\".concat(baseUrl, \"/\").concat(plannedModId), {\n              withCredentials: true\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function removePlannedMod(_x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar fetchPlannedMods = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(userId) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return axios.get(\"\".concat(baseUrl, \"/user/\").concat(userId), {\n              withCredentials: true\n            });\n\n          case 2:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function fetchPlannedMods(_x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexport default {\n  addPlannedMod: addPlannedMod,\n  removePlannedMod: removePlannedMod,\n  fetchPlannedMods: fetchPlannedMods,\n  updatePlannedMod: updatePlannedMod\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/api/planned-mod.ts"],"names":["axios","baseUrl","addPlannedMod","userId","modId","semester","post","withCredentials","updatePlannedMod","plannedModId","put","removePlannedMod","fetchPlannedMods","get","response","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,OAAO,GAAG,uCAAhB;;AAEA,IAAMC,aAAa;AAAA,sEAAG,iBAAOC,MAAP,EAAeC,KAAf,EAAsBC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdL,KAAK,CAACM,IAAN,CACJL,OADI,EAEJ;AACEE,cAAAA,MAAM,EAANA,MADF;AAEEC,cAAAA,KAAK,EAALA,KAFF;AAGEC,cAAAA,QAAQ,EAARA;AAHF,aAFI,EAOJ;AACEE,cAAAA,eAAe,EAAE;AADnB,aAPI,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbL,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAcA,IAAMM,gBAAgB;AAAA,uEAAG,kBAAOC,YAAP,EAAqBN,MAArB,EAA6BC,KAA7B,EAAoCC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjBL,KAAK,CAACU,GAAN,WACDT,OADC,cACUQ,YADV,GAEJ;AACEN,cAAAA,MAAM,EAANA,MADF;AAEEC,cAAAA,KAAK,EAALA,KAFF;AAGEC,cAAAA,QAAQ,EAARA;AAHF,aAFI,EAOJ;AACEE,cAAAA,eAAe,EAAE;AADnB,aAPI,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBC,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAcA,IAAMG,gBAAgB;AAAA,uEAAG,kBAAOF,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjBT,KAAK,UAAL,WAAgBC,OAAhB,cAA2BQ,YAA3B,GAA2C;AAC/CF,cAAAA,eAAe,EAAE;AAD8B,aAA3C,CADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBI,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAMA,IAAMC,gBAAgB;AAAA,uEAAG,kBAAOT,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAH,KAAK,CAACa,GAAN,WAAaZ,OAAb,mBAA6BE,MAA7B,GAAuC;AAC5DI,cAAAA,eAAe,EAAE;AAD2C,aAAvC,CADA;;AAAA;AACjBO,YAAAA,QADiB;AAAA,8CAKhBA,QAAQ,CAACC,IALO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBH,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAQA,eAAe;AACbV,EAAAA,aAAa,EAAbA,aADa;AAEbS,EAAAA,gBAAgB,EAAhBA,gBAFa;AAGbC,EAAAA,gBAAgB,EAAhBA,gBAHa;AAIbJ,EAAAA,gBAAgB,EAAhBA;AAJa,CAAf","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"http://localhost:8080/api/planned-mod\";\n\nconst addPlannedMod = async (userId, modId, semester) => {\n  await axios.post(\n    baseUrl,\n    {\n      userId,\n      modId,\n      semester,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n};\n\nconst updatePlannedMod = async (plannedModId, userId, modId, semester) => {\n  await axios.put(\n    `${baseUrl}/${plannedModId}`,\n    {\n      userId,\n      modId,\n      semester,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n};\n\nconst removePlannedMod = async (plannedModId) => {\n  await axios.delete(`${baseUrl}/${plannedModId}`, {\n    withCredentials: true,\n  });\n};\n\nconst fetchPlannedMods = async (userId) => {\n  const response = await axios.get(`${baseUrl}/user/${userId}`, {\n    withCredentials: true,\n  });\n\n  return response.data;\n};\n\nexport default {\n  addPlannedMod,\n  removePlannedMod,\n  fetchPlannedMods,\n  updatePlannedMod,\n};\n"]},"metadata":{},"sourceType":"module"}