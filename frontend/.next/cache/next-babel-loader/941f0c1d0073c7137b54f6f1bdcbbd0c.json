{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport queryString from \"query-string\";\nimport { serverDomain } from \"../config\";\nvar baseUrl = \"\".concat(serverDomain, \"/api/reply\");\n\nvar addComment = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userId, text, reviewId) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.post(baseUrl, {\n              userId: userId,\n              text: text,\n              reviewId: reviewId\n            }, {\n              withCredentials: true\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addComment(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getCommentsOfReview = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(reviewId) {\n    var query, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            query = queryString.stringify({\n              reviewId: reviewId\n            });\n            _context2.next = 3;\n            return axios.get(\"\".concat(baseUrl, \"/?\").concat(query));\n\n          case 3:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getCommentsOfReview(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default {\n  addComment: addComment,\n  getCommentsOfReview: getCommentsOfReview\n};","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/api/comment.ts"],"names":["axios","queryString","serverDomain","baseUrl","addComment","userId","text","reviewId","post","withCredentials","getCommentsOfReview","query","stringify","get","response","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,IAAMC,OAAO,aAAMD,YAAN,eAAb;;AAEA,IAAME,UAAU;AAAA,sEAAG,iBAAOC,MAAP,EAAuBC,IAAvB,EAAqCC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXP,KAAK,CAACQ,IAAN,CACJL,OADI,EAEJ;AACEE,cAAAA,MAAM,EAANA,MADF;AAEEC,cAAAA,IAAI,EAAJA,IAFF;AAGEC,cAAAA,QAAQ,EAARA;AAHF,aAFI,EAOJ;AACEE,cAAAA,eAAe,EAAE;AADnB,aAPI,CADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVL,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAcA,IAAMM,mBAAmB;AAAA,uEAAG,kBAAOH,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBI,YAAAA,KADoB,GACZV,WAAW,CAACW,SAAZ,CAAsB;AAAEL,cAAAA,QAAQ,EAARA;AAAF,aAAtB,CADY;AAAA;AAAA,mBAEHP,KAAK,CAACa,GAAN,WAAaV,OAAb,eAAyBQ,KAAzB,EAFG;;AAAA;AAEpBG,YAAAA,QAFoB;AAAA,8CAGnBA,QAAQ,CAACC,IAHU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBL,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;AAMA,eAAe;AACbN,EAAAA,UAAU,EAAVA,UADa;AAEbM,EAAAA,mBAAmB,EAAnBA;AAFa,CAAf","sourcesContent":["import axios from \"axios\";\nimport queryString from \"query-string\";\nimport { serverDomain } from \"../config\";\n\nconst baseUrl = `${serverDomain}/api/reply`;\n\nconst addComment = async (userId: string, text: string, reviewId: string) => {\n  await axios.post(\n    baseUrl,\n    {\n      userId,\n      text,\n      reviewId,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n};\n\nconst getCommentsOfReview = async (reviewId) => {\n  const query = queryString.stringify({ reviewId })\n  const response = await axios.get(`${baseUrl}/?${query}`);\n  return response.data;\n};\n\nexport default {\n  addComment,\n  getCommentsOfReview,\n};\n"]},"metadata":{},"sourceType":"module"}