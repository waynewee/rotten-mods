{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { FETCH_BOOKMARKS, FETCH_PLANNED_MODS, FETCH_PERSONAL_REVIEWS } from \"../redux/constants\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nexport var updatePersonalBookmarks = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (userId) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return bookmarkApi.getBookmarks(userId);\n\n          case 4:\n            data = _context.sent;\n            store.dispatch({\n              type: FETCH_BOOKMARKS,\n              payload: data\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function updatePersonalBookmarks(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updatedPersonalPlannedModules = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (userId) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return plannedModApi.fetchPlannedMods(userId);\n\n          case 4:\n            data = _context2.sent;\n            store.dispatch({\n              type: FETCH_PLANNED_MODS,\n              payload: data\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function updatedPersonalPlannedModules(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var updatePersonalReviews = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (userId) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            _context3.next = 4;\n            return reviewApi.getReviewsOfUser(userId);\n\n          case 4:\n            data = _context3.sent;\n            store.dispatch({\n              type: FETCH_PERSONAL_REVIEWS,\n              payload: data\n            });\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function updatePersonalReviews(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var triggerRequireLoginMessage = function triggerRequireLoginMessage() {\n  message.warning(\"You need to login first!\");\n};\nexport var fetchRatings = function fetchRatings(ratingIds, setStar, setDifficulty) {\n  ratingIds.forEach( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n      var rating;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return reviewApi.getRatingById(id);\n\n            case 2:\n              rating = _context4.sent;\n\n              if (rating.type == \"star\") {\n                setStar(rating.value);\n              } else if (rating.type == \"difficulty\") {\n                setDifficulty(rating.value);\n              }\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/utils/helpers.ts"],"names":["bookmarkApi","plannedModApi","reviewApi","FETCH_BOOKMARKS","FETCH_PLANNED_MODS","FETCH_PERSONAL_REVIEWS","store","message","updatePersonalBookmarks","userId","getBookmarks","data","dispatch","type","payload","updatedPersonalPlannedModules","fetchPlannedMods","updatePersonalReviews","getReviewsOfUser","triggerRequireLoginMessage","warning","fetchRatings","ratingIds","setStar","setDifficulty","forEach","id","getRatingById","rating","value"],"mappings":";;AACA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SACEC,eADF,EAEEC,kBAFF,EAGEC,sBAHF,QAIO,oBAJP;AAKA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,OAAO,IAAMC,uBAAuB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAChCA,MADgC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGlBT,WAAW,CAACU,YAAZ,CAAyBD,MAAzB,CAHkB;;AAAA;AAG/BE,YAAAA,IAH+B;AAIrCL,YAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,cAAAA,IAAI,EAAEV,eADO;AAEbW,cAAAA,OAAO,EAAEH;AAFI,aAAf;;AAJqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBH,uBAAuB;AAAA;AAAA;AAAA,GAA7B;AAUP,OAAO,IAAMO,6BAA6B;AAAA,uEAAG,kBAAON,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACtCA,MADsC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGxBR,aAAa,CAACe,gBAAd,CAA+BP,MAA/B,CAHwB;;AAAA;AAGrCE,YAAAA,IAHqC;AAI3CL,YAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,cAAAA,IAAI,EAAET,kBADO;AAEbU,cAAAA,OAAO,EAAEH;AAFI,aAAf;;AAJ2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA7BI,6BAA6B;AAAA;AAAA;AAAA,GAAnC;AAUP,OAAO,IAAME,qBAAqB;AAAA,uEAAG,kBAAOR,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC9BA,MAD8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGhBP,SAAS,CAACgB,gBAAV,CAA2BT,MAA3B,CAHgB;;AAAA;AAG7BE,YAAAA,IAH6B;AAInCL,YAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,cAAAA,IAAI,EAAER,sBADO;AAEbS,cAAAA,OAAO,EAAEH;AAFI,aAAf;;AAJmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBM,qBAAqB;AAAA;AAAA;AAAA,GAA3B;AAUP,OAAO,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AAC9CZ,EAAAA,OAAO,CAACa,OAAR,CAAgB,0BAAhB;AACD,CAFM;AAIP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAsBC,OAAtB,EAAgEC,aAAhE,EAAwF;AAClHF,EAAAA,SAAS,CAACG,OAAV;AAAA,yEAAkB,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKxB,SAAS,CAACyB,aAAV,CAAwBD,EAAxB,CADL;;AAAA;AACVE,cAAAA,MADU;;AAEhB,kBAAIA,MAAM,CAACf,IAAP,IAAe,MAAnB,EAA2B;AACzBU,gBAAAA,OAAO,CAACK,MAAM,CAACC,KAAR,CAAP;AACD,eAFD,MAEO,IAAID,MAAM,CAACf,IAAP,IAAe,YAAnB,EAAiC;AACtCW,gBAAAA,aAAa,CAACI,MAAM,CAACC,KAAR,CAAb;AACD;;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA;AAQD,CATM","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport {\n  FETCH_BOOKMARKS,\n  FETCH_PLANNED_MODS,\n  FETCH_PERSONAL_REVIEWS,\n} from \"../redux/constants\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\n\nexport const updatePersonalBookmarks = async (userId) => {\n  if (!userId) return;\n\n  const data = await bookmarkApi.getBookmarks(userId);\n  store.dispatch({\n    type: FETCH_BOOKMARKS,\n    payload: data,\n  });\n};\n\nexport const updatedPersonalPlannedModules = async (userId) => {\n  if (!userId) return;\n\n  const data = await plannedModApi.fetchPlannedMods(userId);\n  store.dispatch({\n    type: FETCH_PLANNED_MODS,\n    payload: data,\n  });\n};\n\nexport const updatePersonalReviews = async (userId) => {\n  if (!userId) return;\n\n  const data = await reviewApi.getReviewsOfUser(userId);\n  store.dispatch({\n    type: FETCH_PERSONAL_REVIEWS,\n    payload: data,\n  });\n};\n\nexport const triggerRequireLoginMessage = () => {\n  message.warning(\"You need to login first!\");\n};\n\nexport const fetchRatings = (ratingIds: string[], setStar: Dispatch<SetStateAction<nuber>>, setDifficulty): void => {\n  ratingIds.forEach(async (id) => {\n    const rating = await reviewApi.getRatingById(id);\n    if (rating.type == \"star\") {\n      setStar(rating.value);\n    } else if (rating.type == \"difficulty\") {\n      setDifficulty(rating.value);\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}