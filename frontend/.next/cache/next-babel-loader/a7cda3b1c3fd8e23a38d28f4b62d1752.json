{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport moduleApi from \"../api/module\";\nimport reviewApi from \"../api/review\";\nimport eventApi from \"../api/event\";\nimport AddReviewModal from \"../components/AddReviewModal\";\nimport AddRatingsModal from \"../components/AddRatingsModal\";\nimport { Dropdown, Menu } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport ModuleInformation from \"../components/ModuleInformation\";\nimport ReviewList from \"../components/ReviewList\";\nimport Button from \"../components/Button\";\nimport SeeMoreButton from \"../components/SeeMoreButton\";\n\nconst compareNewest = (firstReview, secondReview) => {\n  const firstReviewCreatedAtDate = new Date(firstReview.createdAt);\n  const secondReviewCreatedAtDate = new Date(secondReview.createdAt);\n  return firstReviewCreatedAtDate < secondReviewCreatedAtDate ? 1 : -1;\n};\n\nconst ModuleReviewPage = ({\n  initialModule,\n  reviews\n}) => {\n  const {\n    0: module,\n    1: setModule\n  } = useState(initialModule);\n  const {\n    0: reviewsList,\n    1: setReviewsList\n  } = useState(reviews);\n  const {\n    0: numberOfReviews,\n    1: setNumberOfReviews\n  } = useState(20);\n  const {\n    0: isAddReviewModalVisible,\n    1: setAddReviewModalVisibility\n  } = useState(false);\n  const {\n    0: isAddRatingsModalVisible,\n    1: setAddRatingsModalVisibility\n  } = useState(false);\n  const {\n    0: ratingsByUser,\n    1: setRatingsByUser\n  } = useState(null);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  const reviewByUser = reviewsList.find(review => review.userId === userId); // Analytics\n\n  useEffect(() => {\n    checkIsRatedByUser();\n    eventApi.addEvent(userId, \"mod\", module._id, \"view\");\n  }, []);\n\n  const updateReviews = async () => {\n    const newReviews = await reviewApi.getReviewsOfModule(module._id);\n    setReviewsList(newReviews);\n  };\n\n  const updateModule = async () => {\n    const updatedModule = await moduleApi.getModule(module._id);\n    updatedModule.prereqs = module.prereqs;\n    setModule(updatedModule);\n  };\n\n  const checkIsRatedByUser = async () => {\n    try {\n      const rating = await reviewApi.getRating(\"mod\", module._id, userId, \"star\");\n      setRatingsByUser(rating);\n    } catch (err) {\n      setRatingsByUser(null);\n    }\n  };\n\n  const compareOldest = (firstReview, secondReview) => {\n    const firstReviewCreatedAtDate = new Date(firstReview.createdAt);\n    const secondReviewCreatedAtDate = new Date(secondReview.createdAt);\n    return firstReviewCreatedAtDate > secondReviewCreatedAtDate ? 1 : -1;\n  };\n\n  const compareLikes = (firstReview, secondReview) => {\n    var _firstReview$reaction, _firstReview$reaction2, _firstReview$reaction3, _secondReview$reactio, _secondReview$reactio2, _secondReview$reactio3;\n\n    const firstReviewLikes = (_firstReview$reaction = (_firstReview$reaction2 = firstReview.reaction) === null || _firstReview$reaction2 === void 0 ? void 0 : (_firstReview$reaction3 = _firstReview$reaction2.like) === null || _firstReview$reaction3 === void 0 ? void 0 : _firstReview$reaction3.count) !== null && _firstReview$reaction !== void 0 ? _firstReview$reaction : 0;\n    const secondReviewLikes = (_secondReview$reactio = (_secondReview$reactio2 = secondReview.reaction) === null || _secondReview$reactio2 === void 0 ? void 0 : (_secondReview$reactio3 = _secondReview$reactio2.like) === null || _secondReview$reactio3 === void 0 ? void 0 : _secondReview$reactio3.count) !== null && _secondReview$reactio !== void 0 ? _secondReview$reactio : 0;\n    return secondReviewLikes - firstReviewLikes;\n  };\n\n  const sortReviews = compareFunction => {\n    const cloneReviews = reviewsList.concat([]);\n    cloneReviews.sort(compareFunction);\n    setReviewsList(cloneReviews);\n  };\n\n  const fetchMoreReviews = async () => {\n    const moreReviews = await reviewApi.getReviewsOfModule(module._id);\n    setReviewsList(moreReviews);\n    setNumberOfReviews(numberOfReviews + 10);\n  };\n\n  const menu = __jsx(Menu, null, __jsx(Menu.Item, null, __jsx(Button, {\n    onClick: () => sortReviews(compareNewest)\n  }, \"Newest\")), __jsx(Menu.Item, null, __jsx(Button, {\n    onClick: () => sortReviews(compareOldest)\n  }, \"Oldest\")), __jsx(Menu.Item, null, __jsx(Button, {\n    onClick: () => sortReviews(compareLikes)\n  }, \"Most Likes\")));\n\n  const renderPage = () => {\n    return module ? __jsx(React.Fragment, null, __jsx(ModuleInformation, {\n      module: module,\n      setAddReviewModalVisibility: setAddReviewModalVisibility,\n      setAddRatingsModalVisibility: setAddRatingsModalVisibility\n    }), __jsx(\"div\", {\n      style: styles.reviewsHeader\n    }, __jsx(\"span\", {\n      style: styles.reviewsHeaderTitle\n    }, \"Reviews\"), __jsx(Dropdown, {\n      overlay: menu\n    }, __jsx(\"div\", {\n      style: {\n        marginRight: 20\n      }\n    }, __jsx(\"a\", {\n      style: {\n        color: \"#595959\",\n        marginRight: 6,\n        fontSize: 18\n      }\n    }, \"Sort\"), __jsx(DownOutlined, null)))), __jsx(ReviewList, {\n      updateReviews: updateReviews,\n      reviews: reviewsList\n    }), reviewsList.length >= 10 && __jsx(SeeMoreButton, {\n      fetchMoreData: fetchMoreReviews\n    }), __jsx(AddReviewModal, {\n      code: module.code,\n      modId: module._id,\n      updateReviews: updateReviews,\n      isModalVisible: isAddReviewModalVisible,\n      setModalVisibility: setAddReviewModalVisibility,\n      reviewByUser: reviewByUser,\n      updateModule: updateModule,\n      ratingsByUser: ratingsByUser\n    }), __jsx(AddRatingsModal, {\n      code: module.code,\n      modId: module._id,\n      isModalVisible: isAddRatingsModalVisible,\n      setModalVisibility: setAddRatingsModalVisibility,\n      ratingsByUser: ratingsByUser,\n      updateModule: updateModule\n    })) : __jsx(\"div\", {\n      style: styles.moduleNotFoundPage\n    }, __jsx(\"span\", {\n      style: {}\n    }, \"Module not found!\"));\n  };\n\n  return renderPage();\n};\n\nconst styles = {\n  reviewsHeader: {\n    height: \"8vh\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    padding: \"0px 10px\",\n    fontFamily: \"Mukta\",\n    color: \"#838383\"\n  },\n  reviewsHeaderTitle: {\n    fontSize: \"26px\"\n  },\n  moduleNotFoundPage: {\n    display: \"flex\",\n    height: \"80vh\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n};\n\nModuleReviewPage.getInitialProps = async ({\n  query\n}) => {\n  const moduleId = query.id;\n\n  try {\n    const initialModule = await moduleApi.getModule(moduleId);\n    const prereqs = await Promise.all(initialModule.prereqs.map(async prereqId => {\n      const mod = await moduleApi.getModule(prereqId);\n      return mod.code;\n    }));\n    initialModule.prereqs = prereqs;\n    const reviews = await reviewApi.getReviewsOfModule(initialModule._id, 10);\n    reviews.sort(compareNewest);\n    return {\n      initialModule,\n      reviews\n    };\n  } catch (err) {\n    return {\n      initialModule: null,\n      reviews: []\n    };\n  }\n};\n\nexport default ModuleReviewPage;","map":null,"metadata":{},"sourceType":"module"}