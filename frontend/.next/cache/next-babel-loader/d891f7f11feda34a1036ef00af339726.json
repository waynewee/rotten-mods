{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport commentApi from \"../api/comment\";\nimport reactionApi from \"../api/reaction\";\nimport { triggerRequireLoginMessage, fetchRatings } from \"../utils/helpers\";\nimport AddCommentModal from \"./AddCommentModal\";\nimport Button from \"./Button\";\nimport CommentModal from \"./CommentsModal\";\nimport CommentOutlinedIcon from \"../icons/CommentOutlinedIcon\";\nimport LikeOutlinedIcon from \"../icons/LikeOutlinedIcon\";\nimport { reviewBlue, ratingsYellow } from \"../styles/colors\";\n\nconst ReviewCard = ({\n  review,\n  updateReviews,\n  showActions = true\n}) => {\n  var _reaction$like$count, _reaction$like;\n\n  const {\n    0: isCommentsModalVisible,\n    1: setCommentsModalVisibility\n  } = useState(false);\n  const {\n    0: isAddCommentModalVisible,\n    1: setAddCommentModalVisibility\n  } = useState(false);\n  const {\n    0: comments,\n    1: setComments\n  } = useState([]);\n  const {\n    0: userLikeReactionId,\n    1: setUserLikeReactionId\n  } = useState(\"\");\n  const {\n    0: difficulty,\n    1: setDifficulty\n  } = useState(3);\n  const {\n    0: star,\n    1: setStar\n  } = useState(3);\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  const {\n    user,\n    text,\n    acadYearTaken,\n    semesterTaken,\n    reaction,\n    _id,\n    ratingIds\n  } = review;\n  const name = user === null || user === void 0 ? void 0 : user.name;\n  const like = (_reaction$like$count = reaction === null || reaction === void 0 ? void 0 : (_reaction$like = reaction.like) === null || _reaction$like === void 0 ? void 0 : _reaction$like.count) !== null && _reaction$like$count !== void 0 ? _reaction$like$count : 0;\n  useEffect(() => {\n    fetchComments();\n  }, []);\n  useEffect(() => {\n    checkIsLikedByUser();\n  }, [userId]);\n  useEffect(() => {\n    fetchRatings(ratingIds, setStar, setDifficulty);\n  }, [ratingIds]);\n\n  const fetchComments = async () => {\n    const fetchedComments = await commentApi.getCommentsOfReview(_id);\n    setComments(fetchedComments);\n  };\n\n  const checkIsLikedByUser = async () => {\n    try {\n      const likeReaction = await reactionApi.getReaction(\"review\", _id, userId, \"like\");\n      setUserLikeReactionId(likeReaction._id);\n    } catch (err) {\n      setUserLikeReactionId(\"\");\n    }\n  };\n\n  const onLikeReview = async () => {\n    if (!isLoggedIn) {\n      triggerRequireLoginMessage();\n      return;\n    }\n\n    if (!userLikeReactionId) {\n      await reactionApi.addReaction(\"review\", _id, userId, \"like\");\n      updateReviews();\n      checkIsLikedByUser();\n    } else {\n      await reactionApi.deleteReaction(userLikeReactionId);\n      updateReviews();\n      checkIsLikedByUser();\n    }\n  };\n\n  const toggleCommentModalVisibility = () => {\n    if (!isLoggedIn) {\n      triggerRequireLoginMessage();\n    } else {\n      setAddCommentModalVisibility(true);\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: styles.container\n  }, __jsx(\"div\", {\n    style: styles.header\n  }, __jsx(\"div\", {\n    style: styles.userInformation\n  }, __jsx(\"span\", null, name), __jsx(\"span\", {\n    style: styles.divider\n  }, \"|\"), __jsx(\"span\", null, \"AY\", acadYearTaken, \", Sem \", semesterTaken), __jsx(\"span\", {\n    style: styles.divider\n  }, \"|\"), __jsx(\"span\", null, \"Difficulty: \", difficulty.toFixed(1)), __jsx(\"span\", {\n    style: styles.divider\n  }, \"|\"), __jsx(\"span\", null, \"Rating: \", star.toFixed(1))), showActions && __jsx(\"div\", {\n    style: styles.actionsBar\n  }, __jsx(\"div\", {\n    style: styles.action\n  }, __jsx(Button, {\n    onClick: onLikeReview\n  }, __jsx(LikeOutlinedIcon, {\n    style: _objectSpread(_objectSpread({}, styles.icon), {}, {\n      color: userLikeReactionId ? ratingsYellow : \"#fff\"\n    })\n  })), __jsx(\"span\", null, `${like} Likes`)), __jsx(\"span\", {\n    style: {\n      margin: \"0px 10px\"\n    }\n  }, \"|\"), __jsx(\"div\", {\n    style: styles.action\n  }, __jsx(Button, {\n    onClick: toggleCommentModalVisibility\n  }, __jsx(CommentOutlinedIcon, {\n    style: styles.icon\n  })), __jsx(Button, {\n    onClick: () => setCommentsModalVisibility(true)\n  }, `${comments.length} Comments`)))), __jsx(\"div\", {\n    style: styles.review\n  }, text), __jsx(AddCommentModal, {\n    fetchComments: fetchComments,\n    reviewId: _id,\n    isModalVisible: isAddCommentModalVisible,\n    setModalVisibility: setAddCommentModalVisibility\n  }), __jsx(CommentModal, {\n    comments: comments,\n    isModalVisible: isCommentsModalVisible,\n    setModalVisibility: setCommentsModalVisibility\n  }));\n};\n\nconst styles = {\n  container: {\n    padding: 30,\n    backgroundColor: reviewBlue,\n    color: \"#fff\",\n    borderRadius: 15,\n    boxShadow: \"0px 8px 8px rgba(0, 0, 0, 0.25)\",\n    marginBottom: 15,\n    width: \"100%\"\n  },\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  userInformation: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  actionsBar: {\n    display: \"flex\"\n  },\n  action: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  icon: {\n    height: 20,\n    marginRight: 10\n  },\n  review: {\n    marginTop: 10,\n    textAlign: \"justify\"\n  },\n  divider: {\n    margin: \"0px 10px\"\n  }\n};\nexport default ReviewCard;","map":null,"metadata":{},"sourceType":"module"}