{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SEARCH_TERM } from \"../constants\";\nconst initialState = {\n  searchTerm: \"\"\n};\n\nconst searchReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SEARCH_TERM:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchTerm: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/redux/reducers/searchReducer.ts"],"names":["SEARCH_TERM","initialState","searchTerm","searchReducer","state","action","type","payload"],"mappings":";;;;;;AACA,SAASA,WAAT,QAA4B,cAA5B;AAGA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,UAAU,EAAE;AADoB,CAAlC;;AAIA,MAAMC,aAAa,GAAG,CACpBC,KAAkB,GAAGH,YADD,EAEpBI,MAFoB,KAGjB;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AACE,6CAAYI,KAAZ;AAAmBF,QAAAA,UAAU,EAAEG,MAAM,CAACE;AAAtC;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAVD;;AAYA,eAAeD,aAAf","sourcesContent":["import { AnyAction } from \"redux\";\nimport { SEARCH_TERM } from \"../constants\";\nimport { SearchState } from \"../types\";\n\nconst initialState: SearchState = {\n  searchTerm: \"\",\n};\n\nconst searchReducer = (\n  state: SearchState = initialState,\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case SEARCH_TERM:\n      return { ...state, searchTerm: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n"]},"metadata":{},"sourceType":"module"}