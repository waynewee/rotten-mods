{"ast":null,"code":"var _jsxFileName = \"/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddCommentModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport commentApi from \"../api/comment\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { submitBlue, crossRed, commentBlue } from \"../styles/colors\";\n\nconst AddCommentModal = ({\n  isModalVisible,\n  setModalVisibility,\n  reviewId,\n  fetchComments\n}) => {\n  const {\n    0: comment,\n    1: setComment\n  } = useState(\"\");\n  const {\n    0: submitText,\n    1: setSubmitText\n  } = useState(\"Submit\");\n  const {\n    0: submitColor,\n    1: setSubmitColor\n  } = useState(submitBlue);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You did not comment anything. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    await commentApi.addComment(userId, comment, reviewId);\n    setComment(\"\");\n    setSubmitText(\"Submit\");\n    setSubmitColor(submitBlue);\n    setModalVisibility(false);\n    fetchComments();\n  };\n\n  const validateForm = () => comment !== \"\";\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    title: \"Add Comment\",\n    backgroundColor: commentBlue,\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    submitColor: submitColor,\n    onSubmit: onSubmit,\n    submitText: submitText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(FormModalItem, {\n    label: \"Comment\",\n    type: \"textarea\",\n    value: comment,\n    setValue: setComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AddCommentModal;","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddCommentModal.tsx"],"names":["useState","useSelector","commentApi","FormModal","FormModalItem","submitBlue","crossRed","commentBlue","AddCommentModal","isModalVisible","setModalVisibility","reviewId","fetchComments","comment","setComment","submitText","setSubmitText","submitColor","setSubmitColor","userId","state","auth","user","_id","onSubmit","validateForm","addComment","closeModal","isToClose"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,WAA/B,QAAkD,kBAAlD;;AAOA,MAAMC,eAA+C,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,kBAAlB;AAAsCC,EAAAA,QAAtC;AAAgDC,EAAAA;AAAhD,CAAD,KAAqE;AAC3H,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACe,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,CAAC,QAAD,CAA5C;AACA,QAAM;AAAA,OAACiB,WAAD;AAAA,OAAcC;AAAd,MAAgClB,QAAQ,CAACK,UAAD,CAA9C;AACA,QAAMc,MAAM,GAAGlB,WAAW,CAACmB,KAAK;AAAA;;AAAA,+BAAIA,KAAK,CAACC,IAAN,CAAWC,IAAf,qDAAI,iBAAiBC,GAArB;AAAA,GAAN,CAA1B;;AAEA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI,CAACC,YAAY,EAAjB,EAAqB;AACnBT,MAAAA,aAAa,CAAC,4DAAD,CAAb;AACAE,MAAAA,cAAc,CAACZ,QAAD,CAAd;AACA;AACD;;AAED,UAAMJ,UAAU,CAACwB,UAAX,CAAsBP,MAAtB,EAA8BN,OAA9B,EAAuCF,QAAvC,CAAN;AACAG,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,aAAa,CAAC,QAAD,CAAb;AACAE,IAAAA,cAAc,CAACb,UAAD,CAAd;AACAK,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,IAAAA,aAAa;AACd,GAbD;;AAeA,QAAMa,YAAY,GAAG,MAAMZ,OAAO,KAAK,EAAvC;;AAEA,QAAMc,UAAU,GAAGC,SAAS,IAAI;AAC9BlB,IAAAA,kBAAkB,CAACkB,SAAD,CAAlB;AACAV,IAAAA,cAAc,CAACb,UAAD,CAAd;AACAW,IAAAA,aAAa,CAAC,QAAD,CAAb;AACD,GAJD;;AAMA,SACE,MAAC,SAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,eAAe,EAAET,WAFnB;AAGE,IAAA,cAAc,EAAEE,cAHlB;AAIE,IAAA,kBAAkB,EAAEkB,UAJtB;AAKE,IAAA,WAAW,EAAEV,WALf;AAME,IAAA,QAAQ,EAAEO,QANZ;AAOE,IAAA,UAAU,EAAET,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAC,SAArB;AAA+B,IAAA,IAAI,EAAC,UAApC;AAA+C,IAAA,KAAK,EAAEF,OAAtD;AAA+D,IAAA,QAAQ,EAAEC,UAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD,CA1CD;;AA4CA,eAAeN,eAAf","sourcesContent":["import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalState } from \"../types\";\nimport commentApi from \"../api/comment\";\n\nimport FormModal from \"./FormModal\"\nimport FormModalItem from \"./FormModalItem\";\nimport { submitBlue, crossRed, commentBlue } from \"../styles/colors\";\n\ninterface AddCommentModalProps extends ModalState {\n  reviewId: string;\n  fetchComments: () => void;\n}\n\nconst AddCommentModal: React.FC<AddCommentModalProps> = ({ isModalVisible, setModalVisibility, reviewId, fetchComments }) => {\n  const [comment, setComment] = useState(\"\");\n  const [submitText, setSubmitText] = useState(\"Submit\");\n  const [submitColor, setSubmitColor] = useState(submitBlue);\n  const userId = useSelector(state => state.auth.user?._id);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You did not comment anything. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    await commentApi.addComment(userId, comment, reviewId);\n    setComment(\"\");\n    setSubmitText(\"Submit\");\n    setSubmitColor(submitBlue);\n    setModalVisibility(false);\n    fetchComments();\n  }\n\n  const validateForm = () => comment !== \"\";\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  }\n\n  return (\n    <FormModal\n      title=\"Add Comment\"\n      backgroundColor={commentBlue}\n      isModalVisible={isModalVisible}\n      setModalVisibility={closeModal}\n      submitColor={submitColor}\n      onSubmit={onSubmit}\n      submitText={submitText}\n    >\n      <FormModalItem label=\"Comment\" type=\"textarea\" value={comment} setValue={setComment} />\n    </FormModal>\n  )\n}\n\nexport default AddCommentModal;"]},"metadata":{},"sourceType":"module"}