{"ast":null,"code":"import bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { FETCH_BOOKMARKS, FETCH_PLANNED_MODS, FETCH_PERSONAL_REVIEWS } from \"../redux/constants\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nexport const updatePersonalBookmarks = async userId => {\n  if (!userId) return;\n  const data = await bookmarkApi.getBookmarks(userId);\n  store.dispatch({\n    type: FETCH_BOOKMARKS,\n    payload: data\n  });\n};\nexport const updatedPersonalPlannedModules = async userId => {\n  if (!userId) return;\n  const data = await plannedModApi.fetchPlannedMods(userId);\n  store.dispatch({\n    type: FETCH_PLANNED_MODS,\n    payload: data\n  });\n};\nexport const updatePersonalReviews = async userId => {\n  if (!userId) return;\n  const data = await reviewApi.getReviewsOfUser(userId);\n  store.dispatch({\n    type: FETCH_PERSONAL_REVIEWS,\n    payload: data\n  });\n};\nexport const triggerRequireLoginMessage = () => {\n  message.warning(\"You need to login first!\");\n};\nexport const fetchRatings = (ratingIds, setStar, setDifficulty) => {\n  ratingIds.forEach(async id => {\n    const rating = await reviewApi.getRatingById(id);\n\n    if (rating.type == \"star\") {\n      setStar(rating.value);\n    } else if (rating.type == \"difficulty\") {\n      setDifficulty(rating.value);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/utils/helpers.ts"],"names":["bookmarkApi","plannedModApi","reviewApi","FETCH_BOOKMARKS","FETCH_PLANNED_MODS","FETCH_PERSONAL_REVIEWS","store","message","updatePersonalBookmarks","userId","data","getBookmarks","dispatch","type","payload","updatedPersonalPlannedModules","fetchPlannedMods","updatePersonalReviews","getReviewsOfUser","triggerRequireLoginMessage","warning","fetchRatings","ratingIds","setStar","setDifficulty","forEach","id","rating","getRatingById","value"],"mappings":"AACA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SACEC,eADF,EAEEC,kBAFF,EAGEC,sBAHF,QAIO,oBAJP;AAKA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,OAAO,MAAMC,uBAAuB,GAAG,MAAOC,MAAP,IAAkB;AACvD,MAAI,CAACA,MAAL,EAAa;AAEb,QAAMC,IAAI,GAAG,MAAMV,WAAW,CAACW,YAAZ,CAAyBF,MAAzB,CAAnB;AACAH,EAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAEV,eADO;AAEbW,IAAAA,OAAO,EAAEJ;AAFI,GAAf;AAID,CARM;AAUP,OAAO,MAAMK,6BAA6B,GAAG,MAAON,MAAP,IAAkB;AAC7D,MAAI,CAACA,MAAL,EAAa;AAEb,QAAMC,IAAI,GAAG,MAAMT,aAAa,CAACe,gBAAd,CAA+BP,MAA/B,CAAnB;AACAH,EAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAET,kBADO;AAEbU,IAAAA,OAAO,EAAEJ;AAFI,GAAf;AAID,CARM;AAUP,OAAO,MAAMO,qBAAqB,GAAG,MAAOR,MAAP,IAAkB;AACrD,MAAI,CAACA,MAAL,EAAa;AAEb,QAAMC,IAAI,GAAG,MAAMR,SAAS,CAACgB,gBAAV,CAA2BT,MAA3B,CAAnB;AACAH,EAAAA,KAAK,CAACM,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAER,sBADO;AAEbS,IAAAA,OAAO,EAAEJ;AAFI,GAAf;AAID,CARM;AAUP,OAAO,MAAMS,0BAA0B,GAAG,MAAM;AAC9CZ,EAAAA,OAAO,CAACa,OAAR,CAAgB,0BAAhB;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,CAACC,SAAD,EAAsBC,OAAtB,EAAiEC,aAAjE,KAA2H;AACrJF,EAAAA,SAAS,CAACG,OAAV,CAAkB,MAAOC,EAAP,IAAc;AAC9B,UAAMC,MAAM,GAAG,MAAMzB,SAAS,CAAC0B,aAAV,CAAwBF,EAAxB,CAArB;;AACA,QAAIC,MAAM,CAACd,IAAP,IAAe,MAAnB,EAA2B;AACzBU,MAAAA,OAAO,CAACI,MAAM,CAACE,KAAR,CAAP;AACD,KAFD,MAEO,IAAIF,MAAM,CAACd,IAAP,IAAe,YAAnB,EAAiC;AACtCW,MAAAA,aAAa,CAACG,MAAM,CAACE,KAAR,CAAb;AACD;AACF,GAPD;AAQD,CATM","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport {\n  FETCH_BOOKMARKS,\n  FETCH_PLANNED_MODS,\n  FETCH_PERSONAL_REVIEWS,\n} from \"../redux/constants\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\n\nexport const updatePersonalBookmarks = async (userId) => {\n  if (!userId) return;\n\n  const data = await bookmarkApi.getBookmarks(userId);\n  store.dispatch({\n    type: FETCH_BOOKMARKS,\n    payload: data,\n  });\n};\n\nexport const updatedPersonalPlannedModules = async (userId) => {\n  if (!userId) return;\n\n  const data = await plannedModApi.fetchPlannedMods(userId);\n  store.dispatch({\n    type: FETCH_PLANNED_MODS,\n    payload: data,\n  });\n};\n\nexport const updatePersonalReviews = async (userId) => {\n  if (!userId) return;\n\n  const data = await reviewApi.getReviewsOfUser(userId);\n  store.dispatch({\n    type: FETCH_PERSONAL_REVIEWS,\n    payload: data,\n  });\n};\n\nexport const triggerRequireLoginMessage = () => {\n  message.warning(\"You need to login first!\");\n};\n\nexport const fetchRatings = (ratingIds: string[], setStar: Dispatch<SetStateAction<number>>, setDifficulty: Dispatch<SetStateAction<number>>): void => {\n  ratingIds.forEach(async (id) => {\n    const rating = await reviewApi.getRatingById(id);\n    if (rating.type == \"star\") {\n      setStar(rating.value);\n    } else if (rating.type == \"difficulty\") {\n      setDifficulty(rating.value);\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}