{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nimport { fetchBookmarksAction, fetchPlannedModsAction, fetchPersonalReviewsAction } from \"../redux/actions/personal-modules\";\nexport var updatePersonalBookmarks = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (userId) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return bookmarkApi.getBookmarks(userId);\n\n          case 4:\n            data = _context.sent;\n            store.dispatch(fetchBookmarksAction(data));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function updatePersonalBookmarks(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updatedPersonalPlannedModules = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (userId) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return plannedModApi.fetchPlannedMods(userId);\n\n          case 4:\n            data = _context2.sent;\n            store.dispatch(fetchPlannedModsAction(data));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function updatedPersonalPlannedModules(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var updatePersonalReviews = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(userId) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (userId) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            _context3.next = 4;\n            return reviewApi.getReviewsOfUser(userId);\n\n          case 4:\n            data = _context3.sent;\n            store.dispatch(fetchPersonalReviewsAction(data));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function updatePersonalReviews(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var triggerRequireLoginMessage = function triggerRequireLoginMessage() {\n  message.warning(\"You need to login first!\");\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/utils/helpers.ts"],"names":["bookmarkApi","plannedModApi","reviewApi","store","message","fetchBookmarksAction","fetchPlannedModsAction","fetchPersonalReviewsAction","updatePersonalBookmarks","userId","getBookmarks","data","dispatch","updatedPersonalPlannedModules","fetchPlannedMods","updatePersonalReviews","getReviewsOfUser","triggerRequireLoginMessage","warning"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SACEC,oBADF,EAEEC,sBAFF,EAGEC,0BAHF,QAIQ,mCAJR;AAMA,OAAO,IAAMC,uBAAuB;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAChCA,MADgC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGlBT,WAAW,CAACU,YAAZ,CAAyBD,MAAzB,CAHkB;;AAAA;AAG/BE,YAAAA,IAH+B;AAIrCR,YAAAA,KAAK,CAACS,QAAN,CAAeP,oBAAoB,CAACM,IAAD,CAAnC;;AAJqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBH,uBAAuB;AAAA;AAAA;AAAA,GAA7B;AAOP,OAAO,IAAMK,6BAA6B;AAAA,uEAAG,kBAAOJ,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACtCA,MADsC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGxBR,aAAa,CAACa,gBAAd,CAA+BL,MAA/B,CAHwB;;AAAA;AAGrCE,YAAAA,IAHqC;AAI3CR,YAAAA,KAAK,CAACS,QAAN,CAAeN,sBAAsB,CAACK,IAAD,CAArC;;AAJ2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA7BE,6BAA6B;AAAA;AAAA;AAAA,GAAnC;AAOP,OAAO,IAAME,qBAAqB;AAAA,uEAAG,kBAAON,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAC9BA,MAD8B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGhBP,SAAS,CAACc,gBAAV,CAA2BP,MAA3B,CAHgB;;AAAA;AAG7BE,YAAAA,IAH6B;AAInCR,YAAAA,KAAK,CAACS,QAAN,CAAeL,0BAA0B,CAACI,IAAD,CAAzC;;AAJmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBI,qBAAqB;AAAA;AAAA;AAAA,GAA3B;AAOP,OAAO,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AAC9Cb,EAAAA,OAAO,CAACc,OAAR,CAAgB,0BAAhB;AACD,CAFM","sourcesContent":["import bookmarkApi from \"../api/bookmark\";\nimport plannedModApi from \"../api/planned-mod\";\nimport reviewApi from \"../api/review\";\nimport { store } from \"../redux/store\";\nimport { message } from \"antd\";\nimport { \n  fetchBookmarksAction,\n  fetchPlannedModsAction, \n  fetchPersonalReviewsAction \n} from  \"../redux/actions/personal-modules\"\n\nexport const updatePersonalBookmarks = async (userId) => {\n  if (!userId) return;\n\n  const data = await bookmarkApi.getBookmarks(userId);\n  store.dispatch(fetchBookmarksAction(data));\n};\n\nexport const updatedPersonalPlannedModules = async (userId) => {\n  if (!userId) return;\n\n  const data = await plannedModApi.fetchPlannedMods(userId);\n  store.dispatch(fetchPlannedModsAction(data));\n};\n\nexport const updatePersonalReviews = async (userId) => {\n  if (!userId) return;\n\n  const data = await reviewApi.getReviewsOfUser(userId);\n  store.dispatch(fetchPersonalReviewsAction(data));\n};\n\nexport const triggerRequireLoginMessage = () => {\n  message.warning(\"You need to login first!\");\n};\n"]},"metadata":{},"sourceType":"module"}