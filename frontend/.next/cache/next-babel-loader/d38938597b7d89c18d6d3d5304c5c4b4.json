{"ast":null,"code":"var _jsxFileName = \"/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddReviewModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport reviewApi from \"../api/review\";\nimport { fetchRatings } from \"../utils/helpers\";\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\nconst today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst yearShortform = currentYear % 2000; // eg. 2021 => 21\n\nconst currentSemester = currentMonth < 6 ? 2 : 1;\nconst currentAYSecondYear = currentSemester === 1 ? yearShortform + 1 : yearShortform;\nconst yearMinusOne = currentAYSecondYear - 1;\nconst initialReviewState = {\n  text: \"\",\n  ratingIds: [],\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: `${yearMinusOne}/${currentAYSecondYear}`\n};\n\nconst AddReviewModal = ({\n  code,\n  modId,\n  updateReviews,\n  updateModule,\n  isModalVisible,\n  setModalVisibility,\n  reviewByUser,\n  ratingsByUser\n}) => {\n  const initialReview = reviewByUser !== null && reviewByUser !== void 0 ? reviewByUser : initialReviewState;\n  const {\n    0: text,\n    1: setText\n  } = useState(initialReview.text);\n  const {\n    0: difficulty,\n    1: setDifficulty\n  } = useState(3);\n  const {\n    0: ratings,\n    1: setRatings\n  } = useState(3);\n  const {\n    0: semester,\n    1: setSemester\n  } = useState(initialReview.semesterTaken);\n  const {\n    0: year,\n    1: setYear\n  } = useState(initialReview.acadYearTaken);\n  const {\n    0: submitText,\n    1: setSubmitText\n  } = useState(\"Submit\");\n  const {\n    0: submitColor,\n    1: setSubmitColor\n  } = useState(submitBlue);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  useEffect(() => {\n    if (reviewByUser) {\n      const {\n        ratingIds\n      } = reviewByUser;\n      fetchRatings(ratingIds, setRatings, setDifficulty);\n    }\n  }, []);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\"You have forgotten to fill in at least one of the fields. Once done click this button!\");\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    const requestBody = {\n      text,\n      semesterTaken: semester,\n      acadYearTaken: year,\n      modId,\n      userId,\n      ratings: [{\n        type: \"difficulty\",\n        value: difficulty\n      }, {\n        type: \"star\",\n        value: ratings\n      }]\n    };\n\n    if (reviewByUser) {\n      await reviewApi.updateReviewOfModule(requestBody, reviewByUser._id); // update ratings\n    } else {\n      await reviewApi.addReviewOfModule(requestBody); // add ratings\n      // await reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\", );\n      // await reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\", );\n    }\n\n    setModalVisibility(false);\n    updateReviews();\n    updateModule();\n  };\n\n  const validateForm = () => ratings !== 0 && difficulty !== 0 && text !== \"\";\n\n  const closeModal = isToClose => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return __jsx(FormModal, {\n    backgroundColor: reviewBlue,\n    submitColor: submitColor,\n    title: `${reviewByUser ? \"Edit\" : \"Add\"} Review`,\n    isModalVisible: isModalVisible,\n    setModalVisibility: closeModal,\n    onSubmit: onSubmit,\n    submitText: submitText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, __jsx(FormModalItem, {\n    label: \"Module Code\",\n    type: \"text\",\n    value: code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Review\",\n    type: \"textarea\",\n    value: text,\n    setValue: setText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Year Taken\",\n    type: \"annualYear\",\n    value: year,\n    setValue: setYear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Semester Taken\",\n    type: \"semester\",\n    value: semester,\n    setValue: setSemester,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Difficulty\",\n    type: \"difficulty\",\n    value: difficulty,\n    setValue: setDifficulty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), __jsx(FormModalItem, {\n    label: \"Ratings\",\n    type: \"rate\",\n    value: ratings,\n    setValue: setRatings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default AddReviewModal;","map":{"version":3,"sources":["/Users/ChesterSim/Desktop/NUS Computer Science/CS3219/cs3219-ay2021-s1-project-2020-s1-g01/frontend/components/AddReviewModal.tsx"],"names":["useState","useEffect","useSelector","reviewApi","fetchRatings","FormModal","FormModalItem","reviewBlue","submitBlue","crossRed","today","Date","currentYear","getFullYear","currentMonth","getMonth","yearShortform","currentSemester","currentAYSecondYear","yearMinusOne","initialReviewState","text","ratingIds","workload","semesterTaken","acadYearTaken","AddReviewModal","code","modId","updateReviews","updateModule","isModalVisible","setModalVisibility","reviewByUser","ratingsByUser","initialReview","setText","difficulty","setDifficulty","ratings","setRatings","semester","setSemester","year","setYear","submitText","setSubmitText","submitColor","setSubmitColor","userId","state","auth","user","_id","onSubmit","validateForm","requestBody","type","value","updateReviewOfModule","addReviewOfModule","closeModal","isToClose"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ModalState, Review } from \"../types\";\nimport reviewApi from \"../api/review\";\nimport { fetchRatings } from \"../utils/helpers\";\n\nimport FormModal from \"./FormModal\";\nimport FormModalItem from \"./FormModalItem\";\nimport { reviewBlue, submitBlue, crossRed } from \"../styles/colors\";\n\ninterface AddReviewModalProps extends ModalState {\n  code: string;\n  modId: string;\n  updateReviews: () => void;\n  updateModule: () => void;\n  reviewByUser: Review;\n  ratingsByUser: { _id: string };\n}\n\nconst today = new Date();\nconst currentYear = today.getFullYear();\nconst currentMonth = today.getMonth();\nconst yearShortform = currentYear % 2000; // eg. 2021 => 21\nconst currentSemester = currentMonth < 6 ? 2 : 1;\nconst currentAYSecondYear =\n  currentSemester === 1 ? yearShortform + 1 : yearShortform;\nconst yearMinusOne = currentAYSecondYear - 1;\n\nconst initialReviewState = {\n  text: \"\",\n  ratingIds: [],\n  workload: 10,\n  semesterTaken: 1,\n  acadYearTaken: `${yearMinusOne}/${currentAYSecondYear}`,\n};\n\nconst AddReviewModal: React.FC<AddReviewModalProps> = ({\n  code,\n  modId,\n  updateReviews,\n  updateModule,\n  isModalVisible,\n  setModalVisibility,\n  reviewByUser,\n  ratingsByUser,\n}) => {\n  const initialReview = reviewByUser ?? initialReviewState;\n\n  const [text, setText] = useState(initialReview.text);\n  const [difficulty, setDifficulty] = useState(3);\n  const [ratings, setRatings] = useState(3);\n  const [semester, setSemester] = useState(initialReview.semesterTaken);\n  const [year, setYear] = useState(initialReview.acadYearTaken);\n  const [submitText, setSubmitText] = useState(\"Submit\");\n  const [submitColor, setSubmitColor] = useState(submitBlue);\n  const userId = useSelector((state) => state.auth.user?._id);\n\n  useEffect(() => {\n    if (reviewByUser) {\n      const { ratingIds } = reviewByUser;\n      fetchRatings(ratingIds, setRatings, setDifficulty);\n    }\n  }, []);\n\n  const onSubmit = async () => {\n    if (!validateForm()) {\n      setSubmitText(\n        \"You have forgotten to fill in at least one of the fields. Once done click this button!\"\n      );\n      setSubmitColor(crossRed);\n      return;\n    }\n\n    const requestBody = {\n      text,\n      semesterTaken: semester,\n      acadYearTaken: year as string,\n      modId,\n      userId,\n      ratings: [\n        {\n          type: \"difficulty\",\n          value: difficulty,\n        },\n        {\n          type: \"star\",\n          value: ratings,\n        },\n      ],\n    };\n\n    if (reviewByUser) {\n      await reviewApi.updateReviewOfModule(requestBody, reviewByUser._id);\n      // update ratings\n    } else {\n      await reviewApi.addReviewOfModule(requestBody);\n      // add ratings\n      // await reviewApi.addRating(difficulty, \"difficulty\", userId, modId, \"mod\", );\n      // await reviewApi.addRating(ratings, \"star\", userId, modId, \"mod\", );\n    }\n\n    setModalVisibility(false);\n    updateReviews();\n    updateModule();\n  };\n\n  const validateForm = () => ratings !== 0 && difficulty !== 0 && text !== \"\";\n\n  const closeModal = (isToClose) => {\n    setModalVisibility(isToClose);\n    setSubmitColor(submitBlue);\n    setSubmitText(\"Submit\");\n  };\n\n  return (\n    <FormModal\n      backgroundColor={reviewBlue}\n      submitColor={submitColor}\n      title={`${reviewByUser ? \"Edit\" : \"Add\"} Review`}\n      isModalVisible={isModalVisible}\n      setModalVisibility={closeModal}\n      onSubmit={onSubmit}\n      submitText={submitText}\n    >\n      <FormModalItem label=\"Module Code\" type=\"text\" value={code} />\n      <FormModalItem\n        label=\"Review\"\n        type=\"textarea\"\n        value={text}\n        setValue={setText}\n      />\n      <FormModalItem\n        label=\"Year Taken\"\n        type=\"annualYear\"\n        value={year}\n        setValue={setYear}\n      />\n      <FormModalItem\n        label=\"Semester Taken\"\n        type=\"semester\"\n        value={semester}\n        setValue={setSemester}\n      />\n      <FormModalItem\n        label=\"Difficulty\"\n        type=\"difficulty\"\n        value={difficulty}\n        setValue={setDifficulty}\n      />\n      <FormModalItem\n        label=\"Ratings\"\n        type=\"rate\"\n        value={ratings}\n        setValue={setRatings}\n      />\n    </FormModal>\n  );\n};\n\nexport default AddReviewModal;\n"]},"metadata":{},"sourceType":"module"}