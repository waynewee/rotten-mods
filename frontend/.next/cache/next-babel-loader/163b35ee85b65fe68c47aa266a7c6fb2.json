{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_MODULE_FOR_COMPARISON, DELETE_MODULE_FOR_COMPARISON, FIRST, SECOND } from \"../constants\";\nvar initialState = {\n  firstModuleCode: \"\",\n  // TODO: To set to empty string\n  secondModuleCode: \"\"\n};\n\nvar compareReducer = function compareReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_MODULE_FOR_COMPARISON:\n      // if modules to compare are the same, return state\n      if (state.firstModuleCode == action.payload) {\n        return state;\n      }\n\n      if (!state.firstModuleCode) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          firstModuleCode: action.payload\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        secondModuleCode: action.payload\n      });\n\n    case DELETE_MODULE_FOR_COMPARISON:\n      if (action.payload == FIRST) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          firstModuleCode: \"\"\n        });\n      } else if (action.payload == SECOND) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          secondModuleCode: \"\"\n        });\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default compareReducer;","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/redux/reducers/compareReducer.ts"],"names":["ADD_MODULE_FOR_COMPARISON","DELETE_MODULE_FOR_COMPARISON","FIRST","SECOND","initialState","firstModuleCode","secondModuleCode","compareReducer","state","action","type","payload"],"mappings":";;;;;;AACA,SACEA,yBADF,EAEEC,4BAFF,EAGEC,KAHF,EAIEC,MAJF,QAKO,cALP;AAQA,IAAMC,YAAgC,GAAG;AACvCC,EAAAA,eAAe,EAAE,EADsB;AAClB;AACrBC,EAAAA,gBAAgB,EAAE;AAFqB,CAAzC;;AAKA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAGlB;AAAA,MAFHC,KAEG,uEAFyBJ,YAEzB;AAAA,MADHK,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,yBAAL;AACE;AACA,UAAIQ,KAAK,CAACH,eAAN,IAAyBI,MAAM,CAACE,OAApC,EAA6C;AAC3C,eAAOH,KAAP;AACD;;AAED,UAAI,CAACA,KAAK,CAACH,eAAX,EAA4B;AAC1B,+CAAYG,KAAZ;AAAmBH,UAAAA,eAAe,EAAEI,MAAM,CAACE;AAA3C;AACD;;AAED,6CAAYH,KAAZ;AAAmBF,QAAAA,gBAAgB,EAAEG,MAAM,CAACE;AAA5C;;AACF,SAAKV,4BAAL;AACE,UAAIQ,MAAM,CAACE,OAAP,IAAkBT,KAAtB,EAA6B;AAC3B,+CAAYM,KAAZ;AAAmBH,UAAAA,eAAe,EAAE;AAApC;AACD,OAFD,MAEO,IAAII,MAAM,CAACE,OAAP,IAAkBR,MAAtB,EAA8B;AACnC,+CAAYK,KAAZ;AAAmBF,UAAAA,gBAAgB,EAAE;AAArC;AACD,OAFM,MAEA;AACL,eAAOE,KAAP;AACD;;AACH;AACE,aAAOA,KAAP;AArBJ;AAuBD,CA3BD;;AA6BA,eAAeD,cAAf","sourcesContent":["import { AnyAction } from \"redux\";\nimport {\n  ADD_MODULE_FOR_COMPARISON,\n  DELETE_MODULE_FOR_COMPARISON,\n  FIRST,\n  SECOND,\n} from \"../constants\";\nimport { ModuleCompareState } from \"../types\";\n\nconst initialState: ModuleCompareState = {\n  firstModuleCode: \"\", // TODO: To set to empty string\n  secondModuleCode: \"\",\n};\n\nconst compareReducer = (\n  state: ModuleCompareState = initialState,\n  action: AnyAction\n) => {\n  switch (action.type) {\n    case ADD_MODULE_FOR_COMPARISON:\n      // if modules to compare are the same, return state\n      if (state.firstModuleCode == action.payload) {\n        return state;\n      }\n\n      if (!state.firstModuleCode) {\n        return { ...state, firstModuleCode: action.payload };\n      }\n\n      return { ...state, secondModuleCode: action.payload };\n    case DELETE_MODULE_FOR_COMPARISON:\n      if (action.payload == FIRST) {\n        return { ...state, firstModuleCode: \"\" };\n      } else if (action.payload == SECOND) {\n        return { ...state, secondModuleCode: \"\" };\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n};\n\nexport default compareReducer;\n"]},"metadata":{},"sourceType":"module"}