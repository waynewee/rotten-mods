{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { Modal, Button, Form, Input, Divider, Select } from \"antd\";\nimport { UserOutlined, LockOutlined, MailOutlined, CalendarOutlined } from \"@ant-design/icons\";\nimport { codeBlue } from \"../styles/colors\";\nimport axios from \"axios\";\nimport authService from \"../utils/authentication\";\nimport { message } from \"antd\";\n\nconst SignupModal = toggles => {\n  const {\n    0: inputUniversityValues,\n    1: setUniversityInputValues\n  } = useState([{\n    schoolId: \"\",\n    schoolName: \"\"\n  }]);\n  const {\n    0: inputCourses,\n    1: setInputCourses\n  } = useState([{\n    courseId: \"\",\n    courseName: \"\"\n  }]);\n  const {\n    0: newSchoolName,\n    1: setSchoolName\n  } = useState(\"\");\n  const {\n    0: newCourseName,\n    1: setCourseName\n  } = useState(\"\");\n  useEffect(() => {\n    populateSchools();\n    populateCourses();\n  }, []);\n\n  const populateSchools = () => {\n    axios({\n      method: \"get\",\n      url: \"/school\",\n      baseURL: \"http://localhost:8080/api\"\n    }).then(function (response) {\n      const schoolsInDatabase = response.data.map(obj => {\n        const universityValue = {\n          schoolId: \"\",\n          schoolName: \"\"\n        };\n        universityValue.schoolId = obj._id;\n        universityValue.schoolName = obj.name;\n        return universityValue;\n      });\n      setUniversityInputValues(schoolsInDatabase);\n      console.log(\"Now uni has these values\");\n    }).then(function (error) {\n      console.log(error);\n    });\n  };\n\n  const populateCourses = () => {\n    axios({\n      method: \"get\",\n      url: \"/course\",\n      baseURL: \"http://localhost:8080/api\"\n    }).then(function (response) {\n      const coursesInDatabase = response.data.map(obj => {\n        const course = {\n          courseId: \"\",\n          courseName: \"\"\n        };\n        course.courseId = obj._id;\n        course.courseName = obj.name;\n        return course;\n      });\n      setInputCourses(coursesInDatabase);\n    }).then(function (error) {\n      console.log(error);\n    });\n  };\n\n  const onFormFinish = signUpValues => {\n    authService.signUp(signUpValues).then(function (response) {\n      message.success(\"Successfully Signed Up\");\n      toggles.toggles.switchModals();\n    }).catch(error => {\n      message.error(\"This user has already been created. Do you mean to sign in?\");\n    });\n  };\n\n  const onUniversityChange = event => {\n    setSchoolName(event.target.value);\n  };\n\n  const onCourseChange = event => {\n    setCourseName(event.target.value);\n  };\n\n  const addUniversityItem = () => {\n    setSchoolName(\"\");\n\n    if (newSchoolName.trim() !== \"\" && !inputUniversityValues.some(e => e.schoolName === newSchoolName)) {\n      console.log(\"adduniItem\");\n      setUniversityInputValues([...inputUniversityValues, {\n        schoolId: \"userCreated\",\n        schoolName: newSchoolName\n      }]);\n    }\n  };\n\n  const addCourseItem = () => {\n    console.log(\"adduniItem\");\n    setCourseName(\"\");\n\n    if (newCourseName.trim() !== \"\" && !inputCourses.some(e => e.courseName === newCourseName)) {\n      setInputCourses([...inputCourses, {\n        courseId: \"userCreated\",\n        courseName: newCourseName\n      }]);\n    }\n  };\n\n  const validateEmail = email => {\n    const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.+-]+\\.edu$/;\n    return regex.test(email);\n  };\n\n  function renderAddition(addition) {\n    if (addition == \"university\") {\n      return __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"nowrap\",\n          padding: 8\n        }\n      }, __jsx(Input, {\n        style: {\n          flex: \"auto\"\n        },\n        value: newSchoolName,\n        onChange: onUniversityChange\n      }), __jsx(\"a\", {\n        style: {\n          flex: \"none\",\n          padding: \"8px\",\n          display: \"block\",\n          cursor: \"pointer\"\n        },\n        onClick: addUniversityItem\n      }, \"ADD\"));\n    } else {\n      return __jsx(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"nowrap\",\n          padding: 8\n        }\n      }, __jsx(Input, {\n        style: {\n          flex: \"auto\"\n        },\n        value: newCourseName,\n        onChange: onCourseChange\n      }), __jsx(\"a\", {\n        style: {\n          flex: \"none\",\n          padding: \"8px\",\n          display: \"block\",\n          cursor: \"pointer\"\n        },\n        onClick: addCourseItem\n      }, \"ADD\"));\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    visible: true,\n    title: __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      }\n    }, \" SIGNUP \"),\n    centered: true,\n    onCancel: toggles.toggles.toggleSignupModal,\n    footer: null\n  }, __jsx(Form, {\n    name: \"normal_signup\",\n    className: \"signup-form\",\n    initialValues: {},\n    onFinish: onFormFinish\n  }, __jsx(Form.Item, {\n    name: \"fullname\",\n    rules: [{\n      required: true,\n      message: \"Please enter your full name!\"\n    }]\n  }, __jsx(Input, {\n    prefix: __jsx(UserOutlined, null),\n    placeholder: \"Full Name\"\n  })), __jsx(Form.Item, {\n    name: \"emailaddress\",\n    rules: [{\n      required: true,\n      message: \"Please enter an email address!\"\n    }, {\n      validator: (_, value) => {\n        if (!validateEmail(value)) {\n          return Promise.reject(\"Only .edu email address are allowed to sign up\");\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }]\n  }, __jsx(Input, {\n    prefix: __jsx(MailOutlined, null),\n    placeholder: \"Email Address\"\n  })), __jsx(Form.Item, {\n    name: \"userpassword\",\n    rules: [{\n      required: true,\n      message: \"Please enter a password!\"\n    }]\n  }, __jsx(Input, {\n    prefix: __jsx(LockOutlined, null),\n    type: \"password\",\n    placeholder: \"Password\"\n  })), __jsx(Form.Item, {\n    style: {\n      marginBottom: 0\n    }\n  }, __jsx(Form.Item, {\n    name: \"yearofstudy\",\n    rules: [{\n      required: true,\n      message: \"Please enter your Year of Study!\"\n    }, {\n      validator: (_, value) => {\n        if (value < 1 || value > 8) {\n          return Promise.reject(\"Your Year of Study should only be between 1 to 8\");\n        } else {\n          return Promise.resolve();\n        }\n      }\n    }]\n  }, __jsx(Input, {\n    type: \"number\",\n    prefix: __jsx(CalendarOutlined, null),\n    placeholder: \"Year Of Study\"\n  }))), __jsx(Form.Item, {\n    name: \"university\",\n    rules: [{\n      required: true,\n      message: \"Please enter your University!\"\n    }]\n  }, __jsx(Select, {\n    style: {\n      width: \"100%\"\n    },\n    placeholder: \"University\",\n    dropdownRender: menu => __jsx(React.Fragment, null, menu, __jsx(Divider, {\n      style: {\n        margin: \"4px 0\"\n      }\n    }), renderAddition(\"university\"))\n  }, inputUniversityValues.map(item => __jsx(Select.Option, {\n    key: item.schoolName,\n    value: item.schoolId\n  }, item.schoolName)))), __jsx(Form.Item, {\n    name: \"course\",\n    rules: [{\n      required: true,\n      message: \"Please enter the name of the course you are enrolled in!\"\n    }]\n  }, __jsx(Select, {\n    style: {\n      width: \"100%\"\n    },\n    placeholder: \"Course Of Study\",\n    value: \"Default\",\n    dropdownRender: menu => __jsx(React.Fragment, null, menu, __jsx(Divider, {\n      style: {\n        margin: \"4px 0\"\n      }\n    }), renderAddition(\"course\"))\n  }, inputCourses.map(item => __jsx(Select.Option, {\n    key: item.courseName,\n    value: item.courseId\n  }, item.courseName)))), __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: styles.loginFormButton\n  }, \"SIGN UP\"))), __jsx(Divider, null), __jsx(\"div\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, \"Already have an account? Log in\", \" \", __jsx(\"a\", {\n    onClick: () => toggles.toggles.switchModals()\n  }, \" here\"))));\n};\n\nconst styles = {\n  loginFormButton: {\n    width: \"100%\",\n    backgroundColor: codeBlue\n  }\n};\nexport default SignupModal;","map":null,"metadata":{},"sourceType":"module"}