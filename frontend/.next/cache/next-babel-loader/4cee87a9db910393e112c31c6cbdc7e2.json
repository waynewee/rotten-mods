{"ast":null,"code":"import axios from 'axios';\nimport { LOG_USER_IN } from \"../redux/constants\";\n\nfunction signUp(values) {\n  console.log(\"Sign Up Service received\");\n  console.log(values);\n  let createUserConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/user',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname,\n      \"email\": values.emailaddress,\n      \"password\": values.userpassword,\n      \"schoolId\": values.university,\n      \"courseId\": values.course,\n      \"currentYear\": values.yearofstudy\n    }\n  };\n  let createSchoolConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/school',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname\n    }\n  };\n  let createCourseConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/course',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"name\": values.fullname\n    }\n  }; // if schoolId is user created, then create a new school in the system\n\n  if (values.course !== \"userCreated\" && values.school !== \"userCreated\") {\n    axios(createUserConfig).then(function (response) {\n      console.log(\"post is successful\");\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n\nfunction logIn(values, dispatch) {\n  console.log(\"LogIn Service received\");\n  let logInUserConfig = {\n    method: 'post',\n    url: 'http://localhost:8080/api/login',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    data: {\n      \"email\": values.emailaddress,\n      \"password\": values.password\n    }\n  };\n  axios(logInUserConfig).then(function (response) {\n    console.log(\"login is successful\");\n    console.log(response); // console.log(\" the id is \");\n    // console.log(response.data._id);\n\n    const user = {\n      fullName: response.data.name,\n      yearOfStudy: response.data.currentYear,\n      studyCourse: response.data.courseId,\n      _id: response.data._id\n    };\n    dispatch({\n      type: LOG_USER_IN,\n      userId: user\n    });\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport default {\n  signUp,\n  logIn\n};","map":{"version":3,"sources":["/Users/zhangxian/Desktop/RottenMods/frontend/services/authentication.tsx"],"names":["axios","LOG_USER_IN","signUp","values","console","log","createUserConfig","method","url","headers","data","fullname","emailaddress","userpassword","university","course","yearofstudy","createSchoolConfig","createCourseConfig","school","then","response","catch","error","logIn","dispatch","logInUserConfig","password","user","fullName","name","yearOfStudy","currentYear","studyCourse","courseId","_id","type","userId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { LOG_USER_IN } from \"../redux/constants\";\nimport { User } from \"../types\";\n\n\n\nfunction signUp(values) {\n    console.log(\"Sign Up Service received\");\n    console.log(values);\n    let createUserConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/user',\n        headers: { \n          'Content-Type': 'application/json'\n        },\n        data : {\n            \"name\": values.fullname,\n            \"email\": values.emailaddress,\n            \"password\": values.userpassword,\n            \"schoolId\": values.university,\n            \"courseId\": values.course,\n            \"currentYear\": values.yearofstudy\n        }\n    };\n\n    let createSchoolConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/school',\n        headers: { \n          'Content-Type': 'application/json'\n        },\n        data : {\n            \"name\": values.fullname,\n        }\n    };\n\n    let createCourseConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/course',\n        headers: { \n          'Content-Type': 'application/json'\n        },\n        data : {\n            \"name\": values.fullname,\n        }\n    };\n\n\n      // if schoolId is user created, then create a new school in the system\n\n    if (values.course !== \"userCreated\" && values.school !== \"userCreated\") {\n        axios(createUserConfig)\n        .then(function (response) {\n            console.log(\"post is successful\");\n            console.log(response);\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n\n}\n\n\nfunction logIn(values, dispatch) {\n    console.log(\"LogIn Service received\");\n    let logInUserConfig = {\n        method: 'post',\n        url: 'http://localhost:8080/api/login',\n        headers: { \n          'Content-Type': 'application/json',\n        },\n        data : {\n            \"email\": values.emailaddress,\n            \"password\": values.password,\n        }\n    };\n\n    axios(logInUserConfig)\n    .then(function (response) {\n        console.log(\"login is successful\");\n        console.log(response);\n        // console.log(\" the id is \");\n        // console.log(response.data._id);\n\n        const user: User = {\n            fullName: response.data.name,\n            yearOfStudy: response.data.currentYear,\n            studyCourse: response.data.courseId,\n            _id: response.data._id,\n        }\n        dispatch({\n            type: LOG_USER_IN,\n            userId: user\n        });\n    })\n    .catch(function (error) {\n        console.log(error);\n    });\n\n    \n}\n\nexport default {\n    signUp,\n    logIn\n}"]},"metadata":{},"sourceType":"module"}