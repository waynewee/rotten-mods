{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport HomeModuleList from \"../components/HomeModuleList\";\nimport SectionTitle from \"../components/SectionTitle\";\nimport ModuleCompareModal from \"../components/ModuleCompareModal\";\nimport { useSelector } from \"react-redux\";\nimport recommendationApi from \"../api/recommendations\";\nimport moduleApi from \"../api/module\";\nimport { useEffect, useState } from \"react\";\n\nconst Home = ({}) => {\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\n  const userId = useSelector(state => {\n    var _state$auth$user;\n\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user._id;\n  });\n  const {\n    0: trendingModules,\n    1: setTrendingModules\n  } = useState([]);\n  const {\n    0: popularModules,\n    1: setPopularModules\n  } = useState([]);\n  const {\n    0: recommendedModules,\n    1: setRecommendedModules\n  } = useState([]);\n  useEffect(() => {\n    fetchAllRecommendations();\n  }, [userId]);\n\n  const fetchAllRecommendations = async () => {\n    const backupModules = await moduleApi.searchModule(\"cs1\");\n\n    const concatBackup = (modulesToRecommend, setModulesMethod) => {\n      if (modulesToRecommend.length < 3) {\n        const sufficientModules = modulesToRecommend.concat(backupModules);\n        setModulesMethod(sufficientModules);\n      } else {\n        setModulesMethod(modulesToRecommend);\n      }\n    };\n\n    recommendationApi.getMostRatedModules().then(response => {\n      concatBackup(response.mods, setPopularModules);\n    }).catch(error => {\n      // no modules\n      concatBackup([], setPopularModules);\n    });\n    recommendationApi.getMostViewedModules().then(response => {\n      concatBackup(response.mods, setTrendingModules);\n    }).catch(error => {\n      // no modules\n      concatBackup([], setTrendingModules);\n    });\n\n    try {\n      if (userId) {\n        const recommendedModules = await recommendationApi.getRecommendedModules(userId);\n        concatBackup(recommendedModules.mods, setRecommendedModules);\n      }\n    } catch (err) {\n      console.log(\"User has insufficient activities to get recommended\");\n    }\n  };\n\n  const renderRecommendedModules = () => {\n    if (userId) {\n      if (recommendedModules.length > 0) {\n        console.log(\"Recommended:\", recommendedModules);\n        return __jsx(React.Fragment, null, __jsx(SectionTitle, {\n          title: \"Recommended For You\"\n        }), __jsx(HomeModuleList, {\n          modules: recommendedModules\n        }));\n      } else {\n        return __jsx(React.Fragment, null, __jsx(SectionTitle, {\n          title: \"Recommended For You\"\n        }), __jsx(\"p\", {\n          style: {\n            textAlign: \"center\",\n            paddingTop: \"20px\"\n          }\n        }, \"Sorry we do not have enough information about you yet to recommend modules for you!\"));\n      }\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ModuleCompareModal, null), __jsx(SectionTitle, {\n    title: \"Trending Modules\"\n  }), __jsx(HomeModuleList, {\n    modules: trendingModules\n  }), __jsx(SectionTitle, {\n    title: \"Popular Modules\"\n  }), __jsx(HomeModuleList, {\n    modules: popularModules\n  }), isLoggedIn && renderRecommendedModules());\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}