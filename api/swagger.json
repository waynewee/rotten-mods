{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "RottenMods API",
    "description": "RottenMods API",
    "license": {}
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/user": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User is deleted"
          }
        }
      },
      "post": {
        "summary": "Update user with give ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/user/saved-mods/{userId}":{
      "get":{
        "tags":[
          "Users",
          "Mods"
        ],
        "summary": "Gets a SavedModsList",
        "responses": {
          "200":{
            "description": "Returns a SavedModsList",
            "schema":{
              "$ref": "#/definitions/SavedModsList"
            }
          }
        }
      }
    },
    "/school": {
      "put": {
        "tags": [
          "Schools"
        ],
        "summary": "Create new school in system",
        "parameters": [
          {
            "name": "school",
            "in": "body",
            "description": "School that we want to create",
            "schema": {
              "$ref": "#/definitions/School"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New school is created",
            "schema": {
              "$ref": "#/definitions/School"
            }
          }
        }
      }
    },
    "/school/{schoolId}": {
      "parameters": [
        {
          "name": "schoolId",
          "in": "path",
          "required": true,
          "description": "ID of school that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Schools"
        ],
        "summary": "Get school with given ID",
        "responses": {
          "200": {
            "description": "School is found",
            "schema": {
              "$ref": "#/definitions/School"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete school with given ID",
        "tags": [
          "Schools"
        ],
        "responses": {
          "200": {
            "description": "School is deleted"
          }
        }
      },
      "post": {
        "summary": "Update school with give ID",
        "tags": [
          "Schools"
        ],
        "parameters": [
          {
            "name": "school",
            "in": "body",
            "description": "School with new values of properties",
            "schema": {
              "$ref": "#/definitions/School"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "School is updated",
            "schema": {
              "$ref": "#/definitions/School"
            }
          }
        }
      }
    },
    "/course": {
      "put": {
        "tags": [
          "Courses"
        ],
        "summary": "Create new course in system",
        "parameters": [
          {
            "name": "course",
            "in": "body",
            "description": "Course that we want to create",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New course is created",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        }
      }
    },
    "/course/{courseId}": {
      "parameters": [
        {
          "name": "courseId",
          "in": "path",
          "required": true,
          "description": "ID of course that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Courses"
        ],
        "summary": "Get course with given ID",
        "responses": {
          "200": {
            "description": "Course is found",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete course with given ID",
        "tags": [
          "Courses"
        ],
        "responses": {
          "200": {
            "description": "Course is deleted"
          }
        }
      },
      "post": {
        "summary": "Update course with give ID",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "name": "course",
            "in": "body",
            "description": "Course with new values of properties",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course is updated",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          }
        }
      }
    },
    "/mod": {
      "put": {
        "tags": [
          "Mods"
        ],
        "summary": "Create new module in system",
        "parameters": [
          {
            "name": "mod",
            "in": "body",
            "description": "Module that we want to create",
            "schema": {
              "$ref": "#/definitions/Mod"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New module is created",
            "schema": {
              "$ref": "#/definitions/Mod"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Gets a list of modules",
        "parameters": [
          {
            "name": "s",
            "in": "query",
            "description": "Search term",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page of search",
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of results we want",
            "type": "string"
          }
        ]
      }
    },
    "/mod/{modId}": {
      "parameters": [
        {
          "name": "modId",
          "in": "path",
          "required": true,
          "description": "ID of mod that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get mod with given ID",
        "responses": {
          "200": {
            "description": "Mod is found",
            "schema": {
              "$ref": "#/definitions/Mod"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete mod with given ID",
        "tags": [
          "Mods"
        ],
        "responses": {
          "200": {
            "description": "Mod is deleted"
          }
        }
      }
    },
    "/mod/rating/{modId}": {
      "parameters": [
        {
          "name": "modId",
          "in": "path",
          "required": true,
          "description": "ID of mod that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get rating for the mod with given ID",
        "responses": {
          "200": {
            "description": "Mod rating is calculated",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          }
        }
      }
    },
    "/mod/save":{
      "parameters":[
        {
          "name": "mod",
          "in": "body",
          "description": "Module that we want to create",
          "schema": {
            "$ref": "#/definitions/Mod"
          }
        }
      ],
      "put":{
        "tags": [
          "Mods"
        ],
        "summary": "Saves a module to a user's SavedModsList",
        "responses": {
          "200": {
            "description": "Mod saved successfully"
          }
        }
      }
    },
    "/event": {
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Adds an event",
        "parameters": [
          {
            "name": "event",
            "in": "body",
            "description": "Event that we want to create",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New event is created",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Logs a user in",
        "parameters": [
          {
            "name": "login",
            "in": "body",
            "description": "Logs a user in",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User verification is successful"
          },
          "403": {
            "description": "User verification is unsuccessful"
          }
        }
      }
    },
    "/rating": {
      "put": {
        "tags": [
          "Rating"
        ],
        "summary": "Adds a rating",
        "parameters": [
          {
            "name": "rating",
            "in": "body",
            "description": "Adds a rating",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Rating successfully added"
          },
          "403": {
            "description": "Failed to add rating"
          }
        }
      }
    },
    "/rating/{ratingId}": {
      "post": {
        "tags": [
          "Rating"
        ],
        "summary": "Updates a rating",
        "parameters": [
          {
            "name": "rating",
            "in": "body",
            "description": "Updates a rating",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Rating successfully update"
          },
          "403": {
            "description": "Failed to update rating"
          }
        }
      },
      "delete": {
        "summary": "Delete rating with given ID",
        "tags": [
          "Rating"
        ],
        "responses": {
          "200": {
            "description": "Rating is deleted"
          }
        }
      }
    },
    "/review": {
      "put": {
        "tags": [
          "Reviews"
        ],
        "summary": "Create new review for a module",
        "parameters": [
          {
            "name": "review",
            "in": "body",
            "description": "Review that we want to create",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New review is created",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Gets a list of reviews",
        "parameters": [
          {
            "name": "review",
            "in": "body",
            "description": "Review that we want to create",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ]
      }
    },
    "/review/{reviewId}":{
      "parameters": [
        {
          "name": "reviewId",
          "in": "path",
          "required": true,
          "description": "ID of review that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get review with given ID",
        "responses": {
          "200": {
            "description": "Review is found",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete review with given ID",
        "tags": [
          "Reviews"
        ],
        "responses": {
          "200": {
            "description": "Review is deleted"
          }
        }
      },
      "post": {
        "summary": "Updates review",
        "parameters": [
          {
            "name": "review",
            "in": "body",
            "description": "Review that we want to create",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "tags": [
          "Reviews"
        ],
        "responses": {
          "200": {
            "description": "Review is updated"
          }
        }
      }

    },
    "/review/replies/{reviewId}": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Gets a list of review replies",
        "parameters": [
          {
            "name": "reviewId",
            "in": "path",
            "description": "Review that we wish to get replies for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of replies",
            "schema":{
              "type": "array",
              "$ref": "#/definitions/ReviewReply"
            }
          }
        }
      }
    }
  },
  
  "definitions": {
    "Mod":{
      "required": [
        "code",
        "title"
      ],
      "properties":{
        "code":{
          "type": "string"
        },
        "title":{
          "type": "string"
        }
      }
    },
    "School":{
      "required":[
        "name"
      ],
      "properties":{
        "name":{
          "type": "string"
        }
      }
    },
    "Course":{
      "required":[
        "name"
      ],
      "properties":{
        "name":{
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "schoolId":{
          "type": "string"
        },
        "courseId":{
          "type": "string"
        },
        "yearOfStudy":{
          "type":"number"
        }
      }
    },
    "Event": {
      "required": [
        "email"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "modId": {
          "type": "string"
        }
      }
    },
    "Rating":{
      "required": [
        "userId",
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "modId": {
          "type": "string"
        },
        "value": {
          "type": "number"
        }
      }
    },
    "Login": {
      "required": [
        "email",
        "password"
      ],
      "properties":{
        "email": {
          "type": "string"
        },
        "password":{
          "type": "string"
        }
      }
    },
    "SavedModsList":{
      "properties":{
        "modIds": {
          "type": "array",
          "items":{
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Review": {
      "required": [
        "text",
        "userId",
        "modId"
      ],
      "properties":{
        "text": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "modId": {
          "type": "string"
        }
      }
    },
    "ReviewReply": {
      "required": [
        "text",
        "userId",
        "reviewId"
      ],
      "properties":{
        "text": {
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    }
  }
}