{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "RottenMods API",
    "description": "RottenMods API",
    "license": {}
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User is deleted",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/mod/{modId}": {
      "parameters": [
        {
          "name": "modId",
          "in": "path",
          "required": true,
          "description": "ID of mod that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Mods"
        ],
        "summary": "Get mod with given ID",
        "responses": {
          "200": {
            "description": "Mod is found",
            "schema": {
              "$ref": "#/definitions/Mod"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete mod with given ID",
        "tags": [
          "Mods"
        ],
        "responses": {
          "200": {
            "description": "Mod is deleted",
            "schema": {
              "$ref": "#/definitions/Mod"
            }
          }
        }
      },
      "put": {
        "summary": "Update mod with give ID",
        "tags": [
          "Mods"
        ],
        "parameters": [
          {
            "name": "mod",
            "in": "body",
            "description": "Mod with new values of properties",
            "schema": {
              "$ref": "#/definitions/Mod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mod is updated",
            "schema": {
              "$ref": "#/definitions/Mod"
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "parameters": [
        {
          "name": "eventId",
          "in": "path",
          "required": true,
          "description": "ID of event that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get event with given ID",
        "responses": {
          "200": {
            "description": "Event is found",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete event with given ID",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Event is deleted",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "put": {
        "summary": "Update event with give ID",
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "event",
            "in": "body",
            "description": "Event with new values of properties",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event is updated",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    }
  },
  
  "definitions": {
    "Mod":{
      "required": [
        "code",
        "title"
      ],
      "properties":{
        "_id":{
          "type":"string"
        },
        "code":{
          "type": "string"
        },
        "title":{
          "type": "string"
        }
      }
    },
    "School":{
      "properties":{
        "_id":{
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "email"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "uniqueItems": true
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Event": {
      "required": [
        "email"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "uniqueItems": true
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}